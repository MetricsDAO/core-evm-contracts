{
  "address": "0x84941b755148B4B5eFE844E9E029754FE6b7381e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bountyQuestion",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "questionStateController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "claimController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "costController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "metricToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CannotVoteForOwnQuestion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimsNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DoesNotHold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FunctionIsLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAtBenchmark",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionDoesNotExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "challengeCreator",
          "type": "address"
        }
      ],
      "name": "ChallengeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        }
      ],
      "name": "ChallengeProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "answerer",
          "type": "address"
        }
      ],
      "name": "QuestionAnswered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        }
      ],
      "name": "QuestionClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "QuestionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "disqualifier",
          "type": "address"
        }
      ],
      "name": "QuestionDisqualified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "publisher",
          "type": "address"
        }
      ],
      "name": "QuestionPublished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "QuestionUnvoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "QuestionUpvoted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROGRAM_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        }
      ],
      "name": "addHolderRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "answerURL",
          "type": "string"
        }
      ],
      "name": "answerQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "claimQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "claimLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "createChallenge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "createQuestion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "disqualifyQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBountyQuestion",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClaimController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCostController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetricToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getQuestionStateController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "proposeChallenge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "publishChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "publishQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "releaseClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newQuestion",
          "type": "address"
        }
      ],
      "name": "setClaimController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newCost",
          "type": "address"
        }
      ],
      "name": "setCostController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMetric",
          "type": "address"
        }
      ],
      "name": "setMetrictoken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newQuestion",
          "type": "address"
        }
      ],
      "name": "setQuestionProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newQuestion",
          "type": "address"
        }
      ],
      "name": "setQuestionStateController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "unvoteQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "upvoteQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "enum STAGE",
          "name": "stage",
          "type": "uint8"
        }
      ],
      "name": "withdrawFromVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ddb805e3f6570d37962cf41780d64c97a930357447e9117cdd6af5e2e9c9ed3",
  "receipt": {
    "to": null,
    "from": "0x0F7494eE0831529fD676ADbc234f858e280AeAF0",
    "contractAddress": "0x84941b755148B4B5eFE844E9E029754FE6b7381e",
    "transactionIndex": 15,
    "gasUsed": "2863493",
    "logsBloom": "0x00000000000000000020000000000000000000200000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000020000000000000000000000000000000000008000000000000000000000000010000",
    "blockHash": "0xe331585841b828058e662488e7762db1299d4490c7488b2a2868fbbee6025e6b",
    "transactionHash": "0x8ddb805e3f6570d37962cf41780d64c97a930357447e9117cdd6af5e2e9c9ed3",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 7603836,
        "transactionHash": "0x8ddb805e3f6570d37962cf41780d64c97a930357447e9117cdd6af5e2e9c9ed3",
        "address": "0x84941b755148B4B5eFE844E9E029754FE6b7381e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f7494ee0831529fd676adbc234f858e280aeaf0"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0xe331585841b828058e662488e7762db1299d4490c7488b2a2868fbbee6025e6b"
      }
    ],
    "blockNumber": 7603836,
    "cumulativeGasUsed": "7849291",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x13768DDe7c93644AAe97bA2344Fa42f2C0A317F0",
    "0x647448403c19E8b6F792D5547013984c4e0BD6c3",
    "0xbb0C1BF0B915071a4953A3F0CcC3A4abBCe98870",
    "0xb724A8bF82010E2AE526226bD7Afd55afcF49b6A",
    "0xDe78866CeBB1922F25cCB43eeCcbE6Df3a12f80c",
    "0xA0b67CA0A36834BDf412f24744FAbee16F2FAcA2"
  ],
  "numDeployments": 1,
  "solcInputHash": "47b64a1bc1e11d0d714fb3e2e194e242",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bountyQuestion\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"questionStateController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"costController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"metricToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotVoteForOwnQuestion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimsNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotHold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FunctionIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAtBenchmark\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionDoesNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challengeCreator\",\"type\":\"address\"}],\"name\":\"ChallengeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"ChallengeProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"answerer\",\"type\":\"address\"}],\"name\":\"QuestionAnswered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"}],\"name\":\"QuestionClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"QuestionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"disqualifier\",\"type\":\"address\"}],\"name\":\"QuestionDisqualified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"publisher\",\"type\":\"address\"}],\"name\":\"QuestionPublished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"QuestionUnvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"QuestionUpvoted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROGRAM_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"addHolderRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"answerURL\",\"type\":\"string\"}],\"name\":\"answerQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"claimQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"claimLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"createChallenge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"createQuestion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"disqualifyQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBountyQuestion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCostController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetricToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuestionStateController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"proposeChallenge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"publishChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"publishQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"releaseClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newQuestion\",\"type\":\"address\"}],\"name\":\"setClaimController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCost\",\"type\":\"address\"}],\"name\":\"setCostController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMetric\",\"type\":\"address\"}],\"name\":\"setMetrictoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newQuestion\",\"type\":\"address\"}],\"name\":\"setQuestionProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newQuestion\",\"type\":\"address\"}],\"name\":\"setQuestionStateController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"unvoteQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"upvoteQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"enum STAGE\",\"name\":\"stage\",\"type\":\"uint8\"}],\"name\":\"withdrawFromVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"MetricsDAO team\",\"kind\":\"dev\",\"methods\":{\"answerQuestion(uint256,string)\":{\"params\":{\"answerURL\":\"THE IPFS hash of the answer.\",\"questionId\":\"The questionId of the question to answer.\"}},\"claimQuestion(uint256)\":{\"params\":{\"questionId\":\"The questionId of the question to disqualify\"}},\"constructor\":{\"params\":{\"bountyQuestion\":\"BountyQuestion contract instance.\",\"claimController\":\"The claim controller address.\",\"costController\":\"The action cost controller address.\",\"metricToken\":\"The address of the METRIC token.\",\"questionStateController\":\"The question state controller address.\"}},\"createChallenge(string,uint256,uint256)\":{\"params\":{\"claimLimit\":\"The limit for the amount of people that can claim the challenge\",\"threshold\":\"The METRIC holding threshold required to claim the question.\",\"uri\":\"The IPFS hash of the challenge\"},\"returns\":{\"_0\":\"questionId The question id\"}},\"createQuestion(string)\":{\"params\":{\"uri\":\"The IPFS hash of the question.\"},\"returns\":{\"_0\":\"The question id\"}},\"disqualifyQuestion(uint256)\":{\"params\":{\"questionId\":\"The questionId of the question to disqualify.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proposeChallenge(string)\":{\"params\":{\"uri\":\"The IPFS hash of the challenge.\"},\"returns\":{\"_0\":\"The challenge id\"}},\"publishQuestion(uint256,uint256,uint256)\":{\"params\":{\"claimLimit\":\"The amount of claims per question.\",\"questionId\":\"The questionId of the question to publish\",\"threshold\":\"The METRIC holding threshold required to claim the question.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setClaimController(address)\":{\"params\":{\"newQuestion\":\"The address of the new ClaimController contract.\"}},\"setCostController(address)\":{\"params\":{\"newCost\":\"The address of the new CostController contract.\"}},\"setQuestionProxy(address)\":{\"params\":{\"newQuestion\":\"The address of the new BountyQuestion contract.\"}},\"setQuestionStateController(address)\":{\"params\":{\"newQuestion\":\"The address of the new BountyQuestion contract.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unvoteQuestion(uint256)\":{\"params\":{\"questionId\":\"The questionId of the question to upvote.\"}},\"upvoteQuestion(uint256)\":{\"params\":{\"questionId\":\"The questionId of the question to upvote.\"}}},\"title\":\"MetricsDAO question API\",\"version\":1},\"userdoc\":{\"errors\":{\"CannotVoteForOwnQuestion()\":[{\"notice\":\"Throw if user tries to vote for own question\"}],\"ClaimsNotOpen()\":[{\"notice\":\"Throw if analysts tries to claim a question that is not published.\"}],\"InvalidAddress()\":[{\"notice\":\"Throw if address is equal to address(0).\"}],\"NotAtBenchmark()\":[{\"notice\":\"Throw if a question has not reached the benchmark for being published (yet).\"}],\"QuestionDoesNotExist()\":[{\"notice\":\"Throw if action is executed on a question that does not exist.\"}]},\"events\":{\"ChallengeCreated(uint256,address)\":{\"notice\":\"Emitted when a challenge is created.\"},\"ChallengeProposed(uint256,address)\":{\"notice\":\"Emitted when a challenge is proposed.\"},\"QuestionAnswered(uint256,address)\":{\"notice\":\"Emitted when a question is answered.\"},\"QuestionClaimed(uint256,address)\":{\"notice\":\"Emitted when a question is claimed.\"},\"QuestionCreated(uint256,address)\":{\"notice\":\"Emitted when a question is created.\"},\"QuestionDisqualified(uint256,address)\":{\"notice\":\"Emitted when a question is disqualified.\"},\"QuestionPublished(uint256,address)\":{\"notice\":\"Emitted when a question is published.\"},\"QuestionUnvoted(uint256,address)\":{\"notice\":\"Emitted when a question is unvoted.\"},\"QuestionUpvoted(uint256,address)\":{\"notice\":\"Emitted when a question is upvoted.\"}},\"kind\":\"user\",\"methods\":{\"answerQuestion(uint256,string)\":{\"notice\":\"Allows a claimed question to be answered by an analyst.\"},\"claimQuestion(uint256)\":{\"notice\":\"Allows anm analyst to claim a question and submit an answer before the dealine.\"},\"constructor\":{\"notice\":\"Constructor sets the question state controller, claim controller, and action cost controller.\"},\"createChallenge(string,uint256,uint256)\":{\"notice\":\"Directly creates a challenge, this is an optional feature for program managers that would like to create challenges directly (skipping the voting stage).\"},\"createQuestion(string)\":{\"notice\":\"Creates a question.\"},\"disqualifyQuestion(uint256)\":{\"notice\":\"Allows the owner to disqualify a question.\"},\"proposeChallenge(string)\":{\"notice\":\"Creates a challenge.\"},\"publishQuestion(uint256,uint256,uint256)\":{\"notice\":\"Publishes a question and allows it to be claimed and receive answers.\"},\"setClaimController(address)\":{\"notice\":\"Allows the owner to set the ClaimController contract address.\"},\"setCostController(address)\":{\"notice\":\"Allows the owner to set the CostController contract address.\"},\"setQuestionProxy(address)\":{\"notice\":\"Allows the owner to set the BountyQuestion contract address.\"},\"setQuestionStateController(address)\":{\"notice\":\"Allows the owner to set the QuestionStateController contract address.\"},\"unvoteQuestion(uint256)\":{\"notice\":\"Unvotes a question.\"},\"upvoteQuestion(uint256)\":{\"notice\":\"Upvotes a question.\"}},\"notice\":\"This contract is an API for MetricsDAO that allows for interacting with questions & challenges.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/QuestionAPI.sol\":\"QuestionAPI\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/ActionEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum ACTION {\\n    CREATE,\\n    VOTE,\\n    CLAIM,\\n    CHALLENGE_BURN\\n}\\n\",\"keccak256\":\"0x580118b7f79d541fcb1e9ee09b4f145a5fc269843245cbb517912329ca2a8589\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/ClaimEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum CLAIM_STATE {\\n    UNINT,\\n    CLAIMED,\\n    RELEASED,\\n    ANSWERED\\n}\\n\",\"keccak256\":\"0xea71b984aaf40147b5540a4db0f867086eaf9c4c45acd47e4f4e3149b649b1e6\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/QuestionStateEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum STATE {\\n    UNINIT,\\n    VOTING,\\n    PENDING,\\n    PUBLISHED,\\n    DISQUALIFIED,\\n    COMPLETED\\n}\\n\",\"keccak256\":\"0x72cc784cc502713781c3079d528f57b2c0a3f1b21a93b5e8f490c3897be8f65e\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/VaultEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum STAGE {\\n    CREATE_AND_VOTE,\\n    UNVOTE,\\n    CLAIM_AND_ANSWER,\\n    RELEASE_CLAIM,\\n    REVIEW\\n}\\n\\nenum STATUS {\\n    UNINT,\\n    DEPOSITED,\\n    WITHDRAWN,\\n    SLASHED\\n}\\n\",\"keccak256\":\"0x1d96c2cfb960bcdad5245263ab395222413b31c448bed38e1de19ce6f46244c8\",\"license\":\"MIT\"},\"src/contracts/Protocol/EventsAndErrors/ApiEventsAndErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ApiEventsAndErrors {\\n    ///------------------------------------------------------ EVENTS\\n\\n    /// @notice Emitted when a question is created.\\n    event QuestionCreated(uint256 indexed questionId, address indexed creator);\\n\\n    /// @notice Emitted when a challenge is created.\\n    event ChallengeCreated(uint256 indexed questionId, address indexed challengeCreator);\\n\\n    /// @notice Emitted when a question is published.\\n    event QuestionPublished(uint256 indexed questionId, address indexed publisher);\\n\\n    /// @notice Emitted when a question is claimed.\\n    event QuestionClaimed(uint256 indexed questionId, address indexed claimant);\\n\\n    /// @notice Emitted when a question is answered.\\n    event QuestionAnswered(uint256 indexed questionId, address indexed answerer);\\n\\n    /// @notice Emitted when a question is disqualified.\\n    event QuestionDisqualified(uint256 indexed questionId, address indexed disqualifier);\\n\\n    /// @notice Emitted when a question is upvoted.\\n    event QuestionUpvoted(uint256 indexed questionId, address indexed voter);\\n\\n    /// @notice Emitted when a question is unvoted.\\n    event QuestionUnvoted(uint256 indexed questionId, address indexed voter);\\n\\n    /// @notice Emitted when a challenge is proposed.\\n    event ChallengeProposed(uint256 indexed questionId, address indexed proposer);\\n\\n    //------------------------------------------------------ ERRORS\\n\\n    /// @notice Throw if analysts tries to claim a question that is not published.\\n    error ClaimsNotOpen();\\n\\n    /// @notice Throw if a question has not reached the benchmark for being published (yet).\\n    error NotAtBenchmark();\\n\\n    /// @notice Throw if address is equal to address(0).\\n    error InvalidAddress();\\n\\n    /// @notice Throw if user tries to vote for own question\\n    error CannotVoteForOwnQuestion();\\n\\n    /// @notice Throw if action is executed on a question that does not exist.\\n    error QuestionDoesNotExist();\\n}\\n\",\"keccak256\":\"0x7fc0e9364f5400bed85cfc2535fa39b9f63831ae0d1e343c3c39e67b2a7fc1a6\",\"license\":\"MIT\"},\"src/contracts/Protocol/QuestionAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Interfaces\\nimport {IClaimController} from \\\"./interfaces/IClaimController.sol\\\";\\nimport {IQuestionStateController} from \\\"./interfaces/IQuestionStateController.sol\\\";\\nimport {IActionCostController} from \\\"./interfaces/IActionCostController.sol\\\";\\nimport {IBountyQuestion} from \\\"./interfaces/IBountyQuestion.sol\\\";\\nimport {IVault} from \\\"./interfaces/IVault.sol\\\";\\n\\n// Enums\\nimport {ACTION} from \\\"./Enums/ActionEnum.sol\\\";\\nimport {STATE} from \\\"./Enums/QuestionStateEnum.sol\\\";\\nimport {STAGE} from \\\"./Enums/VaultEnum.sol\\\";\\n\\n// Events & Errors\\nimport {ApiEventsAndErrors} from \\\"./EventsAndErrors/ApiEventsAndErrors.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/NFTLocked.sol\\\";\\nimport \\\"./modifiers/FunctionLocked.sol\\\";\\n\\n/**\\n * @title MetricsDAO question API\\n * @author MetricsDAO team\\n * @notice This contract is an API for MetricsDAO that allows for interacting with questions & challenges.\\n */\\n\\ncontract QuestionAPI is Ownable, NFTLocked, FunctionLocked, ApiEventsAndErrors {\\n    IBountyQuestion private _question;\\n    IQuestionStateController private _questionStateController;\\n    IClaimController private _claimController;\\n    IActionCostController private _costController;\\n    IVault private _vault;\\n    address private _metricToken;\\n\\n    //------------------------------------------------------ CONSTRUCTOR\\n\\n    /**\\n     * @notice Constructor sets the question state controller, claim controller, and action cost controller.\\n     * @param bountyQuestion BountyQuestion contract instance.\\n     * @param questionStateController The question state controller address.\\n     * @param claimController The claim controller address.\\n     * @param costController The action cost controller address.\\n     * @param metricToken The address of the METRIC token.\\n     */\\n    constructor(\\n        address bountyQuestion,\\n        address questionStateController,\\n        address claimController,\\n        address costController,\\n        address metricToken,\\n        address vault\\n    ) {\\n        _question = IBountyQuestion(bountyQuestion);\\n        _questionStateController = IQuestionStateController(questionStateController);\\n        _claimController = IClaimController(claimController);\\n        _costController = IActionCostController(costController);\\n        _metricToken = metricToken;\\n        _vault = IVault(vault);\\n    }\\n\\n    //------------------------------------------------------ FUNCTIONS\\n\\n    /**\\n     * @notice Creates a question.\\n     * @param uri The IPFS hash of the question.\\n     * @return The question id\\n     */\\n    function createQuestion(string calldata uri) public returns (uint256) {\\n        // Mint a new question\\n        uint256 questionId = _question.mintQuestion(_msgSender(), uri);\\n\\n        // Initialize the question\\n        _questionStateController.initializeQuestion(questionId);\\n\\n        // Pay to create a question\\n        _costController.payForAction(_msgSender(), questionId, ACTION.CREATE);\\n\\n        emit QuestionCreated(questionId, _msgSender());\\n\\n        return questionId;\\n    }\\n\\n    /**\\n     * @notice Creates a challenge.\\n     * @param uri The IPFS hash of the challenge.\\n     * @return The challenge id\\n     */\\n    function proposeChallenge(string calldata uri) public returns (uint256) {\\n        // Mint a new question\\n        uint256 questionId = _question.mintQuestion(_msgSender(), uri);\\n\\n        // Initialize the question\\n        _questionStateController.initializeChallenge(questionId);\\n\\n        // Burn METRIC\\n        _costController.burnForAction(_msgSender(), ACTION.CHALLENGE_BURN);\\n\\n        emit ChallengeProposed(questionId, _msgSender());\\n\\n        return questionId;\\n    }\\n\\n    /**\\n     * @notice Directly creates a challenge, this is an optional feature for program managers that would like to create challenges directly (skipping the voting stage).\\n     * @param uri The IPFS hash of the challenge\\n     * @param claimLimit The limit for the amount of people that can claim the challenge\\n     * @param threshold The METRIC holding threshold required to claim the question.\\n     * @return questionId The question id\\n     */\\n    function createChallenge(\\n        string calldata uri,\\n        uint256 claimLimit,\\n        uint256 threshold\\n    ) public onlyHolder(PROGRAM_MANAGER_ROLE) returns (uint256) {\\n        // Mint a new question\\n        uint256 questionId = _question.mintQuestion(_msgSender(), uri);\\n\\n        // Initialize the question\\n        _questionStateController.initializeQuestion(questionId);\\n        _claimController.initializeQuestion(questionId, claimLimit, threshold);\\n\\n        // Publish the question\\n        _questionStateController.publishFromQuestion(questionId);\\n\\n        emit ChallengeCreated(questionId, _msgSender());\\n\\n        return questionId;\\n    }\\n\\n    /**\\n     * @notice Upvotes a question.\\n     * @param questionId The questionId of the question to upvote.\\n     */\\n    function upvoteQuestion(uint256 questionId) public {\\n        if (_question.getAuthorOfQuestion(questionId) == _msgSender()) revert CannotVoteForOwnQuestion();\\n\\n        // Vote for a question\\n        _questionStateController.voteFor(_msgSender(), questionId);\\n\\n        // Pay to upvote a question\\n        _costController.payForAction(_msgSender(), questionId, ACTION.VOTE);\\n\\n        emit QuestionUpvoted(questionId, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Unvotes a question.\\n     * @param questionId The questionId of the question to upvote.\\n     */\\n    function unvoteQuestion(uint256 questionId) public {\\n        _questionStateController.unvoteFor(_msgSender(), questionId);\\n\\n        _vault.withdrawMetric(_msgSender(), questionId, STAGE.UNVOTE);\\n\\n        emit QuestionUnvoted(questionId, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Publishes a question and allows it to be claimed and receive answers.\\n     * @param questionId The questionId of the question to publish\\n     * @param claimLimit The amount of claims per question.\\n     * @param threshold The METRIC holding threshold required to claim the question.\\n     */\\n\\n    function publishQuestion(\\n        uint256 questionId,\\n        uint256 claimLimit,\\n        uint256 threshold\\n    ) public onlyHolder(ADMIN_ROLE) {\\n        // Publish the question\\n        _questionStateController.publishFromQuestion(questionId);\\n        _claimController.initializeQuestion(questionId, claimLimit, threshold);\\n\\n        emit QuestionPublished(questionId, _msgSender());\\n    }\\n\\n    function publishChallenge(\\n        uint256 questionId,\\n        uint256 claimLimit,\\n        uint256 threshold\\n    ) public onlyHolder(ADMIN_ROLE) {\\n        // Publish the question\\n        _questionStateController.publishFromChallenge(questionId);\\n        _claimController.initializeQuestion(questionId, claimLimit, threshold);\\n\\n        emit QuestionPublished(questionId, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Allows anm analyst to claim a question and submit an answer before the dealine.\\n     * @param questionId The questionId of the question to disqualify\\n     */\\n    function claimQuestion(uint256 questionId) public {\\n        // Check if the question is published and is therefore claimable\\n        if (_questionStateController.getState(questionId) != STATE.PUBLISHED) revert ClaimsNotOpen();\\n\\n        // Claim the question\\n        _claimController.claim(_msgSender(), questionId);\\n\\n        // Pay for claiming a question\\n        _costController.payForAction(_msgSender(), questionId, ACTION.CLAIM);\\n\\n        emit QuestionClaimed(questionId, _msgSender());\\n    }\\n\\n    function releaseClaim(uint256 questionId) public {\\n        _claimController.releaseClaim(_msgSender(), questionId);\\n\\n        _vault.withdrawMetric(_msgSender(), questionId, STAGE.RELEASE_CLAIM);\\n    }\\n\\n    /**\\n     * @notice Allows a claimed question to be answered by an analyst.\\n     * @param questionId The questionId of the question to answer.\\n     * @param answerURL THE IPFS hash of the answer.\\n     */\\n    function answerQuestion(uint256 questionId, string calldata answerURL) public functionLocked {\\n        _claimController.answer(_msgSender(), questionId, answerURL);\\n\\n        emit QuestionAnswered(questionId, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Allows the owner to disqualify a question.\\n     * @param questionId The questionId of the question to disqualify.\\n     */\\n    function disqualifyQuestion(uint256 questionId) public onlyOwner functionLocked {\\n        if (questionId > _question.getMostRecentQuestion()) revert QuestionDoesNotExist();\\n        _questionStateController.setDisqualifiedState(questionId);\\n\\n        emit QuestionDisqualified(questionId, _msgSender());\\n    }\\n\\n    function withdrawFromVault(uint256 questionId, STAGE stage) public {\\n        _vault.withdrawMetric(_msgSender(), questionId, stage);\\n    }\\n\\n    // ------------------------------------------------------ VIEW FUNCTIONS\\n\\n    function getMetricToken() public view returns (address) {\\n        return _metricToken;\\n    }\\n\\n    function getQuestionStateController() public view returns (address) {\\n        return address(_questionStateController);\\n    }\\n\\n    function getClaimController() public view returns (address) {\\n        return address(_claimController);\\n    }\\n\\n    function getCostController() public view returns (address) {\\n        return address(_costController);\\n    }\\n\\n    function getBountyQuestion() public view returns (address) {\\n        return address(_question);\\n    }\\n\\n    //------------------------------------------------------ OWNER FUNCTIONS\\n\\n    /**\\n     * @notice Allows the owner to set the BountyQuestion contract address.\\n     * @param newQuestion The address of the new BountyQuestion contract.\\n     */\\n    function setQuestionProxy(address newQuestion) public onlyOwner {\\n        if (newQuestion == address(0)) revert InvalidAddress();\\n        _question = IBountyQuestion(newQuestion);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to set the QuestionStateController contract address.\\n     * @param newQuestion The address of the new BountyQuestion contract.\\n     */\\n    function setQuestionStateController(address newQuestion) public onlyOwner {\\n        if (newQuestion == address(0)) revert InvalidAddress();\\n        _questionStateController = IQuestionStateController(newQuestion);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to set the ClaimController contract address.\\n     * @param newQuestion The address of the new ClaimController contract.\\n     */\\n    function setClaimController(address newQuestion) public onlyOwner {\\n        if (newQuestion == address(0)) revert InvalidAddress();\\n        _claimController = IClaimController(newQuestion);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to set the CostController contract address.\\n     * @param newCost The address of the new CostController contract.\\n     */\\n    function setCostController(address newCost) public onlyOwner {\\n        if (newCost == address(0)) revert InvalidAddress();\\n        _costController = IActionCostController(newCost);\\n    }\\n\\n    function setMetrictoken(address newMetric) public onlyOwner {\\n        if (newMetric == address(0)) revert InvalidAddress();\\n        _metricToken = newMetric;\\n    }\\n}\\n\",\"keccak256\":\"0x5c03f28527555cb081f3669067c7b6a870e66019816b3ad688486e6d79ab0e80\",\"license\":\"MIT\"},\"src/contracts/Protocol/Structs/AnswerStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {CLAIM_STATE} from \\\"../Enums/ClaimEnum.sol\\\";\\n\\nstruct Answer {\\n    CLAIM_STATE state;\\n    address author;\\n    string answerURL;\\n    uint256 finalGrade;\\n    string scoringMetaDataURI;\\n}\\n\",\"keccak256\":\"0x5c238cb3974d2d8eedb5c107b88c381f6562d1920741494be7270e9f82817b1d\",\"license\":\"MIT\"},\"src/contracts/Protocol/Structs/QuestionData.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {STATE} from \\\"../Enums/QuestionStateEnum.sol\\\";\\n\\nstruct QuestionData {\\n    uint256 questionId;\\n    address author;\\n    string uri;\\n    uint256 totalVotes;\\n    STATE questionState;\\n}\\n\",\"keccak256\":\"0x7f79334ef9425f69db4c3fd53ddc0c610aa3588cfaf72e89aee9a0cae2db3214\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IActionCostController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Enums/ActionEnum.sol\\\";\\n\\ninterface IActionCostController {\\n    function setActionCost(ACTION action, uint256 cost) external;\\n\\n    function payForAction(\\n        address _user,\\n        uint256 questionId,\\n        ACTION action\\n    ) external;\\n\\n    function burnForAction(address _user, ACTION action) external;\\n}\\n\",\"keccak256\":\"0x75d66ee6c74944d68dea615778c4425862bcd65a63f390e3a394071d61450dac\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IBountyQuestion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Structs/QuestionData.sol\\\";\\n\\ninterface IBountyQuestion {\\n    function mintQuestion(address author, string calldata uri) external returns (uint256);\\n\\n    function getQuestionData(uint256 questionId) external view returns (QuestionData memory);\\n\\n    function getMostRecentQuestion() external view returns (uint256);\\n\\n    function updateState(uint256 questionId, STATE newState) external;\\n\\n    function updateVotes(uint256 questionId, uint256 newVotes) external;\\n\\n    function getAuthorOfQuestion(uint256 questionId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xdf4b3a9ecaec2769699b45ecab614aef77f6506da168eae2aa11a004756f223b\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IClaimController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Structs/AnswerStruct.sol\\\";\\n\\ninterface IClaimController {\\n    function initializeQuestion(\\n        uint256 questionId,\\n        uint256 claimLimit,\\n        uint256 threshold\\n    ) external;\\n\\n    function claim(address user, uint256 questionId) external;\\n\\n    function releaseClaim(address user, uint256 questionId) external;\\n\\n    function answer(\\n        address user,\\n        uint256 questionId,\\n        string calldata answerURL\\n    ) external;\\n\\n    function getClaimDataForUser(uint256 questionId, address user) external view returns (Answer memory _answer);\\n\\n    function getQuestionClaimState(uint256 questionId, address user) external view returns (CLAIM_STATE claimState);\\n\\n    function getMetricThreshold(uint256 questionId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf6c5c7f201551d0f7387444d393144b025c6a768f921701657f060cd1e5fc684\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IQuestionStateController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Enums/QuestionStateEnum.sol\\\";\\n\\ninterface IQuestionStateController {\\n    function initializeQuestion(uint256 questionId) external;\\n\\n    function initializeChallenge(uint256 questionId) external;\\n\\n    function voteFor(address _user, uint256 questionId) external;\\n\\n    function unvoteFor(address _user, uint256 questionId) external;\\n\\n    function publishFromQuestion(uint256 question) external;\\n\\n    function publishFromChallenge(uint256 question) external;\\n\\n    function getState(uint256 quesitonId) external view returns (STATE currentState);\\n\\n    function getHasUserVoted(address user, uint256 questionId) external view returns (bool);\\n\\n    function setDisqualifiedState(uint256 questionId) external;\\n}\\n\",\"keccak256\":\"0x54d3bed946dbe996d5eb27568c710a7d76ef65ca812574c2a2b2588f9f70aee2\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Enums/VaultEnum.sol\\\";\\n\\ninterface IVault {\\n    function withdrawMetric(\\n        address user,\\n        uint256 questionId,\\n        STAGE stage\\n    ) external;\\n\\n    function lockMetric(\\n        address user,\\n        uint256 amount,\\n        uint256 questionId,\\n        STAGE stage\\n    ) external;\\n\\n    function burnMetric(address user, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x275584d4e9332e3fc4ce22c2aeb2172222fc85eb0f27d240898c3f7d3f330438\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/FunctionLocked.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract FunctionLocked is Ownable {\\n    bool isLocked;\\n\\n    error FunctionIsLocked();\\n\\n    function toggleLock() public onlyOwner {\\n        isLocked = !isLocked;\\n    }\\n\\n    modifier functionLocked() {\\n        if (isLocked) revert FunctionIsLocked();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfdf401383499d6118daa4e1278353e336dc6255d272b3832d66e4805630306c6\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/NFTLocked.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Interfaces\\nimport {IERC721} from \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\nabstract contract NFTLocked is Ownable {\\n    bytes32 public constant PROGRAM_MANAGER_ROLE = keccak256(\\\"PROGRAM_MANAGER_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    mapping(bytes32 => address) private _nfts;\\n\\n    function addHolderRole(bytes32 role, address nft) public onlyOwner {\\n        _nfts[role] = nft;\\n    }\\n\\n    modifier onlyHolder(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    error DoesNotHold();\\n\\n    function _checkRole(bytes32 role) internal view virtual {\\n        if (IERC721(_nfts[role]).balanceOf(_msgSender()) == 0) revert DoesNotHold();\\n    }\\n}\\n\",\"keccak256\":\"0x3c6b4f5b9fa89ff7672c2270b8115811f307ba9dfb1d9e65bcf5b445d7072d87\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200339f3803806200339f83398181016040528101906200003791906200031f565b620000576200004b620001e960201b60201c565b620001f160201b60201c565b85600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050620003bb565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002e782620002ba565b9050919050565b620002f981620002da565b81146200030557600080fd5b50565b6000815190506200031981620002ee565b92915050565b60008060008060008060c087890312156200033f576200033e620002b5565b5b60006200034f89828a0162000308565b96505060206200036289828a0162000308565b95505060406200037589828a0162000308565b94505060606200038889828a0162000308565b93505060806200039b89828a0162000308565b92505060a0620003ae89828a0162000308565b9150509295509295509295565b612fd480620003cb6000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80639dde027b11610104578063bc7cc527116100a2578063ec8f677711610071578063ec8f6777146104ca578063f0f64201146104e6578063f2fde38b14610502578063ff9413d81461051e576101cf565b8063bc7cc52714610456578063ceadfd5214610472578063e11041c314610490578063e9d8c381146104ac576101cf565b8063ad81ca78116100de578063ad81ca78146103bc578063b3580c1e146103da578063b8fc27641461040a578063bc4102971461043a576101cf565b80639dde027b14610364578063a8bde4eb14610382578063a8e2a38b1461039e576101cf565b806367c48e051161017157806375b238fc1161014b57806375b238fc146102f05780638da5cb5b1461030e578063912ee5fc1461032c5780639a6110b414610348576101cf565b806367c48e05146102ac5780636ee5a1b1146102ca578063715018a6146102e6576101cf565b80632523660d116101ad5780632523660d1461023c578063314c3e9814610258578063447e52a014610274578063610ced2414610290576101cf565b80630ef4b531146101d45780631919bcd6146101f05780631aaaac931461020c575b600080fd5b6101ee60048036038101906101e9919061275a565b610528565b005b61020a600480360381019061020591906127e5565b61079e565b005b61022660048036038101906102219190612877565b6108c4565b60405161023391906128fa565b60405180910390f35b61025660048036038101906102519190612915565b610ba0565b005b610272600480360381019061026d919061299e565b610d39565b005b61028e600480360381019061028991906129de565b610e0b565b005b6102aa60048036038101906102a59190612915565b610f3c565b005b6102b46110d5565b6040516102c19190612a4d565b60405180910390f35b6102e460048036038101906102df919061275a565b6110ff565b005b6102ee61127c565b005b6102f8611304565b6040516103059190612a77565b60405180910390f35b610316611328565b6040516103239190612a4d565b60405180910390f35b610346600480360381019061034191906127e5565b611351565b005b610362600480360381019061035d919061275a565b611477565b005b61036c6116df565b6040516103799190612a4d565b60405180910390f35b61039c6004803603810190610397919061275a565b611709565b005b6103a661183b565b6040516103b39190612a4d565b60405180910390f35b6103c4611865565b6040516103d19190612a4d565b60405180910390f35b6103f460048036038101906103ef9190612a92565b61188f565b60405161040191906128fa565b60405180910390f35b610424600480360381019061041f9190612a92565b611ab8565b60405161043191906128fa565b60405180910390f35b610454600480360381019061044f91906127e5565b611cdf565b005b610470600480360381019061046b9190612b04565b611e05565b005b61047a611ea1565b6040516104879190612a4d565b60405180910390f35b6104aa60048036038101906104a5919061275a565b611ecb565b005b6104b461214f565b6040516104c19190612a77565b60405180910390f35b6104e460048036038101906104df91906127e5565b612173565b005b61050060048036038101906104fb91906127e5565b612299565b005b61051c600480360381019061051791906127e5565b6123bf565b005b6105266124b6565b005b6003600581111561053c5761053b612b44565b5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28836040518263ffffffff1660e01b815260040161059791906128fa565b602060405180830381865afa1580156105b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d89190612b98565b60058111156105ea576105e9612b44565b5b14610621576040517f3b03644900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aad3ec9661066761255e565b836040518363ffffffff1660e01b8152600401610685929190612bc5565b600060405180830381600087803b15801561069f57600080fd5b505af11580156106b3573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d67644d6106fd61255e565b8360026040518463ffffffff1660e01b815260040161071e93929190612c36565b600060405180830381600087803b15801561073857600080fd5b505af115801561074c573d6000803e3d6000fd5b5050505061075861255e565b73ffffffffffffffffffffffffffffffffffffffff16817f8420685f160085bdc75c7d5265ef561ea88eb1ab5b58b0cd38b68babcf537cb560405160405180910390a350565b6107a661255e565b73ffffffffffffffffffffffffffffffffffffffff166107c4611328565b73ffffffffffffffffffffffffffffffffffffffff161461081a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081190612cca565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610880576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f104852406e94df2c5112860c28c2d2e43c02e322bc0cf95e2d0159faf296d7fb6108f081612566565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dab6dbce61093861255e565b89896040518463ffffffff1660e01b815260040161095893929190612d37565b6020604051808303816000875af1158015610977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099b9190612d7e565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d6a8f797826040518263ffffffff1660e01b81526004016109f891906128fa565b600060405180830381600087803b158015610a1257600080fd5b505af1158015610a26573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166389488e558287876040518463ffffffff1660e01b8152600401610a8993929190612dab565b600060405180830381600087803b158015610aa357600080fd5b505af1158015610ab7573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a134ac1f826040518263ffffffff1660e01b8152600401610b1691906128fa565b600060405180830381600087803b158015610b3057600080fd5b505af1158015610b44573d6000803e3d6000fd5b50505050610b5061255e565b73ffffffffffffffffffffffffffffffffffffffff16817f83a97ccca8e136a4d58fd664739225fcfe9db9a5b0bebf35df44614f2aa9b63a60405160405180910390a38092505050949350505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610bca81612566565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a134ac1f856040518263ffffffff1660e01b8152600401610c2591906128fa565b600060405180830381600087803b158015610c3f57600080fd5b505af1158015610c53573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166389488e558585856040518463ffffffff1660e01b8152600401610cb693929190612dab565b600060405180830381600087803b158015610cd057600080fd5b505af1158015610ce4573d6000803e3d6000fd5b50505050610cf061255e565b73ffffffffffffffffffffffffffffffffffffffff16847f48b3755b206fcea70a67e15db40f89daf0a8391f12082cc27d6c4412eb73158f60405160405180910390a350505050565b610d4161255e565b73ffffffffffffffffffffffffffffffffffffffff16610d5f611328565b73ffffffffffffffffffffffffffffffffffffffff1614610db5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dac90612cca565b60405180910390fd5b806001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600260009054906101000a900460ff1615610e52576040517f77e9811b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de9951a6610e9861255e565b8585856040518563ffffffff1660e01b8152600401610eba9493929190612de2565b600060405180830381600087803b158015610ed457600080fd5b505af1158015610ee8573d6000803e3d6000fd5b50505050610ef461255e565b73ffffffffffffffffffffffffffffffffffffffff16837f3523d3f08d443a3de3a7a5e0213c8b3728df4dcaa7ce5182097cadd88689766d60405160405180910390a3505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610f6681612566565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ee272ab856040518263ffffffff1660e01b8152600401610fc191906128fa565b600060405180830381600087803b158015610fdb57600080fd5b505af1158015610fef573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166389488e558585856040518463ffffffff1660e01b815260040161105293929190612dab565b600060405180830381600087803b15801561106c57600080fd5b505af1158015611080573d6000803e3d6000fd5b5050505061108c61255e565b73ffffffffffffffffffffffffffffffffffffffff16847f48b3755b206fcea70a67e15db40f89daf0a8391f12082cc27d6c4412eb73158f60405160405180910390a350505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e78daa7561114561255e565b836040518363ffffffff1660e01b8152600401611163929190612bc5565b600060405180830381600087803b15801561117d57600080fd5b505af1158015611191573d6000803e3d6000fd5b50505050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636b1c5cd26111db61255e565b8360016040518463ffffffff1660e01b81526004016111fc93929190612e6a565b600060405180830381600087803b15801561121657600080fd5b505af115801561122a573d6000803e3d6000fd5b5050505061123661255e565b73ffffffffffffffffffffffffffffffffffffffff16817f2ce8d0b5aac2aac75df5d055eba39e1a943c8ee924ac71efd94de57b4b6fa49b60405160405180910390a350565b61128461255e565b73ffffffffffffffffffffffffffffffffffffffff166112a2611328565b73ffffffffffffffffffffffffffffffffffffffff16146112f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ef90612cca565b60405180910390fd5b6113026000612656565b565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61135961255e565b73ffffffffffffffffffffffffffffffffffffffff16611377611328565b73ffffffffffffffffffffffffffffffffffffffff16146113cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c490612cca565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611433576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61147f61255e565b73ffffffffffffffffffffffffffffffffffffffff1661149d611328565b73ffffffffffffffffffffffffffffffffffffffff16146114f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ea90612cca565b60405180910390fd5b600260009054906101000a900460ff161561153a576040517f77e9811b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166374bedfc96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cb9190612d7e565b811115611604576040517f043caffb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ecf24b31826040518263ffffffff1660e01b815260040161165f91906128fa565b600060405180830381600087803b15801561167957600080fd5b505af115801561168d573d6000803e3d6000fd5b5050505061169961255e565b73ffffffffffffffffffffffffffffffffffffffff16817ff71fc70f190ad1360e34d483a2c00ef97b0da48cf5c510686ff1b3961176db1360405160405180910390a350565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663469724e161174f61255e565b836040518363ffffffff1660e01b815260040161176d929190612bc5565b600060405180830381600087803b15801561178757600080fd5b505af115801561179b573d6000803e3d6000fd5b50505050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636b1c5cd26117e561255e565b8360036040518463ffffffff1660e01b815260040161180693929190612e6a565b600060405180830381600087803b15801561182057600080fd5b505af1158015611834573d6000803e3d6000fd5b5050505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dab6dbce6118d861255e565b86866040518463ffffffff1660e01b81526004016118f893929190612d37565b6020604051808303816000875af1158015611917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193b9190612d7e565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d6a8f797826040518263ffffffff1660e01b815260040161199891906128fa565b600060405180830381600087803b1580156119b257600080fd5b505af11580156119c6573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d67644d611a1061255e565b8360006040518463ffffffff1660e01b8152600401611a3193929190612c36565b600060405180830381600087803b158015611a4b57600080fd5b505af1158015611a5f573d6000803e3d6000fd5b50505050611a6b61255e565b73ffffffffffffffffffffffffffffffffffffffff16817fe507074282a0f805a6f370a3dfca4b5578056337d6fe37524243a02ca7a3cae160405160405180910390a38091505092915050565b600080600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dab6dbce611b0161255e565b86866040518463ffffffff1660e01b8152600401611b2193929190612d37565b6020604051808303816000875af1158015611b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b649190612d7e565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636fbb8fc7826040518263ffffffff1660e01b8152600401611bc191906128fa565b600060405180830381600087803b158015611bdb57600080fd5b505af1158015611bef573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377b69647611c3961255e565b60036040518363ffffffff1660e01b8152600401611c58929190612ea1565b600060405180830381600087803b158015611c7257600080fd5b505af1158015611c86573d6000803e3d6000fd5b50505050611c9261255e565b73ffffffffffffffffffffffffffffffffffffffff16817fb154fd88f0d05e9ff05c45cf236a6639c9e796e171b735cd5d3ffa44b0c4076460405160405180910390a38091505092915050565b611ce761255e565b73ffffffffffffffffffffffffffffffffffffffff16611d05611328565b73ffffffffffffffffffffffffffffffffffffffff1614611d5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5290612cca565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611dc1576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636b1c5cd2611e4b61255e565b84846040518463ffffffff1660e01b8152600401611e6b93929190612e6a565b600060405180830381600087803b158015611e8557600080fd5b505af1158015611e99573d6000803e3d6000fd5b505050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611ed361255e565b73ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663710bc3cd836040518263ffffffff1660e01b8152600401611f4491906128fa565b602060405180830381865afa158015611f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f859190612edf565b73ffffffffffffffffffffffffffffffffffffffff1603611fd2576040517f549bb9b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166324d6d60161201861255e565b836040518363ffffffff1660e01b8152600401612036929190612bc5565b600060405180830381600087803b15801561205057600080fd5b505af1158015612064573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d67644d6120ae61255e565b8360016040518463ffffffff1660e01b81526004016120cf93929190612c36565b600060405180830381600087803b1580156120e957600080fd5b505af11580156120fd573d6000803e3d6000fd5b5050505061210961255e565b73ffffffffffffffffffffffffffffffffffffffff16817f2d41d13a6e38ae738043e6c4811b1f16f9608295287f54de44621ed6e4b4505660405160405180910390a350565b7f104852406e94df2c5112860c28c2d2e43c02e322bc0cf95e2d0159faf296d7fb81565b61217b61255e565b73ffffffffffffffffffffffffffffffffffffffff16612199611328565b73ffffffffffffffffffffffffffffffffffffffff16146121ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e690612cca565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612255576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6122a161255e565b73ffffffffffffffffffffffffffffffffffffffff166122bf611328565b73ffffffffffffffffffffffffffffffffffffffff1614612315576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230c90612cca565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361237b576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6123c761255e565b73ffffffffffffffffffffffffffffffffffffffff166123e5611328565b73ffffffffffffffffffffffffffffffffffffffff161461243b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243290612cca565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036124aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a190612f7e565b60405180910390fd5b6124b381612656565b50565b6124be61255e565b73ffffffffffffffffffffffffffffffffffffffff166124dc611328565b73ffffffffffffffffffffffffffffffffffffffff1614612532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252990612cca565b60405180910390fd5b600260009054906101000a900460ff1615600260006101000a81548160ff021916908315150217905550565b600033905090565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082316125bf61255e565b6040518263ffffffff1660e01b81526004016125db9190612a4d565b602060405180830381865afa1580156125f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261c9190612d7e565b03612653576040517fbddc845600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600080fd5b6000819050919050565b61273781612724565b811461274257600080fd5b50565b6000813590506127548161272e565b92915050565b6000602082840312156127705761276f61271a565b5b600061277e84828501612745565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127b282612787565b9050919050565b6127c2816127a7565b81146127cd57600080fd5b50565b6000813590506127df816127b9565b92915050565b6000602082840312156127fb576127fa61271a565b5b6000612809848285016127d0565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261283757612836612812565b5b8235905067ffffffffffffffff81111561285457612853612817565b5b6020830191508360018202830111156128705761286f61281c565b5b9250929050565b600080600080606085870312156128915761289061271a565b5b600085013567ffffffffffffffff8111156128af576128ae61271f565b5b6128bb87828801612821565b945094505060206128ce87828801612745565b92505060406128df87828801612745565b91505092959194509250565b6128f481612724565b82525050565b600060208201905061290f60008301846128eb565b92915050565b60008060006060848603121561292e5761292d61271a565b5b600061293c86828701612745565b935050602061294d86828701612745565b925050604061295e86828701612745565b9150509250925092565b6000819050919050565b61297b81612968565b811461298657600080fd5b50565b60008135905061299881612972565b92915050565b600080604083850312156129b5576129b461271a565b5b60006129c385828601612989565b92505060206129d4858286016127d0565b9150509250929050565b6000806000604084860312156129f7576129f661271a565b5b6000612a0586828701612745565b935050602084013567ffffffffffffffff811115612a2657612a2561271f565b5b612a3286828701612821565b92509250509250925092565b612a47816127a7565b82525050565b6000602082019050612a626000830184612a3e565b92915050565b612a7181612968565b82525050565b6000602082019050612a8c6000830184612a68565b92915050565b60008060208385031215612aa957612aa861271a565b5b600083013567ffffffffffffffff811115612ac757612ac661271f565b5b612ad385828601612821565b92509250509250929050565b60058110612aec57600080fd5b50565b600081359050612afe81612adf565b92915050565b60008060408385031215612b1b57612b1a61271a565b5b6000612b2985828601612745565b9250506020612b3a85828601612aef565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60068110612b8057600080fd5b50565b600081519050612b9281612b73565b92915050565b600060208284031215612bae57612bad61271a565b5b6000612bbc84828501612b83565b91505092915050565b6000604082019050612bda6000830185612a3e565b612be760208301846128eb565b9392505050565b60048110612bff57612bfe612b44565b5b50565b6000819050612c1082612bee565b919050565b6000612c2082612c02565b9050919050565b612c3081612c15565b82525050565b6000606082019050612c4b6000830186612a3e565b612c5860208301856128eb565b612c656040830184612c27565b949350505050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612cb4602083612c6d565b9150612cbf82612c7e565b602082019050919050565b60006020820190508181036000830152612ce381612ca7565b9050919050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000612d168385612c6d565b9350612d23838584612cea565b612d2c83612cf9565b840190509392505050565b6000604082019050612d4c6000830186612a3e565b8181036020830152612d5f818486612d0a565b9050949350505050565b600081519050612d788161272e565b92915050565b600060208284031215612d9457612d9361271a565b5b6000612da284828501612d69565b91505092915050565b6000606082019050612dc060008301866128eb565b612dcd60208301856128eb565b612dda60408301846128eb565b949350505050565b6000606082019050612df76000830187612a3e565b612e0460208301866128eb565b8181036040830152612e17818486612d0a565b905095945050505050565b60058110612e3357612e32612b44565b5b50565b6000819050612e4482612e22565b919050565b6000612e5482612e36565b9050919050565b612e6481612e49565b82525050565b6000606082019050612e7f6000830186612a3e565b612e8c60208301856128eb565b612e996040830184612e5b565b949350505050565b6000604082019050612eb66000830185612a3e565b612ec36020830184612c27565b9392505050565b600081519050612ed9816127b9565b92915050565b600060208284031215612ef557612ef461271a565b5b6000612f0384828501612eca565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612f68602683612c6d565b9150612f7382612f0c565b604082019050919050565b60006020820190508181036000830152612f9781612f5b565b905091905056fea264697066735822122037c45b2a14d245b5cd3779482134ee12e00a4ed78d9ec1212c36c55281fe7bc664736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80639dde027b11610104578063bc7cc527116100a2578063ec8f677711610071578063ec8f6777146104ca578063f0f64201146104e6578063f2fde38b14610502578063ff9413d81461051e576101cf565b8063bc7cc52714610456578063ceadfd5214610472578063e11041c314610490578063e9d8c381146104ac576101cf565b8063ad81ca78116100de578063ad81ca78146103bc578063b3580c1e146103da578063b8fc27641461040a578063bc4102971461043a576101cf565b80639dde027b14610364578063a8bde4eb14610382578063a8e2a38b1461039e576101cf565b806367c48e051161017157806375b238fc1161014b57806375b238fc146102f05780638da5cb5b1461030e578063912ee5fc1461032c5780639a6110b414610348576101cf565b806367c48e05146102ac5780636ee5a1b1146102ca578063715018a6146102e6576101cf565b80632523660d116101ad5780632523660d1461023c578063314c3e9814610258578063447e52a014610274578063610ced2414610290576101cf565b80630ef4b531146101d45780631919bcd6146101f05780631aaaac931461020c575b600080fd5b6101ee60048036038101906101e9919061275a565b610528565b005b61020a600480360381019061020591906127e5565b61079e565b005b61022660048036038101906102219190612877565b6108c4565b60405161023391906128fa565b60405180910390f35b61025660048036038101906102519190612915565b610ba0565b005b610272600480360381019061026d919061299e565b610d39565b005b61028e600480360381019061028991906129de565b610e0b565b005b6102aa60048036038101906102a59190612915565b610f3c565b005b6102b46110d5565b6040516102c19190612a4d565b60405180910390f35b6102e460048036038101906102df919061275a565b6110ff565b005b6102ee61127c565b005b6102f8611304565b6040516103059190612a77565b60405180910390f35b610316611328565b6040516103239190612a4d565b60405180910390f35b610346600480360381019061034191906127e5565b611351565b005b610362600480360381019061035d919061275a565b611477565b005b61036c6116df565b6040516103799190612a4d565b60405180910390f35b61039c6004803603810190610397919061275a565b611709565b005b6103a661183b565b6040516103b39190612a4d565b60405180910390f35b6103c4611865565b6040516103d19190612a4d565b60405180910390f35b6103f460048036038101906103ef9190612a92565b61188f565b60405161040191906128fa565b60405180910390f35b610424600480360381019061041f9190612a92565b611ab8565b60405161043191906128fa565b60405180910390f35b610454600480360381019061044f91906127e5565b611cdf565b005b610470600480360381019061046b9190612b04565b611e05565b005b61047a611ea1565b6040516104879190612a4d565b60405180910390f35b6104aa60048036038101906104a5919061275a565b611ecb565b005b6104b461214f565b6040516104c19190612a77565b60405180910390f35b6104e460048036038101906104df91906127e5565b612173565b005b61050060048036038101906104fb91906127e5565b612299565b005b61051c600480360381019061051791906127e5565b6123bf565b005b6105266124b6565b005b6003600581111561053c5761053b612b44565b5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28836040518263ffffffff1660e01b815260040161059791906128fa565b602060405180830381865afa1580156105b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d89190612b98565b60058111156105ea576105e9612b44565b5b14610621576040517f3b03644900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aad3ec9661066761255e565b836040518363ffffffff1660e01b8152600401610685929190612bc5565b600060405180830381600087803b15801561069f57600080fd5b505af11580156106b3573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d67644d6106fd61255e565b8360026040518463ffffffff1660e01b815260040161071e93929190612c36565b600060405180830381600087803b15801561073857600080fd5b505af115801561074c573d6000803e3d6000fd5b5050505061075861255e565b73ffffffffffffffffffffffffffffffffffffffff16817f8420685f160085bdc75c7d5265ef561ea88eb1ab5b58b0cd38b68babcf537cb560405160405180910390a350565b6107a661255e565b73ffffffffffffffffffffffffffffffffffffffff166107c4611328565b73ffffffffffffffffffffffffffffffffffffffff161461081a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081190612cca565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610880576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f104852406e94df2c5112860c28c2d2e43c02e322bc0cf95e2d0159faf296d7fb6108f081612566565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dab6dbce61093861255e565b89896040518463ffffffff1660e01b815260040161095893929190612d37565b6020604051808303816000875af1158015610977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099b9190612d7e565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d6a8f797826040518263ffffffff1660e01b81526004016109f891906128fa565b600060405180830381600087803b158015610a1257600080fd5b505af1158015610a26573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166389488e558287876040518463ffffffff1660e01b8152600401610a8993929190612dab565b600060405180830381600087803b158015610aa357600080fd5b505af1158015610ab7573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a134ac1f826040518263ffffffff1660e01b8152600401610b1691906128fa565b600060405180830381600087803b158015610b3057600080fd5b505af1158015610b44573d6000803e3d6000fd5b50505050610b5061255e565b73ffffffffffffffffffffffffffffffffffffffff16817f83a97ccca8e136a4d58fd664739225fcfe9db9a5b0bebf35df44614f2aa9b63a60405160405180910390a38092505050949350505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610bca81612566565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a134ac1f856040518263ffffffff1660e01b8152600401610c2591906128fa565b600060405180830381600087803b158015610c3f57600080fd5b505af1158015610c53573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166389488e558585856040518463ffffffff1660e01b8152600401610cb693929190612dab565b600060405180830381600087803b158015610cd057600080fd5b505af1158015610ce4573d6000803e3d6000fd5b50505050610cf061255e565b73ffffffffffffffffffffffffffffffffffffffff16847f48b3755b206fcea70a67e15db40f89daf0a8391f12082cc27d6c4412eb73158f60405160405180910390a350505050565b610d4161255e565b73ffffffffffffffffffffffffffffffffffffffff16610d5f611328565b73ffffffffffffffffffffffffffffffffffffffff1614610db5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dac90612cca565b60405180910390fd5b806001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600260009054906101000a900460ff1615610e52576040517f77e9811b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de9951a6610e9861255e565b8585856040518563ffffffff1660e01b8152600401610eba9493929190612de2565b600060405180830381600087803b158015610ed457600080fd5b505af1158015610ee8573d6000803e3d6000fd5b50505050610ef461255e565b73ffffffffffffffffffffffffffffffffffffffff16837f3523d3f08d443a3de3a7a5e0213c8b3728df4dcaa7ce5182097cadd88689766d60405160405180910390a3505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610f6681612566565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ee272ab856040518263ffffffff1660e01b8152600401610fc191906128fa565b600060405180830381600087803b158015610fdb57600080fd5b505af1158015610fef573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166389488e558585856040518463ffffffff1660e01b815260040161105293929190612dab565b600060405180830381600087803b15801561106c57600080fd5b505af1158015611080573d6000803e3d6000fd5b5050505061108c61255e565b73ffffffffffffffffffffffffffffffffffffffff16847f48b3755b206fcea70a67e15db40f89daf0a8391f12082cc27d6c4412eb73158f60405160405180910390a350505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e78daa7561114561255e565b836040518363ffffffff1660e01b8152600401611163929190612bc5565b600060405180830381600087803b15801561117d57600080fd5b505af1158015611191573d6000803e3d6000fd5b50505050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636b1c5cd26111db61255e565b8360016040518463ffffffff1660e01b81526004016111fc93929190612e6a565b600060405180830381600087803b15801561121657600080fd5b505af115801561122a573d6000803e3d6000fd5b5050505061123661255e565b73ffffffffffffffffffffffffffffffffffffffff16817f2ce8d0b5aac2aac75df5d055eba39e1a943c8ee924ac71efd94de57b4b6fa49b60405160405180910390a350565b61128461255e565b73ffffffffffffffffffffffffffffffffffffffff166112a2611328565b73ffffffffffffffffffffffffffffffffffffffff16146112f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ef90612cca565b60405180910390fd5b6113026000612656565b565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61135961255e565b73ffffffffffffffffffffffffffffffffffffffff16611377611328565b73ffffffffffffffffffffffffffffffffffffffff16146113cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c490612cca565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611433576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61147f61255e565b73ffffffffffffffffffffffffffffffffffffffff1661149d611328565b73ffffffffffffffffffffffffffffffffffffffff16146114f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ea90612cca565b60405180910390fd5b600260009054906101000a900460ff161561153a576040517f77e9811b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166374bedfc96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cb9190612d7e565b811115611604576040517f043caffb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ecf24b31826040518263ffffffff1660e01b815260040161165f91906128fa565b600060405180830381600087803b15801561167957600080fd5b505af115801561168d573d6000803e3d6000fd5b5050505061169961255e565b73ffffffffffffffffffffffffffffffffffffffff16817ff71fc70f190ad1360e34d483a2c00ef97b0da48cf5c510686ff1b3961176db1360405160405180910390a350565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663469724e161174f61255e565b836040518363ffffffff1660e01b815260040161176d929190612bc5565b600060405180830381600087803b15801561178757600080fd5b505af115801561179b573d6000803e3d6000fd5b50505050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636b1c5cd26117e561255e565b8360036040518463ffffffff1660e01b815260040161180693929190612e6a565b600060405180830381600087803b15801561182057600080fd5b505af1158015611834573d6000803e3d6000fd5b5050505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dab6dbce6118d861255e565b86866040518463ffffffff1660e01b81526004016118f893929190612d37565b6020604051808303816000875af1158015611917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193b9190612d7e565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d6a8f797826040518263ffffffff1660e01b815260040161199891906128fa565b600060405180830381600087803b1580156119b257600080fd5b505af11580156119c6573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d67644d611a1061255e565b8360006040518463ffffffff1660e01b8152600401611a3193929190612c36565b600060405180830381600087803b158015611a4b57600080fd5b505af1158015611a5f573d6000803e3d6000fd5b50505050611a6b61255e565b73ffffffffffffffffffffffffffffffffffffffff16817fe507074282a0f805a6f370a3dfca4b5578056337d6fe37524243a02ca7a3cae160405160405180910390a38091505092915050565b600080600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dab6dbce611b0161255e565b86866040518463ffffffff1660e01b8152600401611b2193929190612d37565b6020604051808303816000875af1158015611b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b649190612d7e565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636fbb8fc7826040518263ffffffff1660e01b8152600401611bc191906128fa565b600060405180830381600087803b158015611bdb57600080fd5b505af1158015611bef573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377b69647611c3961255e565b60036040518363ffffffff1660e01b8152600401611c58929190612ea1565b600060405180830381600087803b158015611c7257600080fd5b505af1158015611c86573d6000803e3d6000fd5b50505050611c9261255e565b73ffffffffffffffffffffffffffffffffffffffff16817fb154fd88f0d05e9ff05c45cf236a6639c9e796e171b735cd5d3ffa44b0c4076460405160405180910390a38091505092915050565b611ce761255e565b73ffffffffffffffffffffffffffffffffffffffff16611d05611328565b73ffffffffffffffffffffffffffffffffffffffff1614611d5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5290612cca565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611dc1576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636b1c5cd2611e4b61255e565b84846040518463ffffffff1660e01b8152600401611e6b93929190612e6a565b600060405180830381600087803b158015611e8557600080fd5b505af1158015611e99573d6000803e3d6000fd5b505050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611ed361255e565b73ffffffffffffffffffffffffffffffffffffffff16600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663710bc3cd836040518263ffffffff1660e01b8152600401611f4491906128fa565b602060405180830381865afa158015611f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f859190612edf565b73ffffffffffffffffffffffffffffffffffffffff1603611fd2576040517f549bb9b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166324d6d60161201861255e565b836040518363ffffffff1660e01b8152600401612036929190612bc5565b600060405180830381600087803b15801561205057600080fd5b505af1158015612064573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d67644d6120ae61255e565b8360016040518463ffffffff1660e01b81526004016120cf93929190612c36565b600060405180830381600087803b1580156120e957600080fd5b505af11580156120fd573d6000803e3d6000fd5b5050505061210961255e565b73ffffffffffffffffffffffffffffffffffffffff16817f2d41d13a6e38ae738043e6c4811b1f16f9608295287f54de44621ed6e4b4505660405160405180910390a350565b7f104852406e94df2c5112860c28c2d2e43c02e322bc0cf95e2d0159faf296d7fb81565b61217b61255e565b73ffffffffffffffffffffffffffffffffffffffff16612199611328565b73ffffffffffffffffffffffffffffffffffffffff16146121ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e690612cca565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612255576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6122a161255e565b73ffffffffffffffffffffffffffffffffffffffff166122bf611328565b73ffffffffffffffffffffffffffffffffffffffff1614612315576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230c90612cca565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361237b576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6123c761255e565b73ffffffffffffffffffffffffffffffffffffffff166123e5611328565b73ffffffffffffffffffffffffffffffffffffffff161461243b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243290612cca565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036124aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a190612f7e565b60405180910390fd5b6124b381612656565b50565b6124be61255e565b73ffffffffffffffffffffffffffffffffffffffff166124dc611328565b73ffffffffffffffffffffffffffffffffffffffff1614612532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252990612cca565b60405180910390fd5b600260009054906101000a900460ff1615600260006101000a81548160ff021916908315150217905550565b600033905090565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082316125bf61255e565b6040518263ffffffff1660e01b81526004016125db9190612a4d565b602060405180830381865afa1580156125f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261c9190612d7e565b03612653576040517fbddc845600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600080fd5b6000819050919050565b61273781612724565b811461274257600080fd5b50565b6000813590506127548161272e565b92915050565b6000602082840312156127705761276f61271a565b5b600061277e84828501612745565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127b282612787565b9050919050565b6127c2816127a7565b81146127cd57600080fd5b50565b6000813590506127df816127b9565b92915050565b6000602082840312156127fb576127fa61271a565b5b6000612809848285016127d0565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261283757612836612812565b5b8235905067ffffffffffffffff81111561285457612853612817565b5b6020830191508360018202830111156128705761286f61281c565b5b9250929050565b600080600080606085870312156128915761289061271a565b5b600085013567ffffffffffffffff8111156128af576128ae61271f565b5b6128bb87828801612821565b945094505060206128ce87828801612745565b92505060406128df87828801612745565b91505092959194509250565b6128f481612724565b82525050565b600060208201905061290f60008301846128eb565b92915050565b60008060006060848603121561292e5761292d61271a565b5b600061293c86828701612745565b935050602061294d86828701612745565b925050604061295e86828701612745565b9150509250925092565b6000819050919050565b61297b81612968565b811461298657600080fd5b50565b60008135905061299881612972565b92915050565b600080604083850312156129b5576129b461271a565b5b60006129c385828601612989565b92505060206129d4858286016127d0565b9150509250929050565b6000806000604084860312156129f7576129f661271a565b5b6000612a0586828701612745565b935050602084013567ffffffffffffffff811115612a2657612a2561271f565b5b612a3286828701612821565b92509250509250925092565b612a47816127a7565b82525050565b6000602082019050612a626000830184612a3e565b92915050565b612a7181612968565b82525050565b6000602082019050612a8c6000830184612a68565b92915050565b60008060208385031215612aa957612aa861271a565b5b600083013567ffffffffffffffff811115612ac757612ac661271f565b5b612ad385828601612821565b92509250509250929050565b60058110612aec57600080fd5b50565b600081359050612afe81612adf565b92915050565b60008060408385031215612b1b57612b1a61271a565b5b6000612b2985828601612745565b9250506020612b3a85828601612aef565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60068110612b8057600080fd5b50565b600081519050612b9281612b73565b92915050565b600060208284031215612bae57612bad61271a565b5b6000612bbc84828501612b83565b91505092915050565b6000604082019050612bda6000830185612a3e565b612be760208301846128eb565b9392505050565b60048110612bff57612bfe612b44565b5b50565b6000819050612c1082612bee565b919050565b6000612c2082612c02565b9050919050565b612c3081612c15565b82525050565b6000606082019050612c4b6000830186612a3e565b612c5860208301856128eb565b612c656040830184612c27565b949350505050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612cb4602083612c6d565b9150612cbf82612c7e565b602082019050919050565b60006020820190508181036000830152612ce381612ca7565b9050919050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000612d168385612c6d565b9350612d23838584612cea565b612d2c83612cf9565b840190509392505050565b6000604082019050612d4c6000830186612a3e565b8181036020830152612d5f818486612d0a565b9050949350505050565b600081519050612d788161272e565b92915050565b600060208284031215612d9457612d9361271a565b5b6000612da284828501612d69565b91505092915050565b6000606082019050612dc060008301866128eb565b612dcd60208301856128eb565b612dda60408301846128eb565b949350505050565b6000606082019050612df76000830187612a3e565b612e0460208301866128eb565b8181036040830152612e17818486612d0a565b905095945050505050565b60058110612e3357612e32612b44565b5b50565b6000819050612e4482612e22565b919050565b6000612e5482612e36565b9050919050565b612e6481612e49565b82525050565b6000606082019050612e7f6000830186612a3e565b612e8c60208301856128eb565b612e996040830184612e5b565b949350505050565b6000604082019050612eb66000830185612a3e565b612ec36020830184612c27565b9392505050565b600081519050612ed9816127b9565b92915050565b600060208284031215612ef557612ef461271a565b5b6000612f0384828501612eca565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612f68602683612c6d565b9150612f7382612f0c565b604082019050919050565b60006020820190508181036000830152612f9781612f5b565b905091905056fea264697066735822122037c45b2a14d245b5cd3779482134ee12e00a4ed78d9ec1212c36c55281fe7bc664736f6c634300080d0033",
  "devdoc": {
    "author": "MetricsDAO team",
    "kind": "dev",
    "methods": {
      "answerQuestion(uint256,string)": {
        "params": {
          "answerURL": "THE IPFS hash of the answer.",
          "questionId": "The questionId of the question to answer."
        }
      },
      "claimQuestion(uint256)": {
        "params": {
          "questionId": "The questionId of the question to disqualify"
        }
      },
      "constructor": {
        "params": {
          "bountyQuestion": "BountyQuestion contract instance.",
          "claimController": "The claim controller address.",
          "costController": "The action cost controller address.",
          "metricToken": "The address of the METRIC token.",
          "questionStateController": "The question state controller address."
        }
      },
      "createChallenge(string,uint256,uint256)": {
        "params": {
          "claimLimit": "The limit for the amount of people that can claim the challenge",
          "threshold": "The METRIC holding threshold required to claim the question.",
          "uri": "The IPFS hash of the challenge"
        },
        "returns": {
          "_0": "questionId The question id"
        }
      },
      "createQuestion(string)": {
        "params": {
          "uri": "The IPFS hash of the question."
        },
        "returns": {
          "_0": "The question id"
        }
      },
      "disqualifyQuestion(uint256)": {
        "params": {
          "questionId": "The questionId of the question to disqualify."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proposeChallenge(string)": {
        "params": {
          "uri": "The IPFS hash of the challenge."
        },
        "returns": {
          "_0": "The challenge id"
        }
      },
      "publishQuestion(uint256,uint256,uint256)": {
        "params": {
          "claimLimit": "The amount of claims per question.",
          "questionId": "The questionId of the question to publish",
          "threshold": "The METRIC holding threshold required to claim the question."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setClaimController(address)": {
        "params": {
          "newQuestion": "The address of the new ClaimController contract."
        }
      },
      "setCostController(address)": {
        "params": {
          "newCost": "The address of the new CostController contract."
        }
      },
      "setQuestionProxy(address)": {
        "params": {
          "newQuestion": "The address of the new BountyQuestion contract."
        }
      },
      "setQuestionStateController(address)": {
        "params": {
          "newQuestion": "The address of the new BountyQuestion contract."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unvoteQuestion(uint256)": {
        "params": {
          "questionId": "The questionId of the question to upvote."
        }
      },
      "upvoteQuestion(uint256)": {
        "params": {
          "questionId": "The questionId of the question to upvote."
        }
      }
    },
    "title": "MetricsDAO question API",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CannotVoteForOwnQuestion()": [
        {
          "notice": "Throw if user tries to vote for own question"
        }
      ],
      "ClaimsNotOpen()": [
        {
          "notice": "Throw if analysts tries to claim a question that is not published."
        }
      ],
      "InvalidAddress()": [
        {
          "notice": "Throw if address is equal to address(0)."
        }
      ],
      "NotAtBenchmark()": [
        {
          "notice": "Throw if a question has not reached the benchmark for being published (yet)."
        }
      ],
      "QuestionDoesNotExist()": [
        {
          "notice": "Throw if action is executed on a question that does not exist."
        }
      ]
    },
    "events": {
      "ChallengeCreated(uint256,address)": {
        "notice": "Emitted when a challenge is created."
      },
      "ChallengeProposed(uint256,address)": {
        "notice": "Emitted when a challenge is proposed."
      },
      "QuestionAnswered(uint256,address)": {
        "notice": "Emitted when a question is answered."
      },
      "QuestionClaimed(uint256,address)": {
        "notice": "Emitted when a question is claimed."
      },
      "QuestionCreated(uint256,address)": {
        "notice": "Emitted when a question is created."
      },
      "QuestionDisqualified(uint256,address)": {
        "notice": "Emitted when a question is disqualified."
      },
      "QuestionPublished(uint256,address)": {
        "notice": "Emitted when a question is published."
      },
      "QuestionUnvoted(uint256,address)": {
        "notice": "Emitted when a question is unvoted."
      },
      "QuestionUpvoted(uint256,address)": {
        "notice": "Emitted when a question is upvoted."
      }
    },
    "kind": "user",
    "methods": {
      "answerQuestion(uint256,string)": {
        "notice": "Allows a claimed question to be answered by an analyst."
      },
      "claimQuestion(uint256)": {
        "notice": "Allows anm analyst to claim a question and submit an answer before the dealine."
      },
      "constructor": {
        "notice": "Constructor sets the question state controller, claim controller, and action cost controller."
      },
      "createChallenge(string,uint256,uint256)": {
        "notice": "Directly creates a challenge, this is an optional feature for program managers that would like to create challenges directly (skipping the voting stage)."
      },
      "createQuestion(string)": {
        "notice": "Creates a question."
      },
      "disqualifyQuestion(uint256)": {
        "notice": "Allows the owner to disqualify a question."
      },
      "proposeChallenge(string)": {
        "notice": "Creates a challenge."
      },
      "publishQuestion(uint256,uint256,uint256)": {
        "notice": "Publishes a question and allows it to be claimed and receive answers."
      },
      "setClaimController(address)": {
        "notice": "Allows the owner to set the ClaimController contract address."
      },
      "setCostController(address)": {
        "notice": "Allows the owner to set the CostController contract address."
      },
      "setQuestionProxy(address)": {
        "notice": "Allows the owner to set the BountyQuestion contract address."
      },
      "setQuestionStateController(address)": {
        "notice": "Allows the owner to set the QuestionStateController contract address."
      },
      "unvoteQuestion(uint256)": {
        "notice": "Unvotes a question."
      },
      "upvoteQuestion(uint256)": {
        "notice": "Upvotes a question."
      }
    },
    "notice": "This contract is an API for MetricsDAO that allows for interacting with questions & challenges.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/QuestionAPI.sol:QuestionAPI",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6772,
        "contract": "src/contracts/Protocol/QuestionAPI.sol:QuestionAPI",
        "label": "_nfts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 6728,
        "contract": "src/contracts/Protocol/QuestionAPI.sol:QuestionAPI",
        "label": "isLocked",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 4494,
        "contract": "src/contracts/Protocol/QuestionAPI.sol:QuestionAPI",
        "label": "_question",
        "offset": 1,
        "slot": "2",
        "type": "t_contract(IBountyQuestion)6537"
      },
      {
        "astId": 4497,
        "contract": "src/contracts/Protocol/QuestionAPI.sol:QuestionAPI",
        "label": "_questionStateController",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IQuestionStateController)6688"
      },
      {
        "astId": 4500,
        "contract": "src/contracts/Protocol/QuestionAPI.sol:QuestionAPI",
        "label": "_claimController",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IClaimController)6600"
      },
      {
        "astId": 4503,
        "contract": "src/contracts/Protocol/QuestionAPI.sol:QuestionAPI",
        "label": "_costController",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IActionCostController)6489"
      },
      {
        "astId": 4506,
        "contract": "src/contracts/Protocol/QuestionAPI.sol:QuestionAPI",
        "label": "_vault",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IVault)6721"
      },
      {
        "astId": 4508,
        "contract": "src/contracts/Protocol/QuestionAPI.sol:QuestionAPI",
        "label": "_metricToken",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IActionCostController)6489": {
        "encoding": "inplace",
        "label": "contract IActionCostController",
        "numberOfBytes": "20"
      },
      "t_contract(IBountyQuestion)6537": {
        "encoding": "inplace",
        "label": "contract IBountyQuestion",
        "numberOfBytes": "20"
      },
      "t_contract(IClaimController)6600": {
        "encoding": "inplace",
        "label": "contract IClaimController",
        "numberOfBytes": "20"
      },
      "t_contract(IQuestionStateController)6688": {
        "encoding": "inplace",
        "label": "contract IQuestionStateController",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)6721": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}