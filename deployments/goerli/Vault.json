{
  "address": "0xA0b67CA0A36834BDf412f24744FAbee16F2FAcA2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasuryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadySlashed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotUnvoteOwnQuestion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimNotReleased",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoMetricDeposited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheApi",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheCostController",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheDepositor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionHasInvalidStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionNotInReview",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionNotInVoting",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionNotPublished",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserHasNotUnvoted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "Slashed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimController",
      "outputs": [
        {
          "internalType": "contract IClaimController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "costController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositsByWithdrawers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "enum STAGE",
          "name": "stage",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAmountFromProperties",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getLockedMetricByQuestion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLockedPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetricTotalLockedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "enum STAGE",
          "name": "stage",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserFromProperties",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "enum STAGE",
          "name": "stage",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getVaultById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "enum STATUS",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct lockAttributes",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getVaultsByWithdrawer",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "enum STAGE",
          "name": "stage",
          "type": "uint8"
        }
      ],
      "name": "lockMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum STAGE",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedMetric",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum STATUS",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedMetricByQuestion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metric",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "question",
      "outputs": [
        {
          "internalType": "contract IBountyQuestion",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionAPI",
      "outputs": [
        {
          "internalType": "contract IQuestionAPI",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionApi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionStateController",
      "outputs": [
        {
          "internalType": "contract IQuestionStateController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newApi",
          "type": "address"
        }
      ],
      "name": "setQuestionApi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_questionAPI",
          "type": "address"
        }
      ],
      "name": "setQuestionApiCC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum STATUS",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalLockedInVaults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateBountyQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateClaimController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateCostController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateStateController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "enum STAGE",
          "name": "stage",
          "type": "uint8"
        }
      ],
      "name": "withdrawMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd5a900d79d0da85d3830c771fb2f42d941368a1969f52ea994ce315ca3beff8a",
  "receipt": {
    "to": null,
    "from": "0x0F7494eE0831529fD676ADbc234f858e280AeAF0",
    "contractAddress": "0xA0b67CA0A36834BDf412f24744FAbee16F2FAcA2",
    "transactionIndex": 28,
    "gasUsed": "3078514",
    "logsBloom": "0x
    "blockHash": "0x08bb71862db14dc0c20cccd18cf1688104661ce5df6a00d2df95c8268d7cd5b3",
    "transactionHash": "0xd5a900d79d0da85d3830c771fb2f42d941368a1969f52ea994ce315ca3beff8a",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 7603833,
        "transactionHash": "0xd5a900d79d0da85d3830c771fb2f42d941368a1969f52ea994ce315ca3beff8a",
        "address": "0xA0b67CA0A36834BDf412f24744FAbee16F2FAcA2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f7494ee0831529fd676adbc234f858e280aeaf0"
        ],
        "data": "0x",
        "logIndex": 48,
        "blockHash": "0x08bb71862db14dc0c20cccd18cf1688104661ce5df6a00d2df95c8268d7cd5b3"
      }
    ],
    "blockNumber": 7603833,
    "cumulativeGasUsed": "8824548",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD3603df4BC1A9df587155bc03eeb166874d6077C"
  ],
  "numDeployments": 1,
  "solcInputHash": "47b64a1bc1e11d0d714fb3e2e194e242",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadySlashed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotUnvoteOwnQuestion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimNotReleased\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoMetricDeposited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheApi\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheCostController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheDepositor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionHasInvalidStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionNotInReview\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionNotInVoting\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionNotPublished\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserHasNotUnvoted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimController\",\"outputs\":[{\"internalType\":\"contract IClaimController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositsByWithdrawers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"enum STAGE\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAmountFromProperties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getLockedMetricByQuestion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLockedPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetricTotalLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"enum STAGE\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserFromProperties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"enum STAGE\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getVaultById\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum STATUS\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct lockAttributes\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getVaultsByWithdrawer\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"enum STAGE\",\"name\":\"stage\",\"type\":\"uint8\"}],\"name\":\"lockMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum STAGE\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedMetric\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum STATUS\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedMetricByQuestion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metric\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"question\",\"outputs\":[{\"internalType\":\"contract IBountyQuestion\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionAPI\",\"outputs\":[{\"internalType\":\"contract IQuestionAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionApi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionStateController\",\"outputs\":[{\"internalType\":\"contract IQuestionStateController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newApi\",\"type\":\"address\"}],\"name\":\"setQuestionApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_questionAPI\",\"type\":\"address\"}],\"name\":\"setQuestionApiCC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum STATUS\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLockedInVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateBountyQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateClaimController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCostController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateStateController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"enum STAGE\",\"name\":\"stage\",\"type\":\"uint8\"}],\"name\":\"withdrawMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"treasuryAddress\":\"The treasury address.\"}},\"getMetricTotalLockedBalance()\":{\"returns\":{\"_0\":\"The total amount of Metric locked in the vault.\"}},\"getVaultById(uint256,uint8,address)\":{\"params\":{\"questionId\":\"The question id.\",\"stage\":\"The stage of the question.\",\"user\":\"The address of the user.\"},\"returns\":{\"_0\":\"A struct containing the attributes of the question (withdrawer, amount, status).\"}},\"getVaultsByWithdrawer(address)\":{\"params\":{\"user\":\"The address of the user.\"},\"returns\":{\"_0\":\"The questions that the user has created.\"}},\"lockMetric(address,uint256,uint256,uint8)\":{\"params\":{\"amount\":\"The amount of METRIC to lock\",\"questionId\":\"The question id'\",\"stage\":\"The stage for which METRIC is locked\",\"user\":\"The address of the user locking the METRIC\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setQuestionApi(address)\":{\"params\":{\"_newApi\":\"The new address of the question API.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawMetric(address,uint256,uint8)\":{\"params\":{\"questionId\":\"The question id\",\"stage\":\"The stage for which the user is withdrawing metric from a question.\",\"user\":\"The address of the user withdrawing the METRIC\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadySlashed()\":[{\"notice\":\"Throw if the same question is slashed twice.\"}],\"CannotUnvoteOwnQuestion()\":[{\"notice\":\"Throw if creator of question tries to unvote\"}],\"ClaimNotReleased()\":[{\"notice\":\"Throw if user tries to withdraw Metric from a claim that is not released.\"}],\"InvalidAddress()\":[{\"notice\":\"Throw if address is equal to address(0).\"}],\"InvalidStage()\":[{\"notice\":\"Throw if user tries to lock METRIC for a stage that does not require locking.\"}],\"NoMetricDeposited()\":[{\"notice\":\"Throw if user tries to withdraw Metric without having first deposited.\"}],\"NotTheDepositor()\":[{\"notice\":\"Throw if user tries to withdraw Metric from a question it does not own.\"}],\"QuestionHasInvalidStatus()\":[{\"notice\":\"Throw if user tries to lock Metric for a question that has a different state than UNINT.\"}],\"QuestionNotInReview()\":[{\"notice\":\"Throw if user tries to withdraw Metric from a question that is not in the review state.\"}],\"QuestionNotInVoting()\":[{\"notice\":\"Throw if user tries to claim Metric for unvoting on a question that is not in the VOTING state.\"}],\"QuestionNotPublished()\":[{\"notice\":\"Throw if user tries to claim Metric for a question that has not been published (yet).\"}],\"UserHasNotUnvoted()\":[{\"notice\":\"Throw if user tries to claim Metric for a question that was not unvoted\"}]},\"events\":{\"Slashed(address,uint256)\":{\"notice\":\"Event emitted when a question is slashed.\"},\"Withdraw(address,uint256)\":{\"notice\":\"Event emitted when Metric is withdrawn.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor sets the question Metric token, QuestionStateController and the treasury.\"},\"depositsByWithdrawers(address,uint256)\":{\"notice\":\"Keeps track of the quantity of deposits per user.\"},\"getMetricTotalLockedBalance()\":{\"notice\":\"Gets the total amount of Metric locked in the vault.\"},\"getVaultById(uint256,uint8,address)\":{\"notice\":\"Gets the information about the vault attributes of a question.\"},\"getVaultsByWithdrawer(address)\":{\"notice\":\"Gets the questions that a user has created.\"},\"lockMetric(address,uint256,uint256,uint8)\":{\"notice\":\"Locks METRIC for creating a question\"},\"lockedMetric(uint256,uint8,address)\":{\"notice\":\"Keeps track of the quantity of withdrawals per user.\"},\"lockedMetricByQuestion(uint256)\":{\"notice\":\"Keeps track of the amount of METRIC locked per question\"},\"setQuestionApi(address)\":{\"notice\":\"Sets the address of the question API.\"},\"setTreasury(address)\":{\"notice\":\"Allows owner to update the treasury address and questionApi.\"},\"totalLockedInVaults(address)\":{\"notice\":\"Keeps track of total amount in vault for a given user.\"},\"treasury()\":{\"notice\":\"Address to the MetricsDAO treasury.\"},\"updateStateController()\":{\"notice\":\"Allows anyone to update the controllers.\"},\"withdrawMetric(address,uint256,uint8)\":{\"notice\":\"Allows a user to withdraw METRIC locked for a question, after the question is published.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/Vault.sol\":\"Vault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/ClaimEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum CLAIM_STATE {\\n    UNINT,\\n    CLAIMED,\\n    RELEASED,\\n    ANSWERED\\n}\\n\",\"keccak256\":\"0xea71b984aaf40147b5540a4db0f867086eaf9c4c45acd47e4f4e3149b649b1e6\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/QuestionStateEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum STATE {\\n    UNINIT,\\n    VOTING,\\n    PENDING,\\n    PUBLISHED,\\n    DISQUALIFIED,\\n    COMPLETED\\n}\\n\",\"keccak256\":\"0x72cc784cc502713781c3079d528f57b2c0a3f1b21a93b5e8f490c3897be8f65e\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/VaultEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum STAGE {\\n    CREATE_AND_VOTE,\\n    UNVOTE,\\n    CLAIM_AND_ANSWER,\\n    RELEASE_CLAIM,\\n    REVIEW\\n}\\n\\nenum STATUS {\\n    UNINT,\\n    DEPOSITED,\\n    WITHDRAWN,\\n    SLASHED\\n}\\n\",\"keccak256\":\"0x1d96c2cfb960bcdad5245263ab395222413b31c448bed38e1de19ce6f46244c8\",\"license\":\"MIT\"},\"src/contracts/Protocol/EventsAndErrors/VaultEventsAndErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface VaultEventsAndErrors {\\n    ///------------------------------------------------------ ERRORS\\n\\n    /// @notice Throw if user tries to withdraw Metric from a question it does not own.\\n    error NotTheDepositor();\\n\\n    /// @notice Throw if user tries to withdraw Metric without having first deposited.\\n    error NoMetricDeposited();\\n\\n    /// @notice Throw if user tries to lock Metric for a question that has a different state than UNINT.\\n    error QuestionHasInvalidStatus();\\n\\n    /// @notice Throw if user tries to claim Metric for unvoting on a question that is not in the VOTING state.\\n    error QuestionNotInVoting();\\n\\n    /// @notice Throw if user tries to claim Metric for a question that has not been published (yet).\\n    error QuestionNotPublished();\\n\\n    /// @notice Throw if user tries to claim Metric for a question that was not unvoted\\n    error UserHasNotUnvoted();\\n\\n    /// @notice Throw if user tries to withdraw Metric from a question that is not in the review state.\\n    error QuestionNotInReview();\\n\\n    /// @notice Throw if user tries to withdraw Metric from a claim that is not released.\\n    error ClaimNotReleased();\\n\\n    /// @notice Throw if creator of question tries to unvote\\n    error CannotUnvoteOwnQuestion();\\n\\n    /// @notice Throw if the same question is slashed twice.\\n    error AlreadySlashed();\\n\\n    /// @notice Throw if address is equal to address(0).\\n    error InvalidAddress();\\n\\n    /// @notice Throw if user tries to lock METRIC for a stage that does not require locking.\\n    error InvalidStage();\\n\\n    ///------------------------------------------------------ EVENTS\\n\\n    /// @notice Event emitted when Metric is withdrawn.\\n    event Withdraw(address indexed user, uint256 indexed amount);\\n\\n    /// @notice Event emitted when a question is slashed.\\n    event Slashed(address indexed user, uint256 indexed questionId);\\n}\\n\",\"keccak256\":\"0x6912349ffa01d7dbb0e952526af3bf46b4e23f48e7ac985087840379d67dc59e\",\"license\":\"MIT\"},\"src/contracts/Protocol/Structs/AnswerStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {CLAIM_STATE} from \\\"../Enums/ClaimEnum.sol\\\";\\n\\nstruct Answer {\\n    CLAIM_STATE state;\\n    address author;\\n    string answerURL;\\n    uint256 finalGrade;\\n    string scoringMetaDataURI;\\n}\\n\",\"keccak256\":\"0x5c238cb3974d2d8eedb5c107b88c381f6562d1920741494be7270e9f82817b1d\",\"license\":\"MIT\"},\"src/contracts/Protocol/Structs/LockAttributes.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {STATUS} from \\\"../Enums/VaultEnum.sol\\\";\\n\\nstruct lockAttributes {\\n    address user;\\n    uint256 amount;\\n    STATUS status;\\n}\\n\",\"keccak256\":\"0xdd965061f22518fb472eab09ad891109a6fae46da547b612c74bb03d93fe27fc\",\"license\":\"MIT\"},\"src/contracts/Protocol/Structs/QuestionData.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {STATE} from \\\"../Enums/QuestionStateEnum.sol\\\";\\n\\nstruct QuestionData {\\n    uint256 questionId;\\n    address author;\\n    string uri;\\n    uint256 totalVotes;\\n    STATE questionState;\\n}\\n\",\"keccak256\":\"0x7f79334ef9425f69db4c3fd53ddc0c610aa3588cfaf72e89aee9a0cae2db3214\",\"license\":\"MIT\"},\"src/contracts/Protocol/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Interfaces\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IQuestionStateController} from \\\"./interfaces/IQuestionStateController.sol\\\";\\nimport {IClaimController} from \\\"./interfaces/IClaimController.sol\\\";\\nimport {IBountyQuestion} from \\\"./interfaces/IBountyQuestion.sol\\\";\\n\\n// Enums\\nimport {STAGE, STATUS} from \\\"./Enums/VaultEnum.sol\\\";\\nimport {STATE} from \\\"./Enums/QuestionStateEnum.sol\\\";\\nimport {CLAIM_STATE} from \\\"./Enums/ClaimEnum.sol\\\";\\n\\n// Structs\\nimport {lockAttributes} from \\\"./Structs/LockAttributes.sol\\\";\\n\\n// Errors\\nimport {VaultEventsAndErrors} from \\\"./EventsAndErrors/VaultEventsAndErrors.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyCostController.sol\\\";\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\ncontract Vault is Ownable, OnlyCostController, OnlyApi, VaultEventsAndErrors {\\n    IERC20 public metric;\\n    IQuestionStateController public questionStateController;\\n    IClaimController public claimController;\\n    IBountyQuestion public question;\\n\\n    STATUS public status;\\n\\n    /// @notice Address to the MetricsDAO treasury.\\n    address public treasury;\\n    address private constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n\\n    /// @notice Keeps track of the quantity of deposits per user.\\n    mapping(address => uint256[]) public depositsByWithdrawers;\\n\\n    /// @notice Keeps track of the amount of METRIC locked per question\\n    mapping(uint256 => uint256) public lockedMetricByQuestion;\\n\\n    /// @notice Keeps track of total amount in vault for a given user.\\n    mapping(address => uint256) public totalLockedInVaults;\\n\\n    /// @notice Keeps track of the quantity of withdrawals per user.\\n    mapping(uint256 => mapping(STAGE => mapping(address => lockAttributes))) public lockedMetric;\\n\\n    //------------------------------------------------------ CONSTRUCTOR\\n\\n    /**\\n     * @notice Constructor sets the question Metric token, QuestionStateController and the treasury.\\n     * @param treasuryAddress The treasury address.\\n     */\\n    constructor(address treasuryAddress) {\\n        treasury = treasuryAddress;\\n    }\\n\\n    //------------------------------------------------------ FUNCTIONS\\n\\n    /**\\n     * @notice Locks METRIC for creating a question\\n     * @param user The address of the user locking the METRIC\\n     * @param amount The amount of METRIC to lock\\n     * @param questionId The question id'\\n     * @param stage The stage for which METRIC is locked\\n     */\\n    function lockMetric(\\n        address user,\\n        uint256 amount,\\n        uint256 questionId,\\n        STAGE stage\\n    ) external onlyCostController {\\n        // Checks if METRIC is locked for a valid stage.\\n        if (uint8(stage) >= 5) revert InvalidStage();\\n        // Checks if there has not been a deposit yet\\n        if (lockedMetric[questionId][stage][user].status != STATUS.UNINT) revert QuestionHasInvalidStatus();\\n\\n        depositAccounting(user, amount, questionId, stage);\\n    }\\n\\n    function burnMetric(address user, uint256 amount) external onlyCostController {\\n        metric.transferFrom(user, BURN_ADDRESS, amount);\\n    }\\n\\n    /**\\n     * @notice Allows a user to withdraw METRIC locked for a question, after the question is published.\\n     * @param user The address of the user withdrawing the METRIC\\n     * @param questionId The question id\\n     * @param stage The stage for which the user is withdrawing metric from a question.\\n     */\\n    function withdrawMetric(\\n        address user,\\n        uint256 questionId,\\n        STAGE stage\\n    ) external onlyApi {\\n        // Checks if Metric is withdrawn for a valid stage.\\n        if (uint8(stage) > uint8(STAGE.REVIEW)) revert InvalidStage();\\n\\n        if (stage == STAGE.CREATE_AND_VOTE) {\\n            // Checks that the question is published\\n            if (questionStateController.getState(questionId) != STATE.PUBLISHED) revert QuestionNotPublished();\\n\\n            // Accounting & changes\\n            withdrawalAccounting(user, questionId, STAGE.CREATE_AND_VOTE);\\n        } else if (stage == STAGE.UNVOTE) {\\n            // Check that user has a voting index, has not voted and the question state is VOTING.\\n            if (question.getAuthorOfQuestion(questionId) == user) revert CannotUnvoteOwnQuestion();\\n            if (questionStateController.getHasUserVoted(user, questionId) == true) revert UserHasNotUnvoted();\\n            if (questionStateController.getState(questionId) != STATE.VOTING) revert QuestionNotInVoting();\\n\\n            // Accounting & changes\\n            withdrawalAccounting(user, questionId, STAGE.CREATE_AND_VOTE);\\n\\n            lockedMetric[questionId][STAGE.CREATE_AND_VOTE][user].status = STATUS.UNINT;\\n        } else if (stage == STAGE.CLAIM_AND_ANSWER) {\\n            if (questionStateController.getState(questionId) != STATE.COMPLETED) revert QuestionNotInReview();\\n\\n            withdrawalAccounting(user, questionId, STAGE.CLAIM_AND_ANSWER);\\n        } else if (stage == STAGE.RELEASE_CLAIM) {\\n            if (questionStateController.getState(questionId) != STATE.PUBLISHED) revert QuestionNotPublished();\\n            if (claimController.getQuestionClaimState(questionId, user) != CLAIM_STATE.RELEASED) revert ClaimNotReleased();\\n\\n            withdrawalAccounting(user, questionId, STAGE.CLAIM_AND_ANSWER);\\n\\n            lockedMetric[questionId][STAGE.CLAIM_AND_ANSWER][user].status = STATUS.UNINT;\\n        } else {\\n            // if (reviewPeriod == active) revert ReviewPeriodActive();\\n        }\\n    }\\n\\n    function depositAccounting(\\n        address user,\\n        uint256 amount,\\n        uint256 questionId,\\n        STAGE stage\\n    ) internal {\\n        // Accounting & changes\\n        lockedMetric[questionId][stage][user].user = user;\\n        lockedMetric[questionId][stage][user].amount += amount;\\n\\n        lockedMetricByQuestion[questionId] += amount;\\n\\n        lockedMetric[questionId][stage][user].status = STATUS.DEPOSITED;\\n\\n        totalLockedInVaults[user] += amount;\\n        depositsByWithdrawers[user].push(questionId);\\n\\n        // Transfers Metric from the user to the vault.\\n        metric.transferFrom(user, address(this), amount);\\n    }\\n\\n    function withdrawalAccounting(\\n        address user,\\n        uint256 questionId,\\n        STAGE stage\\n    ) internal {\\n        if (user != lockedMetric[questionId][stage][user].user) revert NotTheDepositor();\\n        if (lockedMetric[questionId][stage][user].status != STATUS.DEPOSITED) revert NoMetricDeposited();\\n\\n        uint256 toWithdraw = lockedMetric[questionId][stage][user].amount;\\n\\n        lockedMetric[questionId][stage][user].status = STATUS.WITHDRAWN;\\n        lockedMetric[questionId][stage][user].amount = 0;\\n\\n        lockedMetricByQuestion[questionId] -= toWithdraw;\\n        totalLockedInVaults[user] -= toWithdraw;\\n\\n        // Transfers Metric from the vault to the user.\\n        metric.transfer(user, toWithdraw);\\n\\n        emit Withdraw(user, toWithdraw);\\n    }\\n\\n    /**\\n     * @notice Allows anyone to update the controllers.\\n     */\\n    function updateStateController() public {\\n        questionStateController = IQuestionStateController(questionAPI.getQuestionStateController());\\n    }\\n\\n    function updateClaimController() public {\\n        claimController = IClaimController(questionAPI.getClaimController());\\n    }\\n\\n    function updateBountyQuestion() public {\\n        question = IBountyQuestion(questionAPI.getBountyQuestion());\\n    }\\n\\n    function updateMetric() public {\\n        metric = IERC20(questionAPI.getMetricToken());\\n    }\\n\\n    /**\\n     * @notice Allows onlyOwner to slash a question -- halfing the METRIC locked for the question.\\n     * @param questionId The question id\\n     */\\n    // function slashMetric(uint256 questionId) external onlyOwner {\\n    //     // Check that the question has not been slashed yet.\\n    //     if (lockedMetric[questionId][0].status == STATUS.SLASHED) revert AlreadySlashed();\\n\\n    //     lockedMetric[questionId][0].status = STATUS.SLASHED;\\n\\n    //     // Send half of the Metric to the treasury\\n    //     metric.transfer(treasury, lockedMetricByQuestion[questionId] / 2);\\n\\n    //     // Return the other half of the Metric to the user\\n    //     metric.transfer(lockedMetric[questionId][0].user, lockedMetric[questionId][0].amount / 2);\\n\\n    //     emit Slashed(lockedMetric[questionId][0].user, questionId);\\n    // }\\n\\n    //------------------------------------------------------ VIEW FUNCTIONS\\n\\n    /**\\n     * @notice Gets the questions that a user has created.\\n     * @param user The address of the user.\\n     * @return The questions that the user has created.\\n     */\\n    function getVaultsByWithdrawer(address user) external view returns (uint256[] memory) {\\n        return depositsByWithdrawers[user];\\n    }\\n\\n    /**\\n     * @notice Gets the information about the vault attributes of a question.\\n     * @param questionId The question id.\\n     * @param stage The stage of the question.\\n     * @param user The address of the user.\\n     * @return A struct containing the attributes of the question (withdrawer, amount, status).\\n     */\\n    function getVaultById(\\n        uint256 questionId,\\n        STAGE stage,\\n        address user\\n    ) external view returns (lockAttributes memory) {\\n        return lockedMetric[questionId][stage][user];\\n    }\\n\\n    function getLockedMetricByQuestion(uint256 questionId) public view returns (uint256) {\\n        return lockedMetricByQuestion[questionId];\\n    }\\n\\n    function getUserFromProperties(\\n        uint256 questionId,\\n        STAGE stage,\\n        address user\\n    ) public view returns (address) {\\n        return lockedMetric[questionId][stage][user].user;\\n    }\\n\\n    function getAmountFromProperties(\\n        uint256 questionId,\\n        STAGE stage,\\n        address user\\n    ) public view returns (uint256) {\\n        return lockedMetric[questionId][stage][user].amount;\\n    }\\n\\n    function getLockedPerUser(address _user) public view returns (uint256) {\\n        return totalLockedInVaults[_user];\\n    }\\n\\n    /**\\n     * @notice Gets the total amount of Metric locked in the vault.\\n     * @return The total amount of Metric locked in the vault.\\n     */\\n    function getMetricTotalLockedBalance() external view returns (uint256) {\\n        return metric.balanceOf(address(this));\\n    }\\n\\n    //------------------------------------------------------ OWNER FUNCTIONS\\n\\n    /**\\n     * @notice Allows owner to update the treasury address and questionApi.\\n     */\\n    function setTreasury(address _treasury) public onlyOwner {\\n        treasury = _treasury;\\n    }\\n}\\n\",\"keccak256\":\"0xb31984db1cc42582dc3eae248f39c21ceea75a63eb765b5e9903eb20ce7c6145\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IBountyQuestion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Structs/QuestionData.sol\\\";\\n\\ninterface IBountyQuestion {\\n    function mintQuestion(address author, string calldata uri) external returns (uint256);\\n\\n    function getQuestionData(uint256 questionId) external view returns (QuestionData memory);\\n\\n    function getMostRecentQuestion() external view returns (uint256);\\n\\n    function updateState(uint256 questionId, STATE newState) external;\\n\\n    function updateVotes(uint256 questionId, uint256 newVotes) external;\\n\\n    function getAuthorOfQuestion(uint256 questionId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xdf4b3a9ecaec2769699b45ecab614aef77f6506da168eae2aa11a004756f223b\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IClaimController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Structs/AnswerStruct.sol\\\";\\n\\ninterface IClaimController {\\n    function initializeQuestion(\\n        uint256 questionId,\\n        uint256 claimLimit,\\n        uint256 threshold\\n    ) external;\\n\\n    function claim(address user, uint256 questionId) external;\\n\\n    function releaseClaim(address user, uint256 questionId) external;\\n\\n    function answer(\\n        address user,\\n        uint256 questionId,\\n        string calldata answerURL\\n    ) external;\\n\\n    function getClaimDataForUser(uint256 questionId, address user) external view returns (Answer memory _answer);\\n\\n    function getQuestionClaimState(uint256 questionId, address user) external view returns (CLAIM_STATE claimState);\\n\\n    function getMetricThreshold(uint256 questionId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf6c5c7f201551d0f7387444d393144b025c6a768f921701657f060cd1e5fc684\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IQuestionAPI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IQuestionAPI {\\n    function getMetricToken() external view returns (address);\\n\\n    function getQuestionStateController() external view returns (address);\\n\\n    function getClaimController() external view returns (address);\\n\\n    function getCostController() external view returns (address);\\n\\n    function getBountyQuestion() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbb9a3811a5d0286d26ce4613eec199a6eea5363b27d9421d0bfe23f8be3ddf1b\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IQuestionStateController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Enums/QuestionStateEnum.sol\\\";\\n\\ninterface IQuestionStateController {\\n    function initializeQuestion(uint256 questionId) external;\\n\\n    function initializeChallenge(uint256 questionId) external;\\n\\n    function voteFor(address _user, uint256 questionId) external;\\n\\n    function unvoteFor(address _user, uint256 questionId) external;\\n\\n    function publishFromQuestion(uint256 question) external;\\n\\n    function publishFromChallenge(uint256 question) external;\\n\\n    function getState(uint256 quesitonId) external view returns (STATE currentState);\\n\\n    function getHasUserVoted(address user, uint256 questionId) external view returns (bool);\\n\\n    function setDisqualifiedState(uint256 questionId) external;\\n}\\n\",\"keccak256\":\"0x54d3bed946dbe996d5eb27568c710a7d76ef65ca812574c2a2b2588f9f70aee2\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyCostController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IQuestionAPI} from \\\"../interfaces/IQuestionAPI.sol\\\";\\n\\ncontract OnlyCostController is Ownable {\\n    address public costController;\\n    IQuestionAPI public questionAPI;\\n\\n    // ------------------------------- Setter\\n    function updateCostController() public {\\n        costController = questionAPI.getCostController();\\n    }\\n\\n    function setQuestionApiCC(address _questionAPI) public onlyOwner {\\n        questionAPI = IQuestionAPI(_questionAPI);\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyCostController() {\\n        if (_msgSender() != costController) revert NotTheCostController();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheCostController();\\n}\\n\",\"keccak256\":\"0x1b1c691eac4b8bbeea04fa693f35a67a18be462315eaffe345a33e3a11d72389\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620037ff380380620037ff8339818101604052810190620000379190620001d5565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000207565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200019d8262000170565b9050919050565b620001af8162000190565b8114620001bb57600080fd5b50565b600081519050620001cf81620001a4565b92915050565b600060208284031215620001ee57620001ed6200016b565b5b6000620001fe84828501620001be565b91505092915050565b6135e880620002176000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c806377f72a011161011a578063b2cb2d6f116100ad578063cd6869c41161007c578063cd6869c4146105bb578063daddff33146105d7578063f0f44260146105f5578063f2fde38b14610611578063fa992f3f1461062d57610206565b8063b2cb2d6f14610547578063b548fcae14610563578063c0875dfd14610581578063cb5519761461059d57610206565b80638dd86bc1116100e95780638dd86bc1146104d3578063942e8b13146104dd57806396cec7f0146104e7578063aa9ce2e61461051757610206565b806377f72a01146104375780638213d50b146104675780638ce58682146104975780638da5cb5b146104b557610206565b8063434c5c251161019d57806361d027b31161016c57806361d027b3146103a55780636b1c5cd2146103c35780636baef497146103df578063715018a6146103fd57806371546b811461040757610206565b8063434c5c251461031d57806345256335146103395780635ab0161e146103435780635adbf5ff1461037557610206565b80633d5a71d5116101d95780633d5a71d5146102815780633fad9ae01461029f578063434047d9146102bd5780634341bde2146102ed57610206565b8063063e9e3a1461020b57806311de9a6c1461023b578063200d2ed2146102595780633281226514610277575b600080fd5b61022560048036038101906102209190612bc8565b610637565b6040516102329190612c04565b60405180910390f35b61024361064f565b6040516102509190612c9e565b60405180910390f35b610261610675565b60405161026e9190612d30565b60405180910390f35b61027f610688565b005b61028961075b565b6040516102969190612d6c565b60405180910390f35b6102a7610781565b6040516102b49190612da8565b60405180910390f35b6102d760048036038101906102d29190612bc8565b6107a7565b6040516102e49190612c04565b60405180910390f35b61030760048036038101906103029190612e26565b6107c4565b6040516103149190612ee8565b60405180910390f35b61033760048036038101906103329190612f03565b610900565b005b6103416109c0565b005b61035d60048036038101906103589190612e26565b610a93565b60405161036c93929190612f3f565b60405180910390f35b61038f600480360381019061038a9190612f03565b610b04565b60405161039c9190612c04565b60405180910390f35b6103ad610b1c565b6040516103ba9190612f76565b60405180910390f35b6103dd60048036038101906103d89190612f91565b610b42565b005b6103e761154d565b6040516103f49190612f76565b60405180910390f35b610405611573565b005b610421600480360381019061041c9190612f03565b6115fb565b60405161042e9190613093565b60405180910390f35b610451600480360381019061044c9190612f03565b611692565b60405161045e9190612c04565b60405180910390f35b610481600480360381019061047c9190612e26565b6116db565b60405161048e9190612f76565b60405180910390f35b61049f61178f565b6040516104ac9190612c04565b60405180910390f35b6104bd611832565b6040516104ca9190612f76565b60405180910390f35b6104db61185b565b005b6104e561192e565b005b61050160048036038101906104fc9190612e26565b611a01565b60405161050e9190612c04565b60405180910390f35b610531600480360381019061052c91906130b5565b611a95565b60405161053e9190612c04565b60405180910390f35b610561600480360381019061055c91906130f5565b611ac6565b005b61056b611ca8565b6040516105789190612f76565b60405180910390f35b61059b60048036038101906105969190612f03565b611cce565b005b6105a5611d8e565b6040516105b2919061317d565b60405180910390f35b6105d560048036038101906105d091906130b5565b611db4565b005b6105df611eeb565b6040516105ec91906131b9565b60405180910390f35b61060f600480360381019061060a9190612f03565b611f11565b005b61062b60048036038101906106269190612f03565b611fd1565b005b6106356120c8565b005b600a6020528060005260406000206000915090505481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760149054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ceadfd526040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071991906131e9565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600a6000838152602001908152602001600020549050919050565b6107cc612b44565b600c600085815260200190815260200160002060008460048111156107f4576107f3612cb9565b5b600481111561080657610805612cb9565b5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff1660038111156108e1576108e0612cb9565b5b60038111156108f3576108f2612cb9565b5b8152505090509392505050565b61090861219b565b73ffffffffffffffffffffffffffffffffffffffff16610926611832565b73ffffffffffffffffffffffffffffffffffffffff161461097c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097390613273565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166367c48e056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5191906131e9565b600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600c60205282600052604060002060205281600052604060002060205280600052604060002060009250925050508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16905083565b600b6020528060005260406000206000915090505481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b8361219b565b73ffffffffffffffffffffffffffffffffffffffff1614610bd0576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600480811115610be357610be2612cb9565b5b60ff16816004811115610bf957610bf8612cb9565b5b60ff161115610c34576040517fe82a532900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006004811115610c4857610c47612cb9565b5b816004811115610c5b57610c5a612cb9565b5b03610d6a5760036005811115610c7457610c73612cb9565b5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28846040518263ffffffff1660e01b8152600401610ccf9190612c04565b602060405180830381865afa158015610cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1091906132b8565b6005811115610d2257610d21612cb9565b5b14610d59576040517f9aded0d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d65838360006121a3565b611548565b60016004811115610d7e57610d7d612cb9565b5b816004811115610d9157610d90612cb9565b5b0361112c578273ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663710bc3cd846040518263ffffffff1660e01b8152600401610e089190612c04565b602060405180830381865afa158015610e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4991906131e9565b73ffffffffffffffffffffffffffffffffffffffff1603610e96576040517fb75800ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e0a7e6785856040518363ffffffff1660e01b8152600401610ef79291906132e5565b602060405180830381865afa158015610f14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f389190613346565b151503610f71576040517fad0aedd200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016005811115610f8557610f84612cb9565b5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28846040518263ffffffff1660e01b8152600401610fe09190612c04565b602060405180830381865afa158015610ffd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102191906132b8565b600581111561103357611032612cb9565b5b1461106a576040517ffbddb1d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611076838360006121a3565b6000600c600084815260200190815260200160002060008060048111156110a05761109f612cb9565b5b60048111156110b2576110b1612cb9565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff0219169083600381111561112257611121612cb9565b5b0217905550611547565b600260048111156111405761113f612cb9565b5b81600481111561115357611152612cb9565b5b036112615760058081111561116b5761116a612cb9565b5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28846040518263ffffffff1660e01b81526004016111c69190612c04565b602060405180830381865afa1580156111e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120791906132b8565b600581111561121957611218612cb9565b5b14611250576040517feb16fc3e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61125c838360026121a3565b611546565b6003600481111561127557611274612cb9565b5b81600481111561128857611287612cb9565b5b0361154457600360058111156112a1576112a0612cb9565b5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28846040518263ffffffff1660e01b81526004016112fc9190612c04565b602060405180830381865afa158015611319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133d91906132b8565b600581111561134f5761134e612cb9565b5b14611386576040517f9aded0d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600381111561139a57611399612cb9565b5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b92e274a84866040518363ffffffff1660e01b81526004016113f7929190613373565b602060405180830381865afa158015611414573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143891906133c1565b600381111561144a57611449612cb9565b5b14611481576040517f3bc914d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61148d838360026121a3565b6000600c60008481526020019081526020016000206000600260048111156114b8576114b7612cb9565b5b60048111156114ca576114c9612cb9565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff0219169083600381111561153a57611539612cb9565b5b0217905550611545565b5b5b5b5b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61157b61219b565b73ffffffffffffffffffffffffffffffffffffffff16611599611832565b73ffffffffffffffffffffffffffffffffffffffff16146115ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e690613273565b60405180910390fd5b6115f960006126da565b565b6060600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561168657602002820191906000526020600020905b815481526020019060010190808311611672575b50505050509050919050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600c6000858152602001908152602001600020600084600481111561170557611704612cb9565b5b600481111561171757611716612cb9565b5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690509392505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117ec9190612f76565b602060405180830381865afa158015611809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182d9190613403565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad81ca786040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ec91906131e9565b600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a8e2a38b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561199b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bf91906131e9565b600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600c60008581526020019081526020016000206000846004811115611a2b57611a2a612cb9565b5b6004811115611a3d57611a3c612cb9565b5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490509392505050565b60096020528160005260406000208181548110611ab157600080fd5b90600052602060002001600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611b0761219b565b73ffffffffffffffffffffffffffffffffffffffff1614611b54576040517f1ac379d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6005816004811115611b6957611b68612cb9565b5b60ff1610611ba3576040517fe82a532900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003811115611bb757611bb6612cb9565b5b600c60008481526020019081526020016000206000836004811115611bdf57611bde612cb9565b5b6004811115611bf157611bf0612cb9565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166003811115611c5f57611c5e612cb9565b5b14611c96576040517fbe9ad66900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611ca28484848461279e565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611cd661219b565b73ffffffffffffffffffffffffffffffffffffffff16611cf4611832565b73ffffffffffffffffffffffffffffffffffffffff1614611d4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4190613273565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611df561219b565b73ffffffffffffffffffffffffffffffffffffffff1614611e42576040517f1ac379d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8361dead846040518463ffffffff1660e01b8152600401611ea393929190613430565b6020604051808303816000875af1158015611ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee69190613346565b505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611f1961219b565b73ffffffffffffffffffffffffffffffffffffffff16611f37611832565b73ffffffffffffffffffffffffffffffffffffffff1614611f8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8490613273565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611fd961219b565b73ffffffffffffffffffffffffffffffffffffffff16611ff7611832565b73ffffffffffffffffffffffffffffffffffffffff161461204d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204490613273565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036120bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b3906134d9565b60405180910390fd5b6120c5816126da565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dde027b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612135573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215991906131e9565b600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600033905090565b600c600083815260200190815260200160002060008260048111156121cb576121ca612cb9565b5b60048111156121dd576121dc612cb9565b5b815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146122b0576040517f7ff62b7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160038111156122c4576122c3612cb9565b5b600c600084815260200190815260200160002060008360048111156122ec576122eb612cb9565b5b60048111156122fe576122fd612cb9565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16600381111561236c5761236b612cb9565b5b146123a3576040517f7109e46600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600c600084815260200190815260200160002060008360048111156123cd576123cc612cb9565b5b60048111156123df576123de612cb9565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506002600c6000858152602001908152602001600020600084600481111561245a57612459612cb9565b5b600481111561246c5761246b612cb9565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908360038111156124dc576124db612cb9565b5b02179055506000600c6000858152602001908152602001600020600084600481111561250b5761250a612cb9565b5b600481111561251d5761251c612cb9565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555080600a600085815260200190815260200160002060008282546125929190613528565b9250508190555080600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125e89190613528565b92505081905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b815260040161264c9291906132e5565b6020604051808303816000875af115801561266b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268f9190613346565b50808473ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436460405160405180910390a350505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b83600c600084815260200190815260200160002060008360048111156127c7576127c6612cb9565b5b60048111156127d9576127d8612cb9565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600c6000848152602001908152602001600020600083600481111561288e5761288d612cb9565b5b60048111156128a05761289f612cb9565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546128fd919061355c565b9250508190555082600a60008481526020019081526020016000206000828254612927919061355c565b925050819055506001600c6000848152602001908152602001600020600083600481111561295857612957612cb9565b5b600481111561296a57612969612cb9565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908360038111156129da576129d9612cb9565b5b021790555082600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a2e919061355c565b92505081905550600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8530866040518463ffffffff1660e01b8152600401612afa93929190613430565b6020604051808303816000875af1158015612b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3d9190613346565b5050505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160006003811115612b8757612b86612cb9565b5b81525090565b600080fd5b6000819050919050565b612ba581612b92565b8114612bb057600080fd5b50565b600081359050612bc281612b9c565b92915050565b600060208284031215612bde57612bdd612b8d565b5b6000612bec84828501612bb3565b91505092915050565b612bfe81612b92565b82525050565b6000602082019050612c196000830184612bf5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612c64612c5f612c5a84612c1f565b612c3f565b612c1f565b9050919050565b6000612c7682612c49565b9050919050565b6000612c8882612c6b565b9050919050565b612c9881612c7d565b82525050565b6000602082019050612cb36000830184612c8f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110612cf957612cf8612cb9565b5b50565b6000819050612d0a82612ce8565b919050565b6000612d1a82612cfc565b9050919050565b612d2a81612d0f565b82525050565b6000602082019050612d456000830184612d21565b92915050565b6000612d5682612c6b565b9050919050565b612d6681612d4b565b82525050565b6000602082019050612d816000830184612d5d565b92915050565b6000612d9282612c6b565b9050919050565b612da281612d87565b82525050565b6000602082019050612dbd6000830184612d99565b92915050565b60058110612dd057600080fd5b50565b600081359050612de281612dc3565b92915050565b6000612df382612c1f565b9050919050565b612e0381612de8565b8114612e0e57600080fd5b50565b600081359050612e2081612dfa565b92915050565b600080600060608486031215612e3f57612e3e612b8d565b5b6000612e4d86828701612bb3565b9350506020612e5e86828701612dd3565b9250506040612e6f86828701612e11565b9150509250925092565b612e8281612de8565b82525050565b612e9181612b92565b82525050565b612ea081612d0f565b82525050565b606082016000820151612ebc6000850182612e79565b506020820151612ecf6020850182612e88565b506040820151612ee26040850182612e97565b50505050565b6000606082019050612efd6000830184612ea6565b92915050565b600060208284031215612f1957612f18612b8d565b5b6000612f2784828501612e11565b91505092915050565b612f3981612de8565b82525050565b6000606082019050612f546000830186612f30565b612f616020830185612bf5565b612f6e6040830184612d21565b949350505050565b6000602082019050612f8b6000830184612f30565b92915050565b600080600060608486031215612faa57612fa9612b8d565b5b6000612fb886828701612e11565b9350506020612fc986828701612bb3565b9250506040612fda86828701612dd3565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061301c8383612e88565b60208301905092915050565b6000602082019050919050565b600061304082612fe4565b61304a8185612fef565b935061305583613000565b8060005b8381101561308657815161306d8882613010565b975061307883613028565b925050600181019050613059565b5085935050505092915050565b600060208201905081810360008301526130ad8184613035565b905092915050565b600080604083850312156130cc576130cb612b8d565b5b60006130da85828601612e11565b92505060206130eb85828601612bb3565b9150509250929050565b6000806000806080858703121561310f5761310e612b8d565b5b600061311d87828801612e11565b945050602061312e87828801612bb3565b935050604061313f87828801612bb3565b925050606061315087828801612dd3565b91505092959194509250565b600061316782612c6b565b9050919050565b6131778161315c565b82525050565b6000602082019050613192600083018461316e565b92915050565b60006131a382612c6b565b9050919050565b6131b381613198565b82525050565b60006020820190506131ce60008301846131aa565b92915050565b6000815190506131e381612dfa565b92915050565b6000602082840312156131ff576131fe612b8d565b5b600061320d848285016131d4565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061325d602083613216565b915061326882613227565b602082019050919050565b6000602082019050818103600083015261328c81613250565b9050919050565b600681106132a057600080fd5b50565b6000815190506132b281613293565b92915050565b6000602082840312156132ce576132cd612b8d565b5b60006132dc848285016132a3565b91505092915050565b60006040820190506132fa6000830185612f30565b6133076020830184612bf5565b9392505050565b60008115159050919050565b6133238161330e565b811461332e57600080fd5b50565b6000815190506133408161331a565b92915050565b60006020828403121561335c5761335b612b8d565b5b600061336a84828501613331565b91505092915050565b60006040820190506133886000830185612bf5565b6133956020830184612f30565b9392505050565b600481106133a957600080fd5b50565b6000815190506133bb8161339c565b92915050565b6000602082840312156133d7576133d6612b8d565b5b60006133e5848285016133ac565b91505092915050565b6000815190506133fd81612b9c565b92915050565b60006020828403121561341957613418612b8d565b5b6000613427848285016133ee565b91505092915050565b60006060820190506134456000830186612f30565b6134526020830185612f30565b61345f6040830184612bf5565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006134c3602683613216565b91506134ce82613467565b604082019050919050565b600060208201905081810360008301526134f2816134b6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061353382612b92565b915061353e83612b92565b925082821015613551576135506134f9565b5b828203905092915050565b600061356782612b92565b915061357283612b92565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156135a7576135a66134f9565b5b82820190509291505056fea2646970667358221220372e832f465fc9badb867dabc251b9b131cdca922ecbf06c9ab726ff69212d2f64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c806377f72a011161011a578063b2cb2d6f116100ad578063cd6869c41161007c578063cd6869c4146105bb578063daddff33146105d7578063f0f44260146105f5578063f2fde38b14610611578063fa992f3f1461062d57610206565b8063b2cb2d6f14610547578063b548fcae14610563578063c0875dfd14610581578063cb5519761461059d57610206565b80638dd86bc1116100e95780638dd86bc1146104d3578063942e8b13146104dd57806396cec7f0146104e7578063aa9ce2e61461051757610206565b806377f72a01146104375780638213d50b146104675780638ce58682146104975780638da5cb5b146104b557610206565b8063434c5c251161019d57806361d027b31161016c57806361d027b3146103a55780636b1c5cd2146103c35780636baef497146103df578063715018a6146103fd57806371546b811461040757610206565b8063434c5c251461031d57806345256335146103395780635ab0161e146103435780635adbf5ff1461037557610206565b80633d5a71d5116101d95780633d5a71d5146102815780633fad9ae01461029f578063434047d9146102bd5780634341bde2146102ed57610206565b8063063e9e3a1461020b57806311de9a6c1461023b578063200d2ed2146102595780633281226514610277575b600080fd5b61022560048036038101906102209190612bc8565b610637565b6040516102329190612c04565b60405180910390f35b61024361064f565b6040516102509190612c9e565b60405180910390f35b610261610675565b60405161026e9190612d30565b60405180910390f35b61027f610688565b005b61028961075b565b6040516102969190612d6c565b60405180910390f35b6102a7610781565b6040516102b49190612da8565b60405180910390f35b6102d760048036038101906102d29190612bc8565b6107a7565b6040516102e49190612c04565b60405180910390f35b61030760048036038101906103029190612e26565b6107c4565b6040516103149190612ee8565b60405180910390f35b61033760048036038101906103329190612f03565b610900565b005b6103416109c0565b005b61035d60048036038101906103589190612e26565b610a93565b60405161036c93929190612f3f565b60405180910390f35b61038f600480360381019061038a9190612f03565b610b04565b60405161039c9190612c04565b60405180910390f35b6103ad610b1c565b6040516103ba9190612f76565b60405180910390f35b6103dd60048036038101906103d89190612f91565b610b42565b005b6103e761154d565b6040516103f49190612f76565b60405180910390f35b610405611573565b005b610421600480360381019061041c9190612f03565b6115fb565b60405161042e9190613093565b60405180910390f35b610451600480360381019061044c9190612f03565b611692565b60405161045e9190612c04565b60405180910390f35b610481600480360381019061047c9190612e26565b6116db565b60405161048e9190612f76565b60405180910390f35b61049f61178f565b6040516104ac9190612c04565b60405180910390f35b6104bd611832565b6040516104ca9190612f76565b60405180910390f35b6104db61185b565b005b6104e561192e565b005b61050160048036038101906104fc9190612e26565b611a01565b60405161050e9190612c04565b60405180910390f35b610531600480360381019061052c91906130b5565b611a95565b60405161053e9190612c04565b60405180910390f35b610561600480360381019061055c91906130f5565b611ac6565b005b61056b611ca8565b6040516105789190612f76565b60405180910390f35b61059b60048036038101906105969190612f03565b611cce565b005b6105a5611d8e565b6040516105b2919061317d565b60405180910390f35b6105d560048036038101906105d091906130b5565b611db4565b005b6105df611eeb565b6040516105ec91906131b9565b60405180910390f35b61060f600480360381019061060a9190612f03565b611f11565b005b61062b60048036038101906106269190612f03565b611fd1565b005b6106356120c8565b005b600a6020528060005260406000206000915090505481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760149054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ceadfd526040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071991906131e9565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600a6000838152602001908152602001600020549050919050565b6107cc612b44565b600c600085815260200190815260200160002060008460048111156107f4576107f3612cb9565b5b600481111561080657610805612cb9565b5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff1660038111156108e1576108e0612cb9565b5b60038111156108f3576108f2612cb9565b5b8152505090509392505050565b61090861219b565b73ffffffffffffffffffffffffffffffffffffffff16610926611832565b73ffffffffffffffffffffffffffffffffffffffff161461097c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097390613273565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166367c48e056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5191906131e9565b600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600c60205282600052604060002060205281600052604060002060205280600052604060002060009250925050508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16905083565b600b6020528060005260406000206000915090505481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b8361219b565b73ffffffffffffffffffffffffffffffffffffffff1614610bd0576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600480811115610be357610be2612cb9565b5b60ff16816004811115610bf957610bf8612cb9565b5b60ff161115610c34576040517fe82a532900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006004811115610c4857610c47612cb9565b5b816004811115610c5b57610c5a612cb9565b5b03610d6a5760036005811115610c7457610c73612cb9565b5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28846040518263ffffffff1660e01b8152600401610ccf9190612c04565b602060405180830381865afa158015610cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1091906132b8565b6005811115610d2257610d21612cb9565b5b14610d59576040517f9aded0d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d65838360006121a3565b611548565b60016004811115610d7e57610d7d612cb9565b5b816004811115610d9157610d90612cb9565b5b0361112c578273ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663710bc3cd846040518263ffffffff1660e01b8152600401610e089190612c04565b602060405180830381865afa158015610e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4991906131e9565b73ffffffffffffffffffffffffffffffffffffffff1603610e96576040517fb75800ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e0a7e6785856040518363ffffffff1660e01b8152600401610ef79291906132e5565b602060405180830381865afa158015610f14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f389190613346565b151503610f71576040517fad0aedd200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016005811115610f8557610f84612cb9565b5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28846040518263ffffffff1660e01b8152600401610fe09190612c04565b602060405180830381865afa158015610ffd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102191906132b8565b600581111561103357611032612cb9565b5b1461106a576040517ffbddb1d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611076838360006121a3565b6000600c600084815260200190815260200160002060008060048111156110a05761109f612cb9565b5b60048111156110b2576110b1612cb9565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff0219169083600381111561112257611121612cb9565b5b0217905550611547565b600260048111156111405761113f612cb9565b5b81600481111561115357611152612cb9565b5b036112615760058081111561116b5761116a612cb9565b5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28846040518263ffffffff1660e01b81526004016111c69190612c04565b602060405180830381865afa1580156111e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120791906132b8565b600581111561121957611218612cb9565b5b14611250576040517feb16fc3e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61125c838360026121a3565b611546565b6003600481111561127557611274612cb9565b5b81600481111561128857611287612cb9565b5b0361154457600360058111156112a1576112a0612cb9565b5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28846040518263ffffffff1660e01b81526004016112fc9190612c04565b602060405180830381865afa158015611319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133d91906132b8565b600581111561134f5761134e612cb9565b5b14611386576040517f9aded0d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600381111561139a57611399612cb9565b5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b92e274a84866040518363ffffffff1660e01b81526004016113f7929190613373565b602060405180830381865afa158015611414573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143891906133c1565b600381111561144a57611449612cb9565b5b14611481576040517f3bc914d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61148d838360026121a3565b6000600c60008481526020019081526020016000206000600260048111156114b8576114b7612cb9565b5b60048111156114ca576114c9612cb9565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff0219169083600381111561153a57611539612cb9565b5b0217905550611545565b5b5b5b5b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61157b61219b565b73ffffffffffffffffffffffffffffffffffffffff16611599611832565b73ffffffffffffffffffffffffffffffffffffffff16146115ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e690613273565b60405180910390fd5b6115f960006126da565b565b6060600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561168657602002820191906000526020600020905b815481526020019060010190808311611672575b50505050509050919050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600c6000858152602001908152602001600020600084600481111561170557611704612cb9565b5b600481111561171757611716612cb9565b5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690509392505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117ec9190612f76565b602060405180830381865afa158015611809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182d9190613403565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad81ca786040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ec91906131e9565b600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a8e2a38b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561199b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bf91906131e9565b600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600c60008581526020019081526020016000206000846004811115611a2b57611a2a612cb9565b5b6004811115611a3d57611a3c612cb9565b5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490509392505050565b60096020528160005260406000208181548110611ab157600080fd5b90600052602060002001600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611b0761219b565b73ffffffffffffffffffffffffffffffffffffffff1614611b54576040517f1ac379d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6005816004811115611b6957611b68612cb9565b5b60ff1610611ba3576040517fe82a532900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003811115611bb757611bb6612cb9565b5b600c60008481526020019081526020016000206000836004811115611bdf57611bde612cb9565b5b6004811115611bf157611bf0612cb9565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166003811115611c5f57611c5e612cb9565b5b14611c96576040517fbe9ad66900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611ca28484848461279e565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611cd661219b565b73ffffffffffffffffffffffffffffffffffffffff16611cf4611832565b73ffffffffffffffffffffffffffffffffffffffff1614611d4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4190613273565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611df561219b565b73ffffffffffffffffffffffffffffffffffffffff1614611e42576040517f1ac379d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8361dead846040518463ffffffff1660e01b8152600401611ea393929190613430565b6020604051808303816000875af1158015611ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee69190613346565b505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611f1961219b565b73ffffffffffffffffffffffffffffffffffffffff16611f37611832565b73ffffffffffffffffffffffffffffffffffffffff1614611f8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8490613273565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611fd961219b565b73ffffffffffffffffffffffffffffffffffffffff16611ff7611832565b73ffffffffffffffffffffffffffffffffffffffff161461204d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204490613273565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036120bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b3906134d9565b60405180910390fd5b6120c5816126da565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dde027b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612135573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215991906131e9565b600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600033905090565b600c600083815260200190815260200160002060008260048111156121cb576121ca612cb9565b5b60048111156121dd576121dc612cb9565b5b815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146122b0576040517f7ff62b7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160038111156122c4576122c3612cb9565b5b600c600084815260200190815260200160002060008360048111156122ec576122eb612cb9565b5b60048111156122fe576122fd612cb9565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16600381111561236c5761236b612cb9565b5b146123a3576040517f7109e46600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600c600084815260200190815260200160002060008360048111156123cd576123cc612cb9565b5b60048111156123df576123de612cb9565b5b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506002600c6000858152602001908152602001600020600084600481111561245a57612459612cb9565b5b600481111561246c5761246b612cb9565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908360038111156124dc576124db612cb9565b5b02179055506000600c6000858152602001908152602001600020600084600481111561250b5761250a612cb9565b5b600481111561251d5761251c612cb9565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555080600a600085815260200190815260200160002060008282546125929190613528565b9250508190555080600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125e89190613528565b92505081905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b815260040161264c9291906132e5565b6020604051808303816000875af115801561266b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268f9190613346565b50808473ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436460405160405180910390a350505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b83600c600084815260200190815260200160002060008360048111156127c7576127c6612cb9565b5b60048111156127d9576127d8612cb9565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600c6000848152602001908152602001600020600083600481111561288e5761288d612cb9565b5b60048111156128a05761289f612cb9565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546128fd919061355c565b9250508190555082600a60008481526020019081526020016000206000828254612927919061355c565b925050819055506001600c6000848152602001908152602001600020600083600481111561295857612957612cb9565b5b600481111561296a57612969612cb9565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908360038111156129da576129d9612cb9565b5b021790555082600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a2e919061355c565b92505081905550600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8530866040518463ffffffff1660e01b8152600401612afa93929190613430565b6020604051808303816000875af1158015612b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3d9190613346565b5050505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160006003811115612b8757612b86612cb9565b5b81525090565b600080fd5b6000819050919050565b612ba581612b92565b8114612bb057600080fd5b50565b600081359050612bc281612b9c565b92915050565b600060208284031215612bde57612bdd612b8d565b5b6000612bec84828501612bb3565b91505092915050565b612bfe81612b92565b82525050565b6000602082019050612c196000830184612bf5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612c64612c5f612c5a84612c1f565b612c3f565b612c1f565b9050919050565b6000612c7682612c49565b9050919050565b6000612c8882612c6b565b9050919050565b612c9881612c7d565b82525050565b6000602082019050612cb36000830184612c8f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110612cf957612cf8612cb9565b5b50565b6000819050612d0a82612ce8565b919050565b6000612d1a82612cfc565b9050919050565b612d2a81612d0f565b82525050565b6000602082019050612d456000830184612d21565b92915050565b6000612d5682612c6b565b9050919050565b612d6681612d4b565b82525050565b6000602082019050612d816000830184612d5d565b92915050565b6000612d9282612c6b565b9050919050565b612da281612d87565b82525050565b6000602082019050612dbd6000830184612d99565b92915050565b60058110612dd057600080fd5b50565b600081359050612de281612dc3565b92915050565b6000612df382612c1f565b9050919050565b612e0381612de8565b8114612e0e57600080fd5b50565b600081359050612e2081612dfa565b92915050565b600080600060608486031215612e3f57612e3e612b8d565b5b6000612e4d86828701612bb3565b9350506020612e5e86828701612dd3565b9250506040612e6f86828701612e11565b9150509250925092565b612e8281612de8565b82525050565b612e9181612b92565b82525050565b612ea081612d0f565b82525050565b606082016000820151612ebc6000850182612e79565b506020820151612ecf6020850182612e88565b506040820151612ee26040850182612e97565b50505050565b6000606082019050612efd6000830184612ea6565b92915050565b600060208284031215612f1957612f18612b8d565b5b6000612f2784828501612e11565b91505092915050565b612f3981612de8565b82525050565b6000606082019050612f546000830186612f30565b612f616020830185612bf5565b612f6e6040830184612d21565b949350505050565b6000602082019050612f8b6000830184612f30565b92915050565b600080600060608486031215612faa57612fa9612b8d565b5b6000612fb886828701612e11565b9350506020612fc986828701612bb3565b9250506040612fda86828701612dd3565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061301c8383612e88565b60208301905092915050565b6000602082019050919050565b600061304082612fe4565b61304a8185612fef565b935061305583613000565b8060005b8381101561308657815161306d8882613010565b975061307883613028565b925050600181019050613059565b5085935050505092915050565b600060208201905081810360008301526130ad8184613035565b905092915050565b600080604083850312156130cc576130cb612b8d565b5b60006130da85828601612e11565b92505060206130eb85828601612bb3565b9150509250929050565b6000806000806080858703121561310f5761310e612b8d565b5b600061311d87828801612e11565b945050602061312e87828801612bb3565b935050604061313f87828801612bb3565b925050606061315087828801612dd3565b91505092959194509250565b600061316782612c6b565b9050919050565b6131778161315c565b82525050565b6000602082019050613192600083018461316e565b92915050565b60006131a382612c6b565b9050919050565b6131b381613198565b82525050565b60006020820190506131ce60008301846131aa565b92915050565b6000815190506131e381612dfa565b92915050565b6000602082840312156131ff576131fe612b8d565b5b600061320d848285016131d4565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061325d602083613216565b915061326882613227565b602082019050919050565b6000602082019050818103600083015261328c81613250565b9050919050565b600681106132a057600080fd5b50565b6000815190506132b281613293565b92915050565b6000602082840312156132ce576132cd612b8d565b5b60006132dc848285016132a3565b91505092915050565b60006040820190506132fa6000830185612f30565b6133076020830184612bf5565b9392505050565b60008115159050919050565b6133238161330e565b811461332e57600080fd5b50565b6000815190506133408161331a565b92915050565b60006020828403121561335c5761335b612b8d565b5b600061336a84828501613331565b91505092915050565b60006040820190506133886000830185612bf5565b6133956020830184612f30565b9392505050565b600481106133a957600080fd5b50565b6000815190506133bb8161339c565b92915050565b6000602082840312156133d7576133d6612b8d565b5b60006133e5848285016133ac565b91505092915050565b6000815190506133fd81612b9c565b92915050565b60006020828403121561341957613418612b8d565b5b6000613427848285016133ee565b91505092915050565b60006060820190506134456000830186612f30565b6134526020830185612f30565b61345f6040830184612bf5565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006134c3602683613216565b91506134ce82613467565b604082019050919050565b600060208201905081810360008301526134f2816134b6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061353382612b92565b915061353e83612b92565b925082821015613551576135506134f9565b5b828203905092915050565b600061356782612b92565b915061357283612b92565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156135a7576135a66134f9565b5b82820190509291505056fea2646970667358221220372e832f465fc9badb867dabc251b9b131cdca922ecbf06c9ab726ff69212d2f64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "treasuryAddress": "The treasury address."
        }
      },
      "getMetricTotalLockedBalance()": {
        "returns": {
          "_0": "The total amount of Metric locked in the vault."
        }
      },
      "getVaultById(uint256,uint8,address)": {
        "params": {
          "questionId": "The question id.",
          "stage": "The stage of the question.",
          "user": "The address of the user."
        },
        "returns": {
          "_0": "A struct containing the attributes of the question (withdrawer, amount, status)."
        }
      },
      "getVaultsByWithdrawer(address)": {
        "params": {
          "user": "The address of the user."
        },
        "returns": {
          "_0": "The questions that the user has created."
        }
      },
      "lockMetric(address,uint256,uint256,uint8)": {
        "params": {
          "amount": "The amount of METRIC to lock",
          "questionId": "The question id'",
          "stage": "The stage for which METRIC is locked",
          "user": "The address of the user locking the METRIC"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setQuestionApi(address)": {
        "params": {
          "_newApi": "The new address of the question API."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawMetric(address,uint256,uint8)": {
        "params": {
          "questionId": "The question id",
          "stage": "The stage for which the user is withdrawing metric from a question.",
          "user": "The address of the user withdrawing the METRIC"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AlreadySlashed()": [
        {
          "notice": "Throw if the same question is slashed twice."
        }
      ],
      "CannotUnvoteOwnQuestion()": [
        {
          "notice": "Throw if creator of question tries to unvote"
        }
      ],
      "ClaimNotReleased()": [
        {
          "notice": "Throw if user tries to withdraw Metric from a claim that is not released."
        }
      ],
      "InvalidAddress()": [
        {
          "notice": "Throw if address is equal to address(0)."
        }
      ],
      "InvalidStage()": [
        {
          "notice": "Throw if user tries to lock METRIC for a stage that does not require locking."
        }
      ],
      "NoMetricDeposited()": [
        {
          "notice": "Throw if user tries to withdraw Metric without having first deposited."
        }
      ],
      "NotTheDepositor()": [
        {
          "notice": "Throw if user tries to withdraw Metric from a question it does not own."
        }
      ],
      "QuestionHasInvalidStatus()": [
        {
          "notice": "Throw if user tries to lock Metric for a question that has a different state than UNINT."
        }
      ],
      "QuestionNotInReview()": [
        {
          "notice": "Throw if user tries to withdraw Metric from a question that is not in the review state."
        }
      ],
      "QuestionNotInVoting()": [
        {
          "notice": "Throw if user tries to claim Metric for unvoting on a question that is not in the VOTING state."
        }
      ],
      "QuestionNotPublished()": [
        {
          "notice": "Throw if user tries to claim Metric for a question that has not been published (yet)."
        }
      ],
      "UserHasNotUnvoted()": [
        {
          "notice": "Throw if user tries to claim Metric for a question that was not unvoted"
        }
      ]
    },
    "events": {
      "Slashed(address,uint256)": {
        "notice": "Event emitted when a question is slashed."
      },
      "Withdraw(address,uint256)": {
        "notice": "Event emitted when Metric is withdrawn."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor sets the question Metric token, QuestionStateController and the treasury."
      },
      "depositsByWithdrawers(address,uint256)": {
        "notice": "Keeps track of the quantity of deposits per user."
      },
      "getMetricTotalLockedBalance()": {
        "notice": "Gets the total amount of Metric locked in the vault."
      },
      "getVaultById(uint256,uint8,address)": {
        "notice": "Gets the information about the vault attributes of a question."
      },
      "getVaultsByWithdrawer(address)": {
        "notice": "Gets the questions that a user has created."
      },
      "lockMetric(address,uint256,uint256,uint8)": {
        "notice": "Locks METRIC for creating a question"
      },
      "lockedMetric(uint256,uint8,address)": {
        "notice": "Keeps track of the quantity of withdrawals per user."
      },
      "lockedMetricByQuestion(uint256)": {
        "notice": "Keeps track of the amount of METRIC locked per question"
      },
      "setQuestionApi(address)": {
        "notice": "Sets the address of the question API."
      },
      "setTreasury(address)": {
        "notice": "Allows owner to update the treasury address and questionApi."
      },
      "totalLockedInVaults(address)": {
        "notice": "Keeps track of total amount in vault for a given user."
      },
      "treasury()": {
        "notice": "Address to the MetricsDAO treasury."
      },
      "updateStateController()": {
        "notice": "Allows anyone to update the controllers."
      },
      "withdrawMetric(address,uint256,uint8)": {
        "notice": "Allows a user to withdraw METRIC locked for a question, after the question is published."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6866,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "costController",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6869,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "questionAPI",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IQuestionAPI)6628"
      },
      {
        "astId": 6829,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "questionApi",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5795,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "metric",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)868"
      },
      {
        "astId": 5798,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "questionStateController",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IQuestionStateController)6688"
      },
      {
        "astId": 5801,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "claimController",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IClaimController)6600"
      },
      {
        "astId": 5804,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "question",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IBountyQuestion)6537"
      },
      {
        "astId": 5807,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "status",
        "offset": 20,
        "slot": "7",
        "type": "t_enum(STATUS)4113"
      },
      {
        "astId": 5810,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "treasury",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 5819,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "depositsByWithdrawers",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5824,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "lockedMetricByQuestion",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5829,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "totalLockedInVaults",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5840,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "lockedMetric",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(STAGE)4108,t_mapping(t_address,t_struct(lockAttributes)5744_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IBountyQuestion)6537": {
        "encoding": "inplace",
        "label": "contract IBountyQuestion",
        "numberOfBytes": "20"
      },
      "t_contract(IClaimController)6600": {
        "encoding": "inplace",
        "label": "contract IClaimController",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)868": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IQuestionAPI)6628": {
        "encoding": "inplace",
        "label": "contract IQuestionAPI",
        "numberOfBytes": "20"
      },
      "t_contract(IQuestionStateController)6688": {
        "encoding": "inplace",
        "label": "contract IQuestionStateController",
        "numberOfBytes": "20"
      },
      "t_enum(STAGE)4108": {
        "encoding": "inplace",
        "label": "enum STAGE",
        "numberOfBytes": "1"
      },
      "t_enum(STATUS)4113": {
        "encoding": "inplace",
        "label": "enum STATUS",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_struct(lockAttributes)5744_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct lockAttributes)",
        "numberOfBytes": "32",
        "value": "t_struct(lockAttributes)5744_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(STAGE)4108,t_mapping(t_address,t_struct(lockAttributes)5744_storage))": {
        "encoding": "mapping",
        "key": "t_enum(STAGE)4108",
        "label": "mapping(enum STAGE => mapping(address => struct lockAttributes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(lockAttributes)5744_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(STAGE)4108,t_mapping(t_address,t_struct(lockAttributes)5744_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum STAGE => mapping(address => struct lockAttributes)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(STAGE)4108,t_mapping(t_address,t_struct(lockAttributes)5744_storage))"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(lockAttributes)5744_storage": {
        "encoding": "inplace",
        "label": "struct lockAttributes",
        "members": [
          {
            "astId": 5738,
            "contract": "src/contracts/Protocol/Vault.sol:Vault",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5740,
            "contract": "src/contracts/Protocol/Vault.sol:Vault",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5743,
            "contract": "src/contracts/Protocol/Vault.sol:Vault",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(STATUS)4113"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}