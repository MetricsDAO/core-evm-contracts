{
  "address": "0x51751f543Ce5EBD30ba389f54dde61e015Ee03C2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotTheApi",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getAllMetaData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionApi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newApi",
          "type": "address"
        }
      ],
      "name": "setQuestionApi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "writeMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x46219f495d1505eeb86696d731235917d8fb756be11b163f4e7b7e938a8a508a",
  "receipt": {
    "to": null,
    "from": "0x0F7494eE0831529fD676ADbc234f858e280AeAF0",
    "contractAddress": "0x51751f543Ce5EBD30ba389f54dde61e015Ee03C2",
    "transactionIndex": 19,
    "gasUsed": "1177687",
    "logsBloom": "0x
    "blockHash": "0x4f1aff064dd40f9d2b89a1c1d8322fe296af08433da491374a9434e11665e9a9",
    "transactionHash": "0x46219f495d1505eeb86696d731235917d8fb756be11b163f4e7b7e938a8a508a",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 7604318,
        "transactionHash": "0x46219f495d1505eeb86696d731235917d8fb756be11b163f4e7b7e938a8a508a",
        "address": "0x51751f543Ce5EBD30ba389f54dde61e015Ee03C2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f7494ee0831529fd676adbc234f858e280aeaf0"
        ],
        "data": "0x",
        "logIndex": 129,
        "blockHash": "0x4f1aff064dd40f9d2b89a1c1d8322fe296af08433da491374a9434e11665e9a9"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 7604318,
        "transactionHash": "0x46219f495d1505eeb86696d731235917d8fb756be11b163f4e7b7e938a8a508a",
        "address": "0xDA8EA22d092307874f30A1F277D1388dca0BA97a",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000051751f543ce5ebd30ba389f54dde61e015ee03c2",
          "0x00000000000000000000000000000000000000000000000000000000000002c3"
        ],
        "data": "0x",
        "logIndex": 130,
        "blockHash": "0x4f1aff064dd40f9d2b89a1c1d8322fe296af08433da491374a9434e11665e9a9"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 7604318,
        "transactionHash": "0x46219f495d1505eeb86696d731235917d8fb756be11b163f4e7b7e938a8a508a",
        "address": "0xDA8EA22d092307874f30A1F277D1388dca0BA97a",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x00000000000000000000000051751f543ce5ebd30ba389f54dde61e015ee03c200000000000000000000000000000000000000000000000000000000000002c30000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000003d435245415445205441424c45206d65747269637364616f5f352028696420696e74207072696d617279206b65792c206d6573736167652074657874293b000000",
        "logIndex": 131,
        "blockHash": "0x4f1aff064dd40f9d2b89a1c1d8322fe296af08433da491374a9434e11665e9a9"
      }
    ],
    "blockNumber": 7604318,
    "cumulativeGasUsed": "9398352",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "8a59d5d7e2309d0ac3c59a6e12418b77",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotTheApi\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAllMetaData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionApi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newApi\",\"type\":\"address\"}],\"name\":\"setQuestionApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"writeMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setQuestionApi(address)\":{\"params\":{\"_newApi\":\"The new address of the question API.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setQuestionApi(address)\":{\"notice\":\"Sets the address of the question API.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/MetadataController.sol\":\"MetadataController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@tableland/evm/contracts/ITablelandController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of a TablelandController compliant contract.\\n *\\n * This interface can be implemented to enabled advanced access control for a table.\\n * Call {ITablelandTables-setController} with the address of your implementation.\\n *\\n * See {test/TestTablelandController} for an example of token-gating table write-access.\\n */\\ninterface ITablelandController {\\n    /**\\n     * @dev Object defining how a table can be accessed.\\n     */\\n    struct Policy {\\n        // Whether or not the table should allow SQL INSERT statements.\\n        bool allowInsert;\\n        // Whether or not the table should allow SQL UPDATE statements.\\n        bool allowUpdate;\\n        // Whether or not the table should allow SQL DELETE statements.\\n        bool allowDelete;\\n        // A conditional clause used with SQL UPDATE and DELETE statements.\\n        // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n        // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n        // This can be useful for limiting how a table can be modified.\\n        // Use {Policies-joinClauses} to include more than one condition.\\n        string whereClause;\\n        // A conditional clause used with SQL INSERT statements.\\n        // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n        // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n        // This can be useful for limiting how table data ban be added.\\n        // Use {Policies-joinClauses} to include more than one condition.\\n        string withCheck;\\n        // A list of SQL column names that can be updated.\\n        string[] updatableColumns;\\n    }\\n\\n    /**\\n     * @dev Returns a {Policy} struct defining how a table can be accessed by `caller`.\\n     */\\n    function getPolicy(address caller) external payable returns (Policy memory);\\n}\\n\",\"keccak256\":\"0xda5f7e8144be7322e66e0f6652e040d2e8409345843d225efdd11adf05cddf1d\",\"license\":\"MIT\"},\"@tableland/evm/contracts/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ITablelandController.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {ITablelandController.Policy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        ITablelandController.Policy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function createTable(address owner, string memory statement)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @dev Runs a SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` or contract owner\\n     * - `tableId` must exist\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function runSQL(\\n        address caller,\\n        uint256 tableId,\\n        string memory statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT bases write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` or contract owner and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` or contract owner and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x597bb13cc0f1990cee44a423601b16a383fd9a405874eed18f7d5045a9cffa2f\",\"license\":\"MIT\"},\"src/contracts/Protocol/MetadataController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@tableland/evm/contracts/ITablelandTables.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\ncontract MetadataController is Ownable, OnlyApi {\\n    using Strings for uint256;\\n\\n    ITablelandTables private _tableland;\\n\\n    uint256 private _tableId;\\n    string private _tableName;\\n    string private _tablePrefix = \\\"metricsdao\\\";\\n\\n    //------------------------------------------------------ CONSTRUCTOR\\n\\n    constructor() {\\n        _tableland = ITablelandTables(0xDA8EA22d092307874f30A1F277D1388dca0BA97a);\\n\\n        _tableId = _tableland.createTable(\\n            address(this),\\n            string.concat(\\\"CREATE TABLE \\\", _tablePrefix, \\\"_\\\", Strings.toString(block.chainid), \\\" (id int primary key, message text);\\\")\\n        );\\n\\n        _tableName = string.concat(_tablePrefix, \\\"_\\\", Strings.toString(block.chainid), \\\"_\\\", Strings.toString(_tableId));\\n    }\\n\\n    // ------------------------------------------------------ FUNCTIONS\\n\\n    function writeMetadata(uint256 id, string memory message) external {\\n        _tableland.runSQL(\\n            address(this),\\n            _tableId,\\n            string.concat(\\\"INSERT INTO \\\", _tableName, \\\" (id, message) VALUES (\\\", Strings.toString(id), \\\", '\\\", message, \\\"')\\\")\\n        );\\n    }\\n\\n    function getAllMetaData() public view returns (string memory) {\\n        string memory base = \\\"https://testnet.tableland.network/query?s=\\\";\\n        return string.concat(base, \\\"SELECT%20*%20FROM%20\\\", _tableName);\\n    }\\n}\\n\",\"keccak256\":\"0x69e8fd03190b2eaef7286e005d4f4175d46213b0daca1e576a2d1d81dcee92b6\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060400160405280600a81526020017f6d65747269637364616f0000000000000000000000000000000000000000000081525060059080519060200190620000519291906200046f565b503480156200005f57600080fd5b5062000080620000746200022a60201b60201c565b6200023260201b60201c565b73da8ea22d092307874f30a1f277d1388dca0ba97a600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a9151b03060056200012c46620002f660201b620004d31760201c565b6040516020016200013f92919062000768565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016200016d92919062000867565b6020604051808303816000875af11580156200018d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b39190620008db565b6003819055506005620001d146620002f660201b620004d31760201c565b620001e9600354620002f660201b620004d31760201c565b604051602001620001fd939291906200090d565b60405160208183030381529060405260049080519060200190620002239291906200046f565b5062000b77565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060600082036200033f576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506200046a565b600082905060005b60008214620003775780806200035d9062000995565b915050600a826200036f919062000a11565b915062000347565b60008167ffffffffffffffff81111562000396576200039562000a49565b5b6040519080825280601f01601f191660200182016040528015620003c95781602001600182028036833780820191505090505b5090505b600085146200046357600182620003e5919062000a78565b9150600a85620003f6919062000ab3565b603062000404919062000aeb565b60f81b8183815181106200041d576200041c62000b48565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856200045b919062000a11565b9450620003cd565b8093505050505b919050565b8280546200047d9062000574565b90600052602060002090601f016020900481019282620004a15760008555620004ed565b82601f10620004bc57805160ff1916838001178555620004ed565b82800160010185558215620004ed579182015b82811115620004ec578251825591602001919060010190620004cf565b5b509050620004fc919062000500565b5090565b5b808211156200051b57600081600090555060010162000501565b5090565b7f435245415445205441424c452000000000000000000000000000000000000000815250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200058d57607f821691505b602082108103620005a357620005a262000545565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154620005d88162000574565b620005e48186620005a9565b9450600182166000811462000602576001811462000614576200064b565b60ff198316865281860193506200064b565b6200061f85620005b4565b60005b83811015620006435781548189015260018201915060208101905062000622565b838801955050505b50505092915050565b7f5f00000000000000000000000000000000000000000000000000000000000000815250565b600081519050919050565b60005b83811015620006a557808201518184015260208101905062000688565b83811115620006b5576000848401525b50505050565b6000620006c8826200067a565b620006d48185620005a9565b9350620006e681856020860162000685565b80840191505092915050565b7f2028696420696e74207072696d617279206b65792c206d65737361676520746560008201527f7874293b00000000000000000000000000000000000000000000000000000000602082015250565b600062000750602483620005a9565b91506200075d82620006f2565b602482019050919050565b600062000775826200051f565b600d82019150620007878285620005c9565b9150620007948262000654565b600182019150620007a68284620006bb565b9150620007b38262000741565b91508190509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620007ec82620007bf565b9050919050565b620007fe81620007df565b82525050565b600082825260208201905092915050565b6000601f19601f8301169050919050565b600062000833826200067a565b6200083f818562000804565b93506200085181856020860162000685565b6200085c8162000815565b840191505092915050565b60006040820190506200087e6000830185620007f3565b818103602083015262000892818462000826565b90509392505050565b600080fd5b6000819050919050565b620008b581620008a0565b8114620008c157600080fd5b50565b600081519050620008d581620008aa565b92915050565b600060208284031215620008f457620008f36200089b565b5b60006200090484828501620008c4565b91505092915050565b60006200091b8286620005c9565b9150620009288262000654565b6001820191506200093a8285620006bb565b9150620009478262000654565b600182019150620009598284620006bb565b9150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620009a282620008a0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620009d757620009d662000966565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600062000a1e82620008a0565b915062000a2b83620008a0565b92508262000a3e5762000a3d620009e2565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600062000a8582620008a0565b915062000a9283620008a0565b92508282101562000aa85762000aa762000966565b5b828203905092915050565b600062000ac082620008a0565b915062000acd83620008a0565b92508262000ae05762000adf620009e2565b5b828206905092915050565b600062000af882620008a0565b915062000b0583620008a0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000b3d5762000b3c62000966565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6110448062000b876000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806393aa28c61161005b57806393aa28c6146100c8578063c0875dfd146100e4578063ec1916fa14610100578063f2fde38b1461011e5761007d565b80636baef49714610082578063715018a6146100a05780638da5cb5b146100aa575b600080fd5b61008a61013a565b6040516100979190610740565b60405180910390f35b6100a8610160565b005b6100b26101e8565b6040516100bf9190610740565b60405180910390f35b6100e260048036038101906100dd91906108eb565b610211565b005b6100fe60048036038101906100f99190610973565b6102d4565b005b610108610394565b6040516101159190610a28565b60405180910390f35b61013860048036038101906101339190610973565b6103dc565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610168610633565b73ffffffffffffffffffffffffffffffffffffffff166101866101e8565b73ffffffffffffffffffffffffffffffffffffffff16146101dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d390610a96565b60405180910390fd5b6101e6600061063b565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eaf5d04e30600354600461025e876104d3565b8660405160200161027193929190610c7e565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161029e93929190610cfa565b600060405180830381600087803b1580156102b857600080fd5b505af11580156102cc573d6000803e3d6000fd5b505050505050565b6102dc610633565b73ffffffffffffffffffffffffffffffffffffffff166102fa6101e8565b73ffffffffffffffffffffffffffffffffffffffff1614610350576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034790610a96565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606060006040518060600160405280602a8152602001610fe5602a913990508060046040516020016103c7929190610d5e565b60405160208183030381529060405291505090565b6103e4610633565b73ffffffffffffffffffffffffffffffffffffffff166104026101e8565b73ffffffffffffffffffffffffffffffffffffffff1614610458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044f90610a96565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104be90610e03565b60405180910390fd5b6104d08161063b565b50565b60606000820361051a576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061062e565b600082905060005b6000821461054c57808061053590610e52565b915050600a826105459190610ec9565b9150610522565b60008167ffffffffffffffff811115610568576105676107c0565b5b6040519080825280601f01601f19166020018201604052801561059a5781602001600182028036833780820191505090505b5090505b60008514610627576001826105b39190610efa565b9150600a856105c29190610f2e565b60306105ce9190610f5f565b60f81b8183815181106105e4576105e3610fb5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856106209190610ec9565b945061059e565b8093505050505b919050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061072a826106ff565b9050919050565b61073a8161071f565b82525050565b60006020820190506107556000830184610731565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6107828161076f565b811461078d57600080fd5b50565b60008135905061079f81610779565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107f8826107af565b810181811067ffffffffffffffff82111715610817576108166107c0565b5b80604052505050565b600061082a61075b565b905061083682826107ef565b919050565b600067ffffffffffffffff821115610856576108556107c0565b5b61085f826107af565b9050602081019050919050565b82818337600083830152505050565b600061088e6108898461083b565b610820565b9050828152602081018484840111156108aa576108a96107aa565b5b6108b584828561086c565b509392505050565b600082601f8301126108d2576108d16107a5565b5b81356108e284826020860161087b565b91505092915050565b6000806040838503121561090257610901610765565b5b600061091085828601610790565b925050602083013567ffffffffffffffff8111156109315761093061076a565b5b61093d858286016108bd565b9150509250929050565b6109508161071f565b811461095b57600080fd5b50565b60008135905061096d81610947565b92915050565b60006020828403121561098957610988610765565b5b60006109978482850161095e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156109da5780820151818401526020810190506109bf565b838111156109e9576000848401525b50505050565b60006109fa826109a0565b610a0481856109ab565b9350610a148185602086016109bc565b610a1d816107af565b840191505092915050565b60006020820190508181036000830152610a4281846109ef565b905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610a806020836109ab565b9150610a8b82610a4a565b602082019050919050565b60006020820190508181036000830152610aaf81610a73565b9050919050565b7f494e5345525420494e544f200000000000000000000000000000000000000000815250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b2357607f821691505b602082108103610b3657610b35610adc565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154610b6981610b0b565b610b738186610b3c565b94506001821660008114610b8e5760018114610b9f57610bd2565b60ff19831686528186019350610bd2565b610ba885610b47565b60005b83811015610bca57815481890152600182019150602081019050610bab565b838801955050505b50505092915050565b7f202869642c206d657373616765292056414c5545532028000000000000000000815250565b6000610c0c826109a0565b610c168185610b3c565b9350610c268185602086016109bc565b80840191505092915050565b7f2c20270000000000000000000000000000000000000000000000000000000000815250565b7f2729000000000000000000000000000000000000000000000000000000000000815250565b6000610c8982610ab6565b600c82019150610c998286610b5c565b9150610ca482610bdb565b601782019150610cb48285610c01565b9150610cbf82610c32565b600382019150610ccf8284610c01565b9150610cda82610c58565b600282019150819050949350505050565b610cf48161076f565b82525050565b6000606082019050610d0f6000830186610731565b610d1c6020830185610ceb565b8181036040830152610d2e81846109ef565b9050949350505050565b7f53454c4543542532302a25323046524f4d253230000000000000000000000000815250565b6000610d6a8285610c01565b9150610d7582610d38565b601482019150610d858284610b5c565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610ded6026836109ab565b9150610df882610d91565b604082019050919050565b60006020820190508181036000830152610e1c81610de0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e5d8261076f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e8f57610e8e610e23565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ed48261076f565b9150610edf8361076f565b925082610eef57610eee610e9a565b5b828204905092915050565b6000610f058261076f565b9150610f108361076f565b925082821015610f2357610f22610e23565b5b828203905092915050565b6000610f398261076f565b9150610f448361076f565b925082610f5457610f53610e9a565b5b828206905092915050565b6000610f6a8261076f565b9150610f758361076f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610faa57610fa9610e23565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe68747470733a2f2f746573746e65742e7461626c656c616e642e6e6574776f726b2f71756572793f733da2646970667358221220a781e8f4f494b90e774d358c4e31d5afbaba57aba9f079e5dbfc0ebc726b619964736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806393aa28c61161005b57806393aa28c6146100c8578063c0875dfd146100e4578063ec1916fa14610100578063f2fde38b1461011e5761007d565b80636baef49714610082578063715018a6146100a05780638da5cb5b146100aa575b600080fd5b61008a61013a565b6040516100979190610740565b60405180910390f35b6100a8610160565b005b6100b26101e8565b6040516100bf9190610740565b60405180910390f35b6100e260048036038101906100dd91906108eb565b610211565b005b6100fe60048036038101906100f99190610973565b6102d4565b005b610108610394565b6040516101159190610a28565b60405180910390f35b61013860048036038101906101339190610973565b6103dc565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610168610633565b73ffffffffffffffffffffffffffffffffffffffff166101866101e8565b73ffffffffffffffffffffffffffffffffffffffff16146101dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d390610a96565b60405180910390fd5b6101e6600061063b565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eaf5d04e30600354600461025e876104d3565b8660405160200161027193929190610c7e565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161029e93929190610cfa565b600060405180830381600087803b1580156102b857600080fd5b505af11580156102cc573d6000803e3d6000fd5b505050505050565b6102dc610633565b73ffffffffffffffffffffffffffffffffffffffff166102fa6101e8565b73ffffffffffffffffffffffffffffffffffffffff1614610350576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034790610a96565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606060006040518060600160405280602a8152602001610fe5602a913990508060046040516020016103c7929190610d5e565b60405160208183030381529060405291505090565b6103e4610633565b73ffffffffffffffffffffffffffffffffffffffff166104026101e8565b73ffffffffffffffffffffffffffffffffffffffff1614610458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044f90610a96565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104be90610e03565b60405180910390fd5b6104d08161063b565b50565b60606000820361051a576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061062e565b600082905060005b6000821461054c57808061053590610e52565b915050600a826105459190610ec9565b9150610522565b60008167ffffffffffffffff811115610568576105676107c0565b5b6040519080825280601f01601f19166020018201604052801561059a5781602001600182028036833780820191505090505b5090505b60008514610627576001826105b39190610efa565b9150600a856105c29190610f2e565b60306105ce9190610f5f565b60f81b8183815181106105e4576105e3610fb5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856106209190610ec9565b945061059e565b8093505050505b919050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061072a826106ff565b9050919050565b61073a8161071f565b82525050565b60006020820190506107556000830184610731565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6107828161076f565b811461078d57600080fd5b50565b60008135905061079f81610779565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107f8826107af565b810181811067ffffffffffffffff82111715610817576108166107c0565b5b80604052505050565b600061082a61075b565b905061083682826107ef565b919050565b600067ffffffffffffffff821115610856576108556107c0565b5b61085f826107af565b9050602081019050919050565b82818337600083830152505050565b600061088e6108898461083b565b610820565b9050828152602081018484840111156108aa576108a96107aa565b5b6108b584828561086c565b509392505050565b600082601f8301126108d2576108d16107a5565b5b81356108e284826020860161087b565b91505092915050565b6000806040838503121561090257610901610765565b5b600061091085828601610790565b925050602083013567ffffffffffffffff8111156109315761093061076a565b5b61093d858286016108bd565b9150509250929050565b6109508161071f565b811461095b57600080fd5b50565b60008135905061096d81610947565b92915050565b60006020828403121561098957610988610765565b5b60006109978482850161095e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156109da5780820151818401526020810190506109bf565b838111156109e9576000848401525b50505050565b60006109fa826109a0565b610a0481856109ab565b9350610a148185602086016109bc565b610a1d816107af565b840191505092915050565b60006020820190508181036000830152610a4281846109ef565b905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610a806020836109ab565b9150610a8b82610a4a565b602082019050919050565b60006020820190508181036000830152610aaf81610a73565b9050919050565b7f494e5345525420494e544f200000000000000000000000000000000000000000815250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b2357607f821691505b602082108103610b3657610b35610adc565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154610b6981610b0b565b610b738186610b3c565b94506001821660008114610b8e5760018114610b9f57610bd2565b60ff19831686528186019350610bd2565b610ba885610b47565b60005b83811015610bca57815481890152600182019150602081019050610bab565b838801955050505b50505092915050565b7f202869642c206d657373616765292056414c5545532028000000000000000000815250565b6000610c0c826109a0565b610c168185610b3c565b9350610c268185602086016109bc565b80840191505092915050565b7f2c20270000000000000000000000000000000000000000000000000000000000815250565b7f2729000000000000000000000000000000000000000000000000000000000000815250565b6000610c8982610ab6565b600c82019150610c998286610b5c565b9150610ca482610bdb565b601782019150610cb48285610c01565b9150610cbf82610c32565b600382019150610ccf8284610c01565b9150610cda82610c58565b600282019150819050949350505050565b610cf48161076f565b82525050565b6000606082019050610d0f6000830186610731565b610d1c6020830185610ceb565b8181036040830152610d2e81846109ef565b9050949350505050565b7f53454c4543542532302a25323046524f4d253230000000000000000000000000815250565b6000610d6a8285610c01565b9150610d7582610d38565b601482019150610d858284610b5c565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610ded6026836109ab565b9150610df882610d91565b604082019050919050565b60006020820190508181036000830152610e1c81610de0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e5d8261076f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e8f57610e8e610e23565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ed48261076f565b9150610edf8361076f565b925082610eef57610eee610e9a565b5b828204905092915050565b6000610f058261076f565b9150610f108361076f565b925082821015610f2357610f22610e23565b5b828203905092915050565b6000610f398261076f565b9150610f448361076f565b925082610f5457610f53610e9a565b5b828206905092915050565b6000610f6a8261076f565b9150610f758361076f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610faa57610fa9610e23565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe68747470733a2f2f746573746e65742e7461626c656c616e642e6e6574776f726b2f71756572793f733da2646970667358221220a781e8f4f494b90e774d358c4e31d5afbaba57aba9f079e5dbfc0ebc726b619964736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setQuestionApi(address)": {
        "params": {
          "_newApi": "The new address of the question API."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setQuestionApi(address)": {
        "notice": "Sets the address of the question API."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/MetadataController.sol:MetadataController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6829,
        "contract": "src/contracts/Protocol/MetadataController.sol:MetadataController",
        "label": "questionApi",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4349,
        "contract": "src/contracts/Protocol/MetadataController.sol:MetadataController",
        "label": "_tableland",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITablelandTables)2952"
      },
      {
        "astId": 4351,
        "contract": "src/contracts/Protocol/MetadataController.sol:MetadataController",
        "label": "_tableId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4353,
        "contract": "src/contracts/Protocol/MetadataController.sol:MetadataController",
        "label": "_tableName",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 4356,
        "contract": "src/contracts/Protocol/MetadataController.sol:MetadataController",
        "label": "_tablePrefix",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ITablelandTables)2952": {
        "encoding": "inplace",
        "label": "contract ITablelandTables",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}