{
  "address": "0x13768DDe7c93644AAe97bA2344Fa42f2C0A317F0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotTheApi",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheStateController",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "authors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAuthor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalVotes",
              "type": "uint256"
            },
            {
              "internalType": "enum STATE",
              "name": "questionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct QuestionData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getAuthorOfQuestion",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMostRecentQuestion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getQuestionData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalVotes",
              "type": "uint256"
            },
            {
              "internalType": "enum STATE",
              "name": "questionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct QuestionData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "mintQuestion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionAPI",
      "outputs": [
        {
          "internalType": "contract IQuestionAPI",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionApi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "questionData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalVotes",
          "type": "uint256"
        },
        {
          "internalType": "enum STATE",
          "name": "questionState",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newApi",
          "type": "address"
        }
      ],
      "name": "setQuestionApi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_questionAPI",
          "type": "address"
        }
      ],
      "name": "setQuestionApiSC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "enum STATE",
          "name": "newState",
          "type": "uint8"
        }
      ],
      "name": "updateState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateStateController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newVotes",
          "type": "uint256"
        }
      ],
      "name": "updateVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x585c9ad09704e148a1f9e0d36189e5487217c583e3ea910d81ae2cf2178c6144",
  "receipt": {
    "to": null,
    "from": "0x0F7494eE0831529fD676ADbc234f858e280AeAF0",
    "contractAddress": "0x13768DDe7c93644AAe97bA2344Fa42f2C0A317F0",
    "transactionIndex": 66,
    "gasUsed": "1682424",
    "logsBloom": "0x
    "blockHash": "0x7d98a9353dcffec5404ff74008313a71fe12068d163998836b1be0160c2abade",
    "transactionHash": "0x585c9ad09704e148a1f9e0d36189e5487217c583e3ea910d81ae2cf2178c6144",
    "logs": [
      {
        "transactionIndex": 66,
        "blockNumber": 7603829,
        "transactionHash": "0x585c9ad09704e148a1f9e0d36189e5487217c583e3ea910d81ae2cf2178c6144",
        "address": "0x13768DDe7c93644AAe97bA2344Fa42f2C0A317F0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f7494ee0831529fd676adbc234f858e280aeaf0"
        ],
        "data": "0x",
        "logIndex": 103,
        "blockHash": "0x7d98a9353dcffec5404ff74008313a71fe12068d163998836b1be0160c2abade"
      }
    ],
    "blockNumber": 7603829,
    "cumulativeGasUsed": "20524240",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "47b64a1bc1e11d0d714fb3e2e194e242",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotTheApi\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheStateController\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAuthor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"enum STATE\",\"name\":\"questionState\",\"type\":\"uint8\"}],\"internalType\":\"struct QuestionData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getAuthorOfQuestion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMostRecentQuestion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getQuestionData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"enum STATE\",\"name\":\"questionState\",\"type\":\"uint8\"}],\"internalType\":\"struct QuestionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mintQuestion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionAPI\",\"outputs\":[{\"internalType\":\"contract IQuestionAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionApi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questionData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"enum STATE\",\"name\":\"questionState\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newApi\",\"type\":\"address\"}],\"name\":\"setQuestionApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_questionAPI\",\"type\":\"address\"}],\"name\":\"setQuestionApiSC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"enum STATE\",\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"updateState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateStateController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newVotes\",\"type\":\"uint256\"}],\"name\":\"updateVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"contracts@metricsdao.xyz\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setQuestionApi(address)\":{\"params\":{\"_newApi\":\"The new address of the question API.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setQuestionApi(address)\":{\"notice\":\"Sets the address of the question API.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/BountyQuestion.sol\":\"BountyQuestion\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"src/contracts/Protocol/BountyQuestion.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n// Enums\\nimport {STATE} from \\\"./Enums/QuestionStateEnum.sol\\\";\\n\\n// Structs\\nimport {QuestionData} from \\\"./Structs/QuestionData.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\nimport \\\"./modifiers/OnlyStateController.sol\\\";\\n\\n/// @custom:security-contact contracts@metricsdao.xyz\\ncontract BountyQuestion is Ownable, OnlyApi, OnlyStateController {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _questionIdCounter;\\n\\n    mapping(address => uint256[]) public authors;\\n    mapping(uint256 => QuestionData) public questionData;\\n\\n    //------------------------------------------------------ CONSTRUCTOR\\n    constructor() {\\n        _questionIdCounter.increment();\\n    }\\n\\n    //------------------------------------------------------ FUNCTIONS\\n    function mintQuestion(address author, string calldata uri) public onlyApi returns (uint256) {\\n        uint256 questionId = _questionIdCounter.current();\\n        _questionIdCounter.increment();\\n\\n        questionData[questionId].author = author;\\n        questionData[questionId].questionId = questionId;\\n        questionData[questionId].uri = uri;\\n\\n        authors[author].push(questionId);\\n        return questionId;\\n    }\\n\\n    function updateState(uint256 questionId, STATE newState) public onlyStateController {\\n        QuestionData storage question = questionData[questionId];\\n        question.questionState = newState;\\n    }\\n\\n    function updateVotes(uint256 questionId, uint256 newVotes) public onlyStateController {\\n        QuestionData storage question = questionData[questionId];\\n        question.totalVotes = newVotes;\\n    }\\n\\n    // ------------------------------------------------------ VIEW FUNCTIONS\\n\\n    function getAuthor(address user) public view returns (QuestionData[] memory) {\\n        uint256[] memory created = authors[user];\\n\\n        QuestionData[] memory ret = new QuestionData[](created.length);\\n\\n        for (uint256 i = 0; i < created.length; i++) {\\n            ret[i] = questionData[created[i]];\\n        }\\n        return ret;\\n    }\\n\\n    function getAuthorOfQuestion(uint256 questionId) public view returns (address) {\\n        return questionData[questionId].author;\\n    }\\n\\n    function getMostRecentQuestion() public view returns (uint256) {\\n        return _questionIdCounter.current() - 1;\\n    }\\n\\n    function getQuestionData(uint256 questionId) public view returns (QuestionData memory) {\\n        return questionData[questionId];\\n    }\\n}\\n\",\"keccak256\":\"0x756b6842ba3286b4762b499888b890e1354c94199205fe4f78ffa4f56a6e5213\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/QuestionStateEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum STATE {\\n    UNINIT,\\n    VOTING,\\n    PENDING,\\n    PUBLISHED,\\n    DISQUALIFIED,\\n    COMPLETED\\n}\\n\",\"keccak256\":\"0x72cc784cc502713781c3079d528f57b2c0a3f1b21a93b5e8f490c3897be8f65e\",\"license\":\"MIT\"},\"src/contracts/Protocol/Structs/QuestionData.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {STATE} from \\\"../Enums/QuestionStateEnum.sol\\\";\\n\\nstruct QuestionData {\\n    uint256 questionId;\\n    address author;\\n    string uri;\\n    uint256 totalVotes;\\n    STATE questionState;\\n}\\n\",\"keccak256\":\"0x7f79334ef9425f69db4c3fd53ddc0c610aa3588cfaf72e89aee9a0cae2db3214\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IQuestionAPI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IQuestionAPI {\\n    function getMetricToken() external view returns (address);\\n\\n    function getQuestionStateController() external view returns (address);\\n\\n    function getClaimController() external view returns (address);\\n\\n    function getCostController() external view returns (address);\\n\\n    function getBountyQuestion() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbb9a3811a5d0286d26ce4613eec199a6eea5363b27d9421d0bfe23f8be3ddf1b\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyStateController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IQuestionAPI} from \\\"../interfaces/IQuestionAPI.sol\\\";\\n\\ncontract OnlyStateController is Ownable {\\n    address public stateController;\\n    IQuestionAPI public questionAPI;\\n\\n    // ------------------------------- Setter\\n    function updateStateController() public {\\n        stateController = questionAPI.getQuestionStateController();\\n    }\\n\\n    function setQuestionApiSC(address _questionAPI) public onlyOwner {\\n        questionAPI = IQuestionAPI(_questionAPI);\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyStateController() {\\n        if (_msgSender() != stateController) revert NotTheStateController();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheStateController();\\n}\\n\",\"keccak256\":\"0x5220997a6cafca470ace05df2a85e3b64a9e5df19f585fa2ad64bdb14582e8a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063dab6dbce11610071578063dab6dbce146102d3578063f2fde38b14610303578063f74bfd421461031f578063fa992f3f1461034f578063ffbafdfe1461035957610116565b80638da5cb5b1461025f578063bf632e671461027d578063c0875dfd1461029b578063cd5c31e3146102b757610116565b8063710bc3cd116100e9578063710bc3cd146101bb578063715018a6146101eb57806374bedfc9146101f557806377974616146102135780638d2c1dcd1461024357610116565b80630ab300931461011b5780631401e0a81461014b5780633d5a71d51461017f5780636baef4971461019d575b600080fd5b610135600480360381019061013091906112ed565b610375565b604051610142919061158a565b60405180910390f35b610165600480360381019061016091906115d8565b610619565b60405161017695949392919061167c565b60405180910390f35b610187610704565b6040516101949190611735565b60405180910390f35b6101a561072a565b6040516101b29190611750565b60405180910390f35b6101d560048036038101906101d091906115d8565b610750565b6040516101e29190611750565b60405180910390f35b6101f3610790565b005b6101fd610818565b60405161020a919061176b565b60405180910390f35b61022d60048036038101906102289190611786565b610835565b60405161023a919061176b565b60405180910390f35b61025d600480360381019061025891906117c6565b610866565b005b610267610919565b6040516102749190611750565b60405180910390f35b610285610942565b6040516102929190611750565b60405180910390f35b6102b560048036038101906102b091906112ed565b610968565b005b6102d160048036038101906102cc91906112ed565b610a28565b005b6102ed60048036038101906102e8919061186b565b610ae8565b6040516102fa919061176b565b60405180910390f35b61031d600480360381019061031891906112ed565b610c97565b005b610339600480360381019061033491906115d8565b610d8e565b6040516103469190611941565b60405180910390f35b610357610ef2565b005b610373600480360381019061036e9190611988565b610fc5565b005b60606000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561040257602002820191906000526020600020905b8154815260200190600101908083116103ee575b505050505090506000815167ffffffffffffffff811115610426576104256119c8565b5b60405190808252806020026020018201604052801561045f57816020015b61044c61118b565b8152602001906001900390816104445790505b50905060005b825181101561060e5760066000848381518110610485576104846119f7565b5b602002602001015181526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805461051690611a55565b80601f016020809104026020016040519081016040528092919081815260200182805461054290611a55565b801561058f5780601f106105645761010080835404028352916020019161058f565b820191906000526020600020905b81548152906001019060200180831161057257829003601f168201915b50505050508152602001600382015481526020016004820160009054906101000a900460ff1660058111156105c7576105c6611407565b5b60058111156105d9576105d8611407565b5b815250508282815181106105f0576105ef6119f7565b5b6020026020010181905250808061060690611ab5565b915050610465565b508092505050919050565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600201805461066890611a55565b80601f016020809104026020016040519081016040528092919081815260200182805461069490611a55565b80156106e15780601f106106b6576101008083540402835291602001916106e1565b820191906000526020600020905b8154815290600101906020018083116106c457829003601f168201915b5050505050908060030154908060040160009054906101000a900460ff16905085565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006006600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6107986110b1565b73ffffffffffffffffffffffffffffffffffffffff166107b6610919565b73ffffffffffffffffffffffffffffffffffffffff161461080c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080390611b49565b60405180910390fd5b61081660006110b9565b565b60006001610826600461117d565b6108309190611b69565b905090565b6005602052816000526040600020818154811061085157600080fd5b90600052602060002001600091509150505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108a76110b1565b73ffffffffffffffffffffffffffffffffffffffff16146108f4576040517f1ac786d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660008481526020019081526020016000209050818160030181905550505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109706110b1565b73ffffffffffffffffffffffffffffffffffffffff1661098e610919565b73ffffffffffffffffffffffffffffffffffffffff16146109e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109db90611b49565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610a306110b1565b73ffffffffffffffffffffffffffffffffffffffff16610a4e610919565b73ffffffffffffffffffffffffffffffffffffffff1614610aa4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9b90611b49565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b2b6110b1565b73ffffffffffffffffffffffffffffffffffffffff1614610b78576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610b84600461117d565b9050610b90600461109b565b846006600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060066000838152602001908152602001600020600001819055508383600660008481526020019081526020016000206002019190610c259291906111e2565b50600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055809150509392505050565b610c9f6110b1565b73ffffffffffffffffffffffffffffffffffffffff16610cbd610919565b73ffffffffffffffffffffffffffffffffffffffff1614610d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0a90611b49565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7990611c0f565b60405180910390fd5b610d8b816110b9565b50565b610d9661118b565b600660008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610e2490611a55565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5090611a55565b8015610e9d5780601f10610e7257610100808354040283529160200191610e9d565b820191906000526020600020905b815481529060010190602001808311610e8057829003601f168201915b50505050508152602001600382015481526020016004820160009054906101000a900460ff166005811115610ed557610ed4611407565b5b6005811115610ee757610ee6611407565b5b815250509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dde027b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f839190611c44565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166110066110b1565b73ffffffffffffffffffffffffffffffffffffffff1614611053576040517f1ac786d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660008481526020019081526020016000209050818160040160006101000a81548160ff0219169083600581111561109157611090611407565b5b0217905550505050565b6001816000016000828254019250508190555050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001549050919050565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001600060058111156111dc576111db611407565b5b81525090565b8280546111ee90611a55565b90600052602060002090601f0160209004810192826112105760008555611257565b82601f1061122957803560ff1916838001178555611257565b82800160010185558215611257579182015b8281111561125657823582559160200191906001019061123b565b5b5090506112649190611268565b5090565b5b80821115611281576000816000905550600101611269565b5090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112ba8261128f565b9050919050565b6112ca816112af565b81146112d557600080fd5b50565b6000813590506112e7816112c1565b92915050565b60006020828403121561130357611302611285565b5b6000611311848285016112d8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61135981611346565b82525050565b611368816112af565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156113a857808201518184015260208101905061138d565b838111156113b7576000848401525b50505050565b6000601f19601f8301169050919050565b60006113d98261136e565b6113e38185611379565b93506113f381856020860161138a565b6113fc816113bd565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6006811061144757611446611407565b5b50565b600081905061145882611436565b919050565b60006114688261144a565b9050919050565b6114788161145d565b82525050565b600060a0830160008301516114966000860182611350565b5060208301516114a9602086018261135f565b50604083015184820360408601526114c182826113ce565b91505060608301516114d66060860182611350565b5060808301516114e9608086018261146f565b508091505092915050565b6000611500838361147e565b905092915050565b6000602082019050919050565b60006115208261131a565b61152a8185611325565b93508360208202850161153c85611336565b8060005b85811015611578578484038952815161155985826114f4565b945061156483611508565b925060208a01995050600181019050611540565b50829750879550505050505092915050565b600060208201905081810360008301526115a48184611515565b905092915050565b6115b581611346565b81146115c057600080fd5b50565b6000813590506115d2816115ac565b92915050565b6000602082840312156115ee576115ed611285565b5b60006115fc848285016115c3565b91505092915050565b61160e81611346565b82525050565b61161d816112af565b82525050565b600082825260208201905092915050565b600061163f8261136e565b6116498185611623565b935061165981856020860161138a565b611662816113bd565b840191505092915050565b6116768161145d565b82525050565b600060a0820190506116916000830188611605565b61169e6020830187611614565b81810360408301526116b08186611634565b90506116bf6060830185611605565b6116cc608083018461166d565b9695505050505050565b6000819050919050565b60006116fb6116f66116f18461128f565b6116d6565b61128f565b9050919050565b600061170d826116e0565b9050919050565b600061171f82611702565b9050919050565b61172f81611714565b82525050565b600060208201905061174a6000830184611726565b92915050565b60006020820190506117656000830184611614565b92915050565b60006020820190506117806000830184611605565b92915050565b6000806040838503121561179d5761179c611285565b5b60006117ab858286016112d8565b92505060206117bc858286016115c3565b9150509250929050565b600080604083850312156117dd576117dc611285565b5b60006117eb858286016115c3565b92505060206117fc858286016115c3565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f84011261182b5761182a611806565b5b8235905067ffffffffffffffff8111156118485761184761180b565b5b60208301915083600182028301111561186457611863611810565b5b9250929050565b60008060006040848603121561188457611883611285565b5b6000611892868287016112d8565b935050602084013567ffffffffffffffff8111156118b3576118b261128a565b5b6118bf86828701611815565b92509250509250925092565b600060a0830160008301516118e36000860182611350565b5060208301516118f6602086018261135f565b506040830151848203604086015261190e82826113ce565b91505060608301516119236060860182611350565b506080830151611936608086018261146f565b508091505092915050565b6000602082019050818103600083015261195b81846118cb565b905092915050565b6006811061197057600080fd5b50565b60008135905061198281611963565b92915050565b6000806040838503121561199f5761199e611285565b5b60006119ad858286016115c3565b92505060206119be85828601611973565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611a6d57607f821691505b602082108103611a8057611a7f611a26565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ac082611346565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611af257611af1611a86565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611b33602083611623565b9150611b3e82611afd565b602082019050919050565b60006020820190508181036000830152611b6281611b26565b9050919050565b6000611b7482611346565b9150611b7f83611346565b925082821015611b9257611b91611a86565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611bf9602683611623565b9150611c0482611b9d565b604082019050919050565b60006020820190508181036000830152611c2881611bec565b9050919050565b600081519050611c3e816112c1565b92915050565b600060208284031215611c5a57611c59611285565b5b6000611c6884828501611c2f565b9150509291505056fea2646970667358221220944429f3cc7d4fc4d353b3c248d7401381cf6bb46de4de3230f567712efef17e64736f6c634300080d0033",
  "devdoc": {
    "custom:security-contact": "contracts@metricsdao.xyz",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setQuestionApi(address)": {
        "params": {
          "_newApi": "The new address of the question API."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setQuestionApi(address)": {
        "notice": "Sets the address of the question API."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6829,
        "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
        "label": "questionApi",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6917,
        "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
        "label": "stateController",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6920,
        "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
        "label": "questionAPI",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IQuestionAPI)6628"
      },
      {
        "astId": 3567,
        "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
        "label": "_questionIdCounter",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)2504_storage"
      },
      {
        "astId": 3572,
        "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
        "label": "authors",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3577,
        "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
        "label": "questionData",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(QuestionData)5760_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IQuestionAPI)6628": {
        "encoding": "inplace",
        "label": "contract IQuestionAPI",
        "numberOfBytes": "20"
      },
      "t_enum(STATE)4100": {
        "encoding": "inplace",
        "label": "enum STATE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(QuestionData)5760_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct QuestionData)",
        "numberOfBytes": "32",
        "value": "t_struct(QuestionData)5760_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2504_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2503,
            "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(QuestionData)5760_storage": {
        "encoding": "inplace",
        "label": "struct QuestionData",
        "members": [
          {
            "astId": 5750,
            "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
            "label": "questionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5752,
            "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
            "label": "author",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5754,
            "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
            "label": "uri",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 5756,
            "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
            "label": "totalVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5759,
            "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
            "label": "questionState",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(STATE)4100"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}