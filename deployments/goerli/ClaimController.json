{
  "address": "0xbb0C1BF0B915071a4953A3F0CcC3A4abBCe98870",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimLimitReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeedClaimToAnswer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoClaimToRelease",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheApi",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "answerURL",
          "type": "string"
        }
      ],
      "name": "answer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "answers",
      "outputs": [
        {
          "internalType": "enum CLAIM_STATE",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "answerURL",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "finalGrade",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "scoringMetaDataURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claims",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getClaimDataForUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum CLAIM_STATE",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "answerURL",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "finalGrade",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "scoringMetaDataURI",
              "type": "string"
            }
          ],
          "internalType": "struct Answer",
          "name": "_answer",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getClaimLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getClaims",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_claims",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getMetricThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getQuestionClaimState",
      "outputs": [
        {
          "internalType": "enum CLAIM_STATE",
          "name": "claimState",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "initializeQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metricThresholds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metricToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionAPI",
      "outputs": [
        {
          "internalType": "contract IQuestionAPI",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionApi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "releaseClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newApi",
          "type": "address"
        }
      ],
      "name": "setQuestionApi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_questionAPI",
          "type": "address"
        }
      ],
      "name": "setQuestionApiMT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf476d5a7aa1a4ad7475467c60a3d1ffdf5b5cffa77de793ce39daf63205acab6",
  "receipt": {
    "to": null,
    "from": "0x0F7494eE0831529fD676ADbc234f858e280AeAF0",
    "contractAddress": "0xbb0C1BF0B915071a4953A3F0CcC3A4abBCe98870",
    "transactionIndex": 34,
    "gasUsed": "2090645",
    "logsBloom": "0x
    "blockHash": "0xe694ec4af30b531cdfa1693753deab8b37ff874e96e024c5d9e876d9f1b37947",
    "transactionHash": "0xf476d5a7aa1a4ad7475467c60a3d1ffdf5b5cffa77de793ce39daf63205acab6",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 7603831,
        "transactionHash": "0xf476d5a7aa1a4ad7475467c60a3d1ffdf5b5cffa77de793ce39daf63205acab6",
        "address": "0xbb0C1BF0B915071a4953A3F0CcC3A4abBCe98870",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f7494ee0831529fd676adbc234f858e280aeaf0"
        ],
        "data": "0x",
        "logIndex": 82,
        "blockHash": "0xe694ec4af30b531cdfa1693753deab8b37ff874e96e024c5d9e876d9f1b37947"
      }
    ],
    "blockNumber": 7603831,
    "cumulativeGasUsed": "7869145",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "47b64a1bc1e11d0d714fb3e2e194e242",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimLimitReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeedClaimToAnswer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoClaimToRelease\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheApi\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"answerURL\",\"type\":\"string\"}],\"name\":\"answer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"answers\",\"outputs\":[{\"internalType\":\"enum CLAIM_STATE\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"answerURL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"finalGrade\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"scoringMetaDataURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimDataForUser\",\"outputs\":[{\"components\":[{\"internalType\":\"enum CLAIM_STATE\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"answerURL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"finalGrade\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"scoringMetaDataURI\",\"type\":\"string\"}],\"internalType\":\"struct Answer\",\"name\":\"_answer\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getClaimLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getClaims\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_claims\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getMetricThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getQuestionClaimState\",\"outputs\":[{\"internalType\":\"enum CLAIM_STATE\",\"name\":\"claimState\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"initializeQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metricThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metricToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionAPI\",\"outputs\":[{\"internalType\":\"contract IQuestionAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionApi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"releaseClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newApi\",\"type\":\"address\"}],\"name\":\"setQuestionApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_questionAPI\",\"type\":\"address\"}],\"name\":\"setQuestionApiMT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initializeQuestion(uint256,uint256,uint256)\":{\"params\":{\"claimLimit\":\"The limit for the amount of people that can claim the question\",\"questionId\":\"The id of the question\",\"threshold\":\"The METRIC holding threshold required to claim the question.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setQuestionApi(address)\":{\"params\":{\"_newApi\":\"The new address of the question API.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed()\":[{\"notice\":\"Throw if analyst tries to claim a question multiple times\"}],\"ClaimLimitReached()\":[{\"notice\":\"Throw if user tries to claim a question that is past its limit\"}],\"NeedClaimToAnswer()\":[{\"notice\":\"Throw if a analyst tries to answer a question that it has not claimed\"}],\"NoClaimToRelease()\":[{\"notice\":\"Throw if analyst tries to release a claim it did not claim\"}],\"NotEnoughTokens()\":[{\"notice\":\"Throw if user tries to claim with balance lower than threshold\"}]},\"kind\":\"user\",\"methods\":{\"answers(uint256,address)\":{\"notice\":\"maps answers to the question they belong to\"},\"claimCounts(uint256)\":{\"notice\":\"Keeps track of claim counts per question\"},\"claimLimits(uint256)\":{\"notice\":\"Keeps track of claim limits per question\"},\"claims(uint256,uint256)\":{\"notice\":\"maps all claimers to a question\"},\"initializeQuestion(uint256,uint256,uint256)\":{\"notice\":\"Initializes a question to receive claims\"},\"metricThresholds(uint256)\":{\"notice\":\"Maps the metric token threshold to a question\"},\"setQuestionApi(address)\":{\"notice\":\"Sets the address of the question API.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/ClaimController.sol\":\"ClaimController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/Protocol/ClaimController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Enums\\nimport {CLAIM_STATE} from \\\"./Enums/ClaimEnum.sol\\\";\\n\\n// Structs\\nimport {Answer} from \\\"./Structs/AnswerStruct.sol\\\";\\n\\n// Events & Errors\\nimport {ClaimEventsAndErrors} from \\\"./EventsAndErrors/ClaimEventsAndErrors.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\nimport \\\"./modifiers/TokenBar.sol\\\";\\n\\ncontract ClaimController is Ownable, OnlyApi, TokenBar, ClaimEventsAndErrors {\\n    /// @notice Keeps track of claim limits per question\\n    mapping(uint256 => uint256) public claimLimits;\\n\\n    /// @notice Keeps track of claim counts per question\\n    mapping(uint256 => uint256) public claimCounts;\\n\\n    /// @notice maps answers to the question they belong to\\n    mapping(uint256 => mapping(address => Answer)) public answers;\\n\\n    /// @notice maps all claimers to a question\\n    mapping(uint256 => address[]) public claims;\\n\\n    /// @notice Maps the metric token threshold to a question\\n    mapping(uint256 => uint256) public metricThresholds;\\n\\n    //------------------------------------------------------ CONSTRUCTOR\\n\\n    constructor() {}\\n\\n    // ------------------------------------------------------ FUNCTIONS\\n\\n    /**\\n     * @notice Initializes a question to receive claims\\n     * @param questionId The id of the question\\n     * @param claimLimit The limit for the amount of people that can claim the question\\n     * @param threshold The METRIC holding threshold required to claim the question.\\n     */\\n    function initializeQuestion(\\n        uint256 questionId,\\n        uint256 claimLimit,\\n        uint256 threshold\\n    ) public onlyApi {\\n        claimLimits[questionId] = claimLimit;\\n        metricThresholds[questionId] = threshold;\\n    }\\n\\n    function claim(address user, uint256 questionId) public onlyApi tokenThreshold(user, questionId) {\\n        if (claimCounts[questionId] >= claimLimits[questionId]) revert ClaimLimitReached();\\n        if (answers[questionId][user].author == user) revert AlreadyClaimed();\\n\\n        ++claimCounts[questionId];\\n        Answer memory _answer = Answer({state: CLAIM_STATE.CLAIMED, author: user, answerURL: \\\"\\\", scoringMetaDataURI: \\\"\\\", finalGrade: 0});\\n        answers[questionId][user] = _answer;\\n    }\\n\\n    function releaseClaim(address user, uint256 questionId) public onlyApi {\\n        if (answers[questionId][user].author != user) revert NoClaimToRelease();\\n\\n        answers[questionId][user].state = CLAIM_STATE.RELEASED;\\n        answers[questionId][user].author = address(0);\\n\\n        --claimCounts[questionId];\\n    }\\n\\n    function answer(\\n        address user,\\n        uint256 questionId,\\n        string calldata answerURL\\n    ) public onlyOwner {\\n        if (answers[questionId][user].state != CLAIM_STATE.CLAIMED) revert NeedClaimToAnswer();\\n        answers[questionId][user].answerURL = answerURL;\\n    }\\n\\n    // ------------------------------------------------------ VIEW FUNCTIONS\\n\\n    function getClaims(uint256 questionId) public view returns (address[] memory _claims) {\\n        return claims[questionId];\\n    }\\n\\n    function getClaimLimit(uint256 questionId) public view returns (uint256) {\\n        return claimLimits[questionId];\\n    }\\n\\n    function getClaimDataForUser(uint256 questionId, address user) public view returns (Answer memory _answer) {\\n        return answers[questionId][user];\\n    }\\n\\n    function getQuestionClaimState(uint256 questionId, address user) public view returns (CLAIM_STATE claimState) {\\n        return answers[questionId][user].state;\\n    }\\n\\n    function getMetricThreshold(uint256 questionId) public view returns (uint256) {\\n        return metricThresholds[questionId];\\n    }\\n}\\n\",\"keccak256\":\"0x7fb9f089f7c89c7e28109bc10adcaf14c92edcb5dc91fea289c314ebc11ec70a\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/ClaimEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum CLAIM_STATE {\\n    UNINT,\\n    CLAIMED,\\n    RELEASED,\\n    ANSWERED\\n}\\n\",\"keccak256\":\"0xea71b984aaf40147b5540a4db0f867086eaf9c4c45acd47e4f4e3149b649b1e6\",\"license\":\"MIT\"},\"src/contracts/Protocol/EventsAndErrors/ClaimEventsAndErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ClaimEventsAndErrors {\\n    ///------------------------------------------------------ ERRORS\\n\\n    /// @notice Throw if user tries to claim a question that is past its limit\\n    error ClaimLimitReached();\\n\\n    /// @notice Throw if a analyst tries to answer a question that it has not claimed\\n    error NeedClaimToAnswer();\\n\\n    /// @notice Throw if analyst tries to claim a question multiple times\\n    error AlreadyClaimed();\\n\\n    /// @notice Throw if analyst tries to release a claim it did not claim\\n    error NoClaimToRelease();\\n}\\n\",\"keccak256\":\"0xeb4a531f545ca6a072c10314d420c39d8b52e24831fb366d194203f9fec99e89\",\"license\":\"MIT\"},\"src/contracts/Protocol/Structs/AnswerStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {CLAIM_STATE} from \\\"../Enums/ClaimEnum.sol\\\";\\n\\nstruct Answer {\\n    CLAIM_STATE state;\\n    address author;\\n    string answerURL;\\n    uint256 finalGrade;\\n    string scoringMetaDataURI;\\n}\\n\",\"keccak256\":\"0x5c238cb3974d2d8eedb5c107b88c381f6562d1920741494be7270e9f82817b1d\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IClaimController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Structs/AnswerStruct.sol\\\";\\n\\ninterface IClaimController {\\n    function initializeQuestion(\\n        uint256 questionId,\\n        uint256 claimLimit,\\n        uint256 threshold\\n    ) external;\\n\\n    function claim(address user, uint256 questionId) external;\\n\\n    function releaseClaim(address user, uint256 questionId) external;\\n\\n    function answer(\\n        address user,\\n        uint256 questionId,\\n        string calldata answerURL\\n    ) external;\\n\\n    function getClaimDataForUser(uint256 questionId, address user) external view returns (Answer memory _answer);\\n\\n    function getQuestionClaimState(uint256 questionId, address user) external view returns (CLAIM_STATE claimState);\\n\\n    function getMetricThreshold(uint256 questionId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf6c5c7f201551d0f7387444d393144b025c6a768f921701657f060cd1e5fc684\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IQuestionAPI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IQuestionAPI {\\n    function getMetricToken() external view returns (address);\\n\\n    function getQuestionStateController() external view returns (address);\\n\\n    function getClaimController() external view returns (address);\\n\\n    function getCostController() external view returns (address);\\n\\n    function getBountyQuestion() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbb9a3811a5d0286d26ce4613eec199a6eea5363b27d9421d0bfe23f8be3ddf1b\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/TokenBar.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Interfaces\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IClaimController} from \\\"../interfaces/IClaimController.sol\\\";\\nimport {IQuestionAPI} from \\\"../interfaces/IQuestionAPI.sol\\\";\\n\\nabstract contract TokenBar is Ownable {\\n    address public metricToken;\\n    IQuestionAPI public questionAPI;\\n\\n    /// @notice Throw if user tries to claim with balance lower than threshold\\n    error NotEnoughTokens();\\n\\n    function updateMetric() public {\\n        metricToken = questionAPI.getMetricToken();\\n    }\\n\\n    function setQuestionApiMT(address _questionAPI) public onlyOwner {\\n        questionAPI = IQuestionAPI(_questionAPI);\\n    }\\n\\n    modifier tokenThreshold(address user, uint256 questionId) {\\n        checkThreshold(user, questionId);\\n        _;\\n    }\\n\\n    function checkThreshold(address user, uint256 questionId) internal view virtual {\\n        if (IERC20(metricToken).balanceOf(user) < IClaimController(address(this)).getMetricThreshold(questionId)) revert NotEnoughTokens();\\n    }\\n}\\n\",\"keccak256\":\"0xe51ad9f9042e542905b5bdac6df7589e5a9608358ba3712819848668120b1fc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61247b806200010e6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063942e8b13116100c3578063ca35bf931161007c578063ca35bf93146103a0578063cf55382c146103d0578063de9951a614610400578063f2fde38b1461041c578063f32626cf14610438578063f894160e146104565761014d565b8063942e8b13146102ce578063a461272b146102d8578063aad3ec9614610308578063b92e274a14610324578063bdb686de14610354578063c0875dfd146103845761014d565b80636e3c4dd7116101155780636e3c4dd7146101f6578063715018a6146102265780637dfca71c14610230578063888af91d1461026457806389488e55146102945780638da5cb5b146102b05761014d565b80633d5a71d514610152578063469724e1146101705780634e2f46291461018c5780634e88e130146101bc5780636baef497146101d8575b600080fd5b61015a610486565b6040516101679190611b1d565b60405180910390f35b61018a60048036038101906101859190611bb6565b6104ac565b005b6101a660048036038101906101a19190611bf6565b61074c565b6040516101b39190611c32565b60405180910390f35b6101d660048036038101906101d19190611c4d565b610764565b005b6101e0610824565b6040516101ed9190611c89565b60405180910390f35b610210600480360381019061020b9190611bf6565b61084a565b60405161021d9190611c32565b60405180910390f35b61022e610862565b005b61024a60048036038101906102459190611ca4565b6108ea565b60405161025b959493929190611df4565b60405180910390f35b61027e60048036038101906102799190611bf6565b610a6a565b60405161028b9190611f13565b60405180910390f35b6102ae60048036038101906102a99190611f35565b610b0b565b005b6102b8610bce565b6040516102c59190611c89565b60405180910390f35b6102d6610bf7565b005b6102f260048036038101906102ed9190611bf6565b610cca565b6040516102ff9190611c32565b60405180910390f35b610322600480360381019061031d9190611bb6565b610ce7565b005b61033e60048036038101906103399190611ca4565b611068565b60405161034b9190611f88565b60405180910390f35b61036e60048036038101906103699190611ca4565b6110d3565b60405161037b9190612088565b60405180910390f35b61039e60048036038101906103999190611c4d565b6112fd565b005b6103ba60048036038101906103b59190611bf6565b6113bd565b6040516103c79190611c32565b60405180910390f35b6103ea60048036038101906103e59190611bf6565b6113d5565b6040516103f79190611c32565b60405180910390f35b61041a6004803603810190610415919061210f565b6113f2565b005b61043660048036038101906104319190611c4d565b611595565b005b61044061168c565b60405161044d9190611c89565b60405180910390f35b610470600480360381019061046b9190612183565b6116b2565b60405161047d9190611c89565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166104ed611700565b73ffffffffffffffffffffffffffffffffffffffff161461053a576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610612576040517f70d169c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026006600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083600381111561068957610688611ce4565b5b021790555060006006600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506005600082815260200190815260200160002060008154610741906121f2565b919050819055505050565b60056020528060005260406000206000915090505481565b61076c611700565b73ffffffffffffffffffffffffffffffffffffffff1661078a610bce565b73ffffffffffffffffffffffffffffffffffffffff16146107e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d790612267565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915090505481565b61086a611700565b73ffffffffffffffffffffffffffffffffffffffff16610888610bce565b73ffffffffffffffffffffffffffffffffffffffff16146108de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d590612267565b60405180910390fd5b6108e86000611708565b565b6006602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054610953906122b6565b80601f016020809104026020016040519081016040528092919081815260200182805461097f906122b6565b80156109cc5780601f106109a1576101008083540402835291602001916109cc565b820191906000526020600020905b8154815290600101906020018083116109af57829003601f168201915b5050505050908060020154908060030180546109e7906122b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610a13906122b6565b8015610a605780601f10610a3557610100808354040283529160200191610a60565b820191906000526020600020905b815481529060010190602001808311610a4357829003601f168201915b5050505050905085565b606060076000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610aff57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ab5575b50505050509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b4c611700565b73ffffffffffffffffffffffffffffffffffffffff1614610b99576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816004600085815260200190815260200160002081905550806008600085815260200190815260200160002081905550505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a8e2a38b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8891906122fc565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600060046000838152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610d28611700565b73ffffffffffffffffffffffffffffffffffffffff1614610d75576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8181610d8182826117cc565b6004600084815260200190815260200160002054600560008581526020019081526020016000205410610de0576040517f9907008b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166006600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610eb8576040517f646cf55800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6005600084815260200190815260200160002060008154610ed890612329565b9190508190555060006040518060a0016040528060016003811115610f0057610eff611ce4565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff16815260200160405180602001604052806000815250815260200160008152602001604051806020016040528060008152508152509050806006600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690836003811115610fce57610fcd611ce4565b5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600101908051906020019061103692919061191e565b5060608201518160020155608082015181600301908051906020019061105d92919061191e565b509050505050505050565b60006006600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16905092915050565b6110db6119a4565b6006600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820160009054906101000a900460ff16600381111561115b5761115a611ce4565b5b600381111561116d5761116c611ce4565b5b81526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546111d7906122b6565b80601f0160208091040260200160405190810160405280929190818152602001828054611203906122b6565b80156112505780601f1061122557610100808354040283529160200191611250565b820191906000526020600020905b81548152906001019060200180831161123357829003601f168201915b5050505050815260200160028201548152602001600382018054611273906122b6565b80601f016020809104026020016040519081016040528092919081815260200182805461129f906122b6565b80156112ec5780601f106112c1576101008083540402835291602001916112ec565b820191906000526020600020905b8154815290600101906020018083116112cf57829003601f168201915b505050505081525050905092915050565b611305611700565b73ffffffffffffffffffffffffffffffffffffffff16611323610bce565b73ffffffffffffffffffffffffffffffffffffffff1614611379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137090612267565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60086020528060005260406000206000915090505481565b600060086000838152602001908152602001600020549050919050565b6113fa611700565b73ffffffffffffffffffffffffffffffffffffffff16611418610bce565b73ffffffffffffffffffffffffffffffffffffffff161461146e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146590612267565b60405180910390fd5b6001600381111561148257611481611ce4565b5b6006600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660038111156114f5576114f4611ce4565b5b1461152c576040517f54a0346a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81816006600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101919061158e9291906119fb565b5050505050565b61159d611700565b73ffffffffffffffffffffffffffffffffffffffff166115bb610bce565b73ffffffffffffffffffffffffffffffffffffffff1614611611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160890612267565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611680576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611677906123e3565b60405180910390fd5b61168981611708565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760205281600052604060002081815481106116ce57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b3073ffffffffffffffffffffffffffffffffffffffff1663cf55382c826040518263ffffffff1660e01b81526004016118059190611c32565b602060405180830381865afa158015611822573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118469190612418565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016118a19190611c89565b602060405180830381865afa1580156118be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e29190612418565b101561191a576040517f22bbb43c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b82805461192a906122b6565b90600052602060002090601f01602090048101928261194c5760008555611993565b82601f1061196557805160ff1916838001178555611993565b82800160010185558215611993579182015b82811115611992578251825591602001919060010190611977565b5b5090506119a09190611a81565b5090565b6040518060a00160405280600060038111156119c3576119c2611ce4565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001606081525090565b828054611a07906122b6565b90600052602060002090601f016020900481019282611a295760008555611a70565b82601f10611a4257803560ff1916838001178555611a70565b82800160010185558215611a70579182015b82811115611a6f578235825591602001919060010190611a54565b5b509050611a7d9190611a81565b5090565b5b80821115611a9a576000816000905550600101611a82565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611ae3611ade611ad984611a9e565b611abe565b611a9e565b9050919050565b6000611af582611ac8565b9050919050565b6000611b0782611aea565b9050919050565b611b1781611afc565b82525050565b6000602082019050611b326000830184611b0e565b92915050565b600080fd5b600080fd5b6000611b4d82611a9e565b9050919050565b611b5d81611b42565b8114611b6857600080fd5b50565b600081359050611b7a81611b54565b92915050565b6000819050919050565b611b9381611b80565b8114611b9e57600080fd5b50565b600081359050611bb081611b8a565b92915050565b60008060408385031215611bcd57611bcc611b38565b5b6000611bdb85828601611b6b565b9250506020611bec85828601611ba1565b9150509250929050565b600060208284031215611c0c57611c0b611b38565b5b6000611c1a84828501611ba1565b91505092915050565b611c2c81611b80565b82525050565b6000602082019050611c476000830184611c23565b92915050565b600060208284031215611c6357611c62611b38565b5b6000611c7184828501611b6b565b91505092915050565b611c8381611b42565b82525050565b6000602082019050611c9e6000830184611c7a565b92915050565b60008060408385031215611cbb57611cba611b38565b5b6000611cc985828601611ba1565b9250506020611cda85828601611b6b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611d2457611d23611ce4565b5b50565b6000819050611d3582611d13565b919050565b6000611d4582611d27565b9050919050565b611d5581611d3a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d95578082015181840152602081019050611d7a565b83811115611da4576000848401525b50505050565b6000601f19601f8301169050919050565b6000611dc682611d5b565b611dd08185611d66565b9350611de0818560208601611d77565b611de981611daa565b840191505092915050565b600060a082019050611e096000830188611d4c565b611e166020830187611c7a565b8181036040830152611e288186611dbb565b9050611e376060830185611c23565b8181036080830152611e498184611dbb565b90509695505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611e8a81611b42565b82525050565b6000611e9c8383611e81565b60208301905092915050565b6000602082019050919050565b6000611ec082611e55565b611eca8185611e60565b9350611ed583611e71565b8060005b83811015611f06578151611eed8882611e90565b9750611ef883611ea8565b925050600181019050611ed9565b5085935050505092915050565b60006020820190508181036000830152611f2d8184611eb5565b905092915050565b600080600060608486031215611f4e57611f4d611b38565b5b6000611f5c86828701611ba1565b9350506020611f6d86828701611ba1565b9250506040611f7e86828701611ba1565b9150509250925092565b6000602082019050611f9d6000830184611d4c565b92915050565b611fac81611d3a565b82525050565b600082825260208201905092915050565b6000611fce82611d5b565b611fd88185611fb2565b9350611fe8818560208601611d77565b611ff181611daa565b840191505092915050565b61200581611b80565b82525050565b600060a0830160008301516120236000860182611fa3565b5060208301516120366020860182611e81565b506040830151848203604086015261204e8282611fc3565b91505060608301516120636060860182611ffc565b506080830151848203608086015261207b8282611fc3565b9150508091505092915050565b600060208201905081810360008301526120a2818461200b565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126120cf576120ce6120aa565b5b8235905067ffffffffffffffff8111156120ec576120eb6120af565b5b602083019150836001820283011115612108576121076120b4565b5b9250929050565b6000806000806060858703121561212957612128611b38565b5b600061213787828801611b6b565b945050602061214887828801611ba1565b935050604085013567ffffffffffffffff81111561216957612168611b3d565b5b612175878288016120b9565b925092505092959194509250565b6000806040838503121561219a57612199611b38565b5b60006121a885828601611ba1565b92505060206121b985828601611ba1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121fd82611b80565b9150600082036122105761220f6121c3565b5b600182039050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612251602083611d66565b915061225c8261221b565b602082019050919050565b6000602082019050818103600083015261228081612244565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806122ce57607f821691505b6020821081036122e1576122e0612287565b5b50919050565b6000815190506122f681611b54565b92915050565b60006020828403121561231257612311611b38565b5b6000612320848285016122e7565b91505092915050565b600061233482611b80565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612366576123656121c3565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006123cd602683611d66565b91506123d882612371565b604082019050919050565b600060208201905081810360008301526123fc816123c0565b9050919050565b60008151905061241281611b8a565b92915050565b60006020828403121561242e5761242d611b38565b5b600061243c84828501612403565b9150509291505056fea26469706673582212201a1d113c7e2111d49fc9d2242f6058990ec3dabc6adcc65d66525493db01ca1e64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063942e8b13116100c3578063ca35bf931161007c578063ca35bf93146103a0578063cf55382c146103d0578063de9951a614610400578063f2fde38b1461041c578063f32626cf14610438578063f894160e146104565761014d565b8063942e8b13146102ce578063a461272b146102d8578063aad3ec9614610308578063b92e274a14610324578063bdb686de14610354578063c0875dfd146103845761014d565b80636e3c4dd7116101155780636e3c4dd7146101f6578063715018a6146102265780637dfca71c14610230578063888af91d1461026457806389488e55146102945780638da5cb5b146102b05761014d565b80633d5a71d514610152578063469724e1146101705780634e2f46291461018c5780634e88e130146101bc5780636baef497146101d8575b600080fd5b61015a610486565b6040516101679190611b1d565b60405180910390f35b61018a60048036038101906101859190611bb6565b6104ac565b005b6101a660048036038101906101a19190611bf6565b61074c565b6040516101b39190611c32565b60405180910390f35b6101d660048036038101906101d19190611c4d565b610764565b005b6101e0610824565b6040516101ed9190611c89565b60405180910390f35b610210600480360381019061020b9190611bf6565b61084a565b60405161021d9190611c32565b60405180910390f35b61022e610862565b005b61024a60048036038101906102459190611ca4565b6108ea565b60405161025b959493929190611df4565b60405180910390f35b61027e60048036038101906102799190611bf6565b610a6a565b60405161028b9190611f13565b60405180910390f35b6102ae60048036038101906102a99190611f35565b610b0b565b005b6102b8610bce565b6040516102c59190611c89565b60405180910390f35b6102d6610bf7565b005b6102f260048036038101906102ed9190611bf6565b610cca565b6040516102ff9190611c32565b60405180910390f35b610322600480360381019061031d9190611bb6565b610ce7565b005b61033e60048036038101906103399190611ca4565b611068565b60405161034b9190611f88565b60405180910390f35b61036e60048036038101906103699190611ca4565b6110d3565b60405161037b9190612088565b60405180910390f35b61039e60048036038101906103999190611c4d565b6112fd565b005b6103ba60048036038101906103b59190611bf6565b6113bd565b6040516103c79190611c32565b60405180910390f35b6103ea60048036038101906103e59190611bf6565b6113d5565b6040516103f79190611c32565b60405180910390f35b61041a6004803603810190610415919061210f565b6113f2565b005b61043660048036038101906104319190611c4d565b611595565b005b61044061168c565b60405161044d9190611c89565b60405180910390f35b610470600480360381019061046b9190612183565b6116b2565b60405161047d9190611c89565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166104ed611700565b73ffffffffffffffffffffffffffffffffffffffff161461053a576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610612576040517f70d169c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026006600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083600381111561068957610688611ce4565b5b021790555060006006600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506005600082815260200190815260200160002060008154610741906121f2565b919050819055505050565b60056020528060005260406000206000915090505481565b61076c611700565b73ffffffffffffffffffffffffffffffffffffffff1661078a610bce565b73ffffffffffffffffffffffffffffffffffffffff16146107e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d790612267565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915090505481565b61086a611700565b73ffffffffffffffffffffffffffffffffffffffff16610888610bce565b73ffffffffffffffffffffffffffffffffffffffff16146108de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d590612267565b60405180910390fd5b6108e86000611708565b565b6006602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054610953906122b6565b80601f016020809104026020016040519081016040528092919081815260200182805461097f906122b6565b80156109cc5780601f106109a1576101008083540402835291602001916109cc565b820191906000526020600020905b8154815290600101906020018083116109af57829003601f168201915b5050505050908060020154908060030180546109e7906122b6565b80601f0160208091040260200160405190810160405280929190818152602001828054610a13906122b6565b8015610a605780601f10610a3557610100808354040283529160200191610a60565b820191906000526020600020905b815481529060010190602001808311610a4357829003601f168201915b5050505050905085565b606060076000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610aff57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ab5575b50505050509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b4c611700565b73ffffffffffffffffffffffffffffffffffffffff1614610b99576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816004600085815260200190815260200160002081905550806008600085815260200190815260200160002081905550505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a8e2a38b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8891906122fc565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600060046000838152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610d28611700565b73ffffffffffffffffffffffffffffffffffffffff1614610d75576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8181610d8182826117cc565b6004600084815260200190815260200160002054600560008581526020019081526020016000205410610de0576040517f9907008b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166006600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610eb8576040517f646cf55800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6005600084815260200190815260200160002060008154610ed890612329565b9190508190555060006040518060a0016040528060016003811115610f0057610eff611ce4565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff16815260200160405180602001604052806000815250815260200160008152602001604051806020016040528060008152508152509050806006600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690836003811115610fce57610fcd611ce4565b5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600101908051906020019061103692919061191e565b5060608201518160020155608082015181600301908051906020019061105d92919061191e565b509050505050505050565b60006006600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16905092915050565b6110db6119a4565b6006600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820160009054906101000a900460ff16600381111561115b5761115a611ce4565b5b600381111561116d5761116c611ce4565b5b81526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546111d7906122b6565b80601f0160208091040260200160405190810160405280929190818152602001828054611203906122b6565b80156112505780601f1061122557610100808354040283529160200191611250565b820191906000526020600020905b81548152906001019060200180831161123357829003601f168201915b5050505050815260200160028201548152602001600382018054611273906122b6565b80601f016020809104026020016040519081016040528092919081815260200182805461129f906122b6565b80156112ec5780601f106112c1576101008083540402835291602001916112ec565b820191906000526020600020905b8154815290600101906020018083116112cf57829003601f168201915b505050505081525050905092915050565b611305611700565b73ffffffffffffffffffffffffffffffffffffffff16611323610bce565b73ffffffffffffffffffffffffffffffffffffffff1614611379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137090612267565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60086020528060005260406000206000915090505481565b600060086000838152602001908152602001600020549050919050565b6113fa611700565b73ffffffffffffffffffffffffffffffffffffffff16611418610bce565b73ffffffffffffffffffffffffffffffffffffffff161461146e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146590612267565b60405180910390fd5b6001600381111561148257611481611ce4565b5b6006600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660038111156114f5576114f4611ce4565b5b1461152c576040517f54a0346a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81816006600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101919061158e9291906119fb565b5050505050565b61159d611700565b73ffffffffffffffffffffffffffffffffffffffff166115bb610bce565b73ffffffffffffffffffffffffffffffffffffffff1614611611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160890612267565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611680576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611677906123e3565b60405180910390fd5b61168981611708565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760205281600052604060002081815481106116ce57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b3073ffffffffffffffffffffffffffffffffffffffff1663cf55382c826040518263ffffffff1660e01b81526004016118059190611c32565b602060405180830381865afa158015611822573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118469190612418565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016118a19190611c89565b602060405180830381865afa1580156118be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e29190612418565b101561191a576040517f22bbb43c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b82805461192a906122b6565b90600052602060002090601f01602090048101928261194c5760008555611993565b82601f1061196557805160ff1916838001178555611993565b82800160010185558215611993579182015b82811115611992578251825591602001919060010190611977565b5b5090506119a09190611a81565b5090565b6040518060a00160405280600060038111156119c3576119c2611ce4565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001606081525090565b828054611a07906122b6565b90600052602060002090601f016020900481019282611a295760008555611a70565b82601f10611a4257803560ff1916838001178555611a70565b82800160010185558215611a70579182015b82811115611a6f578235825591602001919060010190611a54565b5b509050611a7d9190611a81565b5090565b5b80821115611a9a576000816000905550600101611a82565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611ae3611ade611ad984611a9e565b611abe565b611a9e565b9050919050565b6000611af582611ac8565b9050919050565b6000611b0782611aea565b9050919050565b611b1781611afc565b82525050565b6000602082019050611b326000830184611b0e565b92915050565b600080fd5b600080fd5b6000611b4d82611a9e565b9050919050565b611b5d81611b42565b8114611b6857600080fd5b50565b600081359050611b7a81611b54565b92915050565b6000819050919050565b611b9381611b80565b8114611b9e57600080fd5b50565b600081359050611bb081611b8a565b92915050565b60008060408385031215611bcd57611bcc611b38565b5b6000611bdb85828601611b6b565b9250506020611bec85828601611ba1565b9150509250929050565b600060208284031215611c0c57611c0b611b38565b5b6000611c1a84828501611ba1565b91505092915050565b611c2c81611b80565b82525050565b6000602082019050611c476000830184611c23565b92915050565b600060208284031215611c6357611c62611b38565b5b6000611c7184828501611b6b565b91505092915050565b611c8381611b42565b82525050565b6000602082019050611c9e6000830184611c7a565b92915050565b60008060408385031215611cbb57611cba611b38565b5b6000611cc985828601611ba1565b9250506020611cda85828601611b6b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611d2457611d23611ce4565b5b50565b6000819050611d3582611d13565b919050565b6000611d4582611d27565b9050919050565b611d5581611d3a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d95578082015181840152602081019050611d7a565b83811115611da4576000848401525b50505050565b6000601f19601f8301169050919050565b6000611dc682611d5b565b611dd08185611d66565b9350611de0818560208601611d77565b611de981611daa565b840191505092915050565b600060a082019050611e096000830188611d4c565b611e166020830187611c7a565b8181036040830152611e288186611dbb565b9050611e376060830185611c23565b8181036080830152611e498184611dbb565b90509695505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611e8a81611b42565b82525050565b6000611e9c8383611e81565b60208301905092915050565b6000602082019050919050565b6000611ec082611e55565b611eca8185611e60565b9350611ed583611e71565b8060005b83811015611f06578151611eed8882611e90565b9750611ef883611ea8565b925050600181019050611ed9565b5085935050505092915050565b60006020820190508181036000830152611f2d8184611eb5565b905092915050565b600080600060608486031215611f4e57611f4d611b38565b5b6000611f5c86828701611ba1565b9350506020611f6d86828701611ba1565b9250506040611f7e86828701611ba1565b9150509250925092565b6000602082019050611f9d6000830184611d4c565b92915050565b611fac81611d3a565b82525050565b600082825260208201905092915050565b6000611fce82611d5b565b611fd88185611fb2565b9350611fe8818560208601611d77565b611ff181611daa565b840191505092915050565b61200581611b80565b82525050565b600060a0830160008301516120236000860182611fa3565b5060208301516120366020860182611e81565b506040830151848203604086015261204e8282611fc3565b91505060608301516120636060860182611ffc565b506080830151848203608086015261207b8282611fc3565b9150508091505092915050565b600060208201905081810360008301526120a2818461200b565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126120cf576120ce6120aa565b5b8235905067ffffffffffffffff8111156120ec576120eb6120af565b5b602083019150836001820283011115612108576121076120b4565b5b9250929050565b6000806000806060858703121561212957612128611b38565b5b600061213787828801611b6b565b945050602061214887828801611ba1565b935050604085013567ffffffffffffffff81111561216957612168611b3d565b5b612175878288016120b9565b925092505092959194509250565b6000806040838503121561219a57612199611b38565b5b60006121a885828601611ba1565b92505060206121b985828601611ba1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121fd82611b80565b9150600082036122105761220f6121c3565b5b600182039050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612251602083611d66565b915061225c8261221b565b602082019050919050565b6000602082019050818103600083015261228081612244565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806122ce57607f821691505b6020821081036122e1576122e0612287565b5b50919050565b6000815190506122f681611b54565b92915050565b60006020828403121561231257612311611b38565b5b6000612320848285016122e7565b91505092915050565b600061233482611b80565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612366576123656121c3565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006123cd602683611d66565b91506123d882612371565b604082019050919050565b600060208201905081810360008301526123fc816123c0565b9050919050565b60008151905061241281611b8a565b92915050565b60006020828403121561242e5761242d611b38565b5b600061243c84828501612403565b9150509291505056fea26469706673582212201a1d113c7e2111d49fc9d2242f6058990ec3dabc6adcc65d66525493db01ca1e64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initializeQuestion(uint256,uint256,uint256)": {
        "params": {
          "claimLimit": "The limit for the amount of people that can claim the question",
          "questionId": "The id of the question",
          "threshold": "The METRIC holding threshold required to claim the question."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setQuestionApi(address)": {
        "params": {
          "_newApi": "The new address of the question API."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AlreadyClaimed()": [
        {
          "notice": "Throw if analyst tries to claim a question multiple times"
        }
      ],
      "ClaimLimitReached()": [
        {
          "notice": "Throw if user tries to claim a question that is past its limit"
        }
      ],
      "NeedClaimToAnswer()": [
        {
          "notice": "Throw if a analyst tries to answer a question that it has not claimed"
        }
      ],
      "NoClaimToRelease()": [
        {
          "notice": "Throw if analyst tries to release a claim it did not claim"
        }
      ],
      "NotEnoughTokens()": [
        {
          "notice": "Throw if user tries to claim with balance lower than threshold"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "answers(uint256,address)": {
        "notice": "maps answers to the question they belong to"
      },
      "claimCounts(uint256)": {
        "notice": "Keeps track of claim counts per question"
      },
      "claimLimits(uint256)": {
        "notice": "Keeps track of claim limits per question"
      },
      "claims(uint256,uint256)": {
        "notice": "maps all claimers to a question"
      },
      "initializeQuestion(uint256,uint256,uint256)": {
        "notice": "Initializes a question to receive claims"
      },
      "metricThresholds(uint256)": {
        "notice": "Maps the metric token threshold to a question"
      },
      "setQuestionApi(address)": {
        "notice": "Sets the address of the question API."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6829,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "questionApi",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6972,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "metricToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6975,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "questionAPI",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IQuestionAPI)6628"
      },
      {
        "astId": 3806,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "claimLimits",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3811,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "claimCounts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3819,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "answers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Answer)5732_storage))"
      },
      {
        "astId": 3825,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "claims",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3830,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "metricThresholds",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IQuestionAPI)6628": {
        "encoding": "inplace",
        "label": "contract IQuestionAPI",
        "numberOfBytes": "20"
      },
      "t_enum(CLAIM_STATE)4091": {
        "encoding": "inplace",
        "label": "enum CLAIM_STATE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Answer)5732_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Answer)",
        "numberOfBytes": "32",
        "value": "t_struct(Answer)5732_storage"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Answer)5732_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct Answer))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Answer)5732_storage)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Answer)5732_storage": {
        "encoding": "inplace",
        "label": "struct Answer",
        "members": [
          {
            "astId": 5723,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(CLAIM_STATE)4091"
          },
          {
            "astId": 5725,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "author",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5727,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "answerURL",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 5729,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "finalGrade",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5731,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "scoringMetaDataURI",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}