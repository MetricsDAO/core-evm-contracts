{
  "address": "0xb724A8bF82010E2AE526226bD7Afd55afcF49b6A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotTheApi",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum ACTION",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "actionCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ACTION",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "actionStage",
      "outputs": [
        {
          "internalType": "enum STAGE",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "enum ACTION",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "burnForAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ACTION",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "getActionCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "enum ACTION",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "payForAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionApi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ACTION",
          "name": "action",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "name": "setActionCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newApi",
          "type": "address"
        }
      ],
      "name": "setQuestionApi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xab7c4f0be46e187c80d7b37759e4a0e716b043508ed4389845c9436472b5476c",
  "receipt": {
    "to": null,
    "from": "0x0F7494eE0831529fD676ADbc234f858e280AeAF0",
    "contractAddress": "0xb724A8bF82010E2AE526226bD7Afd55afcF49b6A",
    "transactionIndex": 31,
    "gasUsed": "1009683",
    "logsBloom": "0x
    "blockHash": "0xdcfaed17d97b84d5329b0e090811453b3767490666f61d1dc4d0ba5fa87ab874",
    "transactionHash": "0xab7c4f0be46e187c80d7b37759e4a0e716b043508ed4389845c9436472b5476c",
    "logs": [
      {
        "transactionIndex": 31,
        "blockNumber": 7603835,
        "transactionHash": "0xab7c4f0be46e187c80d7b37759e4a0e716b043508ed4389845c9436472b5476c",
        "address": "0xb724A8bF82010E2AE526226bD7Afd55afcF49b6A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f7494ee0831529fd676adbc234f858e280aeaf0"
        ],
        "data": "0x",
        "logIndex": 67,
        "blockHash": "0xdcfaed17d97b84d5329b0e090811453b3767490666f61d1dc4d0ba5fa87ab874"
      }
    ],
    "blockNumber": 7603835,
    "cumulativeGasUsed": "8754013",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA0b67CA0A36834BDf412f24744FAbee16F2FAcA2"
  ],
  "numDeployments": 1,
  "solcInputHash": "47b64a1bc1e11d0d714fb3e2e194e242",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotTheApi\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum ACTION\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"actionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ACTION\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"actionStage\",\"outputs\":[{\"internalType\":\"enum STAGE\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"enum ACTION\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"burnForAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ACTION\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"getActionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"enum ACTION\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"payForAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionApi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ACTION\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"setActionCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newApi\",\"type\":\"address\"}],\"name\":\"setQuestionApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setActionCost(uint8,uint256)\":{\"params\":{\"cost\":\"The new cost of creating a question\"}},\"setQuestionApi(address)\":{\"params\":{\"_newApi\":\"The new address of the question API.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setActionCost(uint8,uint256)\":{\"notice\":\"Changes the cost of creating a question\"},\"setQuestionApi(address)\":{\"notice\":\"Sets the address of the question API.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/ActionCostController.sol\":\"ActionCostController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/Protocol/ActionCostController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Interfaces\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IActionCostController} from \\\"./interfaces/IActionCostController.sol\\\";\\nimport {IVault} from \\\"./interfaces/IVault.sol\\\";\\n\\n// Enums\\nimport {STAGE} from \\\"./Enums/VaultEnum.sol\\\";\\nimport {ACTION} from \\\"./Enums/ActionEnum.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\ncontract ActionCostController is Ownable, OnlyApi, IActionCostController {\\n    IVault private _vault;\\n\\n    mapping(ACTION => uint256) public actionCost;\\n    mapping(ACTION => STAGE) public actionStage;\\n\\n    //------------------------------------------------------ CONSTRUCTOR\\n    constructor(address vault) {\\n        _vault = IVault(vault);\\n\\n        actionCost[ACTION.CREATE] = 1e18;\\n        actionCost[ACTION.VOTE] = 1e18;\\n        actionCost[ACTION.CLAIM] = 1e18;\\n        actionCost[ACTION.CHALLENGE_BURN] = 1000e18;\\n\\n        actionStage[ACTION.CREATE] = STAGE.CREATE_AND_VOTE;\\n        actionStage[ACTION.VOTE] = STAGE.CREATE_AND_VOTE;\\n        actionStage[ACTION.CLAIM] = STAGE.CLAIM_AND_ANSWER;\\n    }\\n\\n    // ------------------------------------------------------ FUNCTIONS\\n\\n    function payForAction(\\n        address _user,\\n        uint256 questionId,\\n        ACTION action\\n    ) external onlyApi {\\n        _vault.lockMetric(_user, actionCost[action], questionId, actionStage[action]);\\n    }\\n\\n    function burnForAction(address _user, ACTION action) external onlyApi {\\n        _vault.burnMetric(_user, actionCost[action]);\\n    }\\n\\n    // ------------------------------------------------------ VIEW FUNCTIONS\\n\\n    function getActionCost(ACTION action) public view returns (uint256) {\\n        return actionCost[action];\\n    }\\n\\n    //------------------------------------------------------ OWNER FUNCTIONS\\n\\n    /**\\n     * @notice Changes the cost of creating a question\\n     * @param cost The new cost of creating a question\\n     */\\n    function setActionCost(ACTION action, uint256 cost) external onlyOwner {\\n        actionCost[action] = cost;\\n    }\\n}\\n\",\"keccak256\":\"0x7efd3889045f0581cd1c2c714bcb6cb4b1cc98e9116110d97b5719c528a9cd06\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/ActionEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum ACTION {\\n    CREATE,\\n    VOTE,\\n    CLAIM,\\n    CHALLENGE_BURN\\n}\\n\",\"keccak256\":\"0x580118b7f79d541fcb1e9ee09b4f145a5fc269843245cbb517912329ca2a8589\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/VaultEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum STAGE {\\n    CREATE_AND_VOTE,\\n    UNVOTE,\\n    CLAIM_AND_ANSWER,\\n    RELEASE_CLAIM,\\n    REVIEW\\n}\\n\\nenum STATUS {\\n    UNINT,\\n    DEPOSITED,\\n    WITHDRAWN,\\n    SLASHED\\n}\\n\",\"keccak256\":\"0x1d96c2cfb960bcdad5245263ab395222413b31c448bed38e1de19ce6f46244c8\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IActionCostController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Enums/ActionEnum.sol\\\";\\n\\ninterface IActionCostController {\\n    function setActionCost(ACTION action, uint256 cost) external;\\n\\n    function payForAction(\\n        address _user,\\n        uint256 questionId,\\n        ACTION action\\n    ) external;\\n\\n    function burnForAction(address _user, ACTION action) external;\\n}\\n\",\"keccak256\":\"0x75d66ee6c74944d68dea615778c4425862bcd65a63f390e3a394071d61450dac\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Enums/VaultEnum.sol\\\";\\n\\ninterface IVault {\\n    function withdrawMetric(\\n        address user,\\n        uint256 questionId,\\n        STAGE stage\\n    ) external;\\n\\n    function lockMetric(\\n        address user,\\n        uint256 amount,\\n        uint256 questionId,\\n        STAGE stage\\n    ) external;\\n\\n    function burnMetric(address user, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x275584d4e9332e3fc4ce22c2aeb2172222fc85eb0f27d240898c3f7d3f330438\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620012ca380380620012ca83398181016040528101906200003791906200043d565b620000576200004b6200030760201b60201c565b6200030f60201b60201c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a764000060036000806003811115620000bb57620000ba6200046f565b5b6003811115620000d057620000cf6200046f565b5b815260200190815260200160002081905550670de0b6b3a764000060036000600160038111156200010657620001056200046f565b5b60038111156200011b576200011a6200046f565b5b815260200190815260200160002081905550670de0b6b3a764000060036000600260038111156200015157620001506200046f565b5b60038111156200016657620001656200046f565b5b815260200190815260200160002081905550683635c9adc5dea00000600360006003808111156200019c576200019b6200046f565b5b6003811115620001b157620001b06200046f565b5b815260200190815260200160002081905550600060046000806003811115620001df57620001de6200046f565b5b6003811115620001f457620001f36200046f565b5b815260200190815260200160002060006101000a81548160ff021916908360048111156200022757620002266200046f565b5b0217905550600060046000600160038111156200024957620002486200046f565b5b60038111156200025e576200025d6200046f565b5b815260200190815260200160002060006101000a81548160ff021916908360048111156200029157620002906200046f565b5b021790555060026004600060026003811115620002b357620002b26200046f565b5b6003811115620002c857620002c76200046f565b5b815260200190815260200160002060006101000a81548160ff02191690836004811115620002fb57620002fa6200046f565b5b0217905550506200049e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200040582620003d8565b9050919050565b6200041781620003f8565b81146200042357600080fd5b50565b60008151905062000437816200040c565b92915050565b600060208284031215620004565762000455620003d3565b5b6000620004668482850162000426565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610e1c80620004ae6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a61461016457806377b696471461016e5780638da5cb5b1461018a578063c0875dfd146101a8578063d9eecddf146101c4578063f2fde38b146101f4576100a9565b8063099ef7d7146100ae578063101a6181146100de5780631956f19c146100fa5780631d67644d1461012a5780636baef49714610146575b600080fd5b6100c860048036038101906100c391906109c2565b610210565b6040516100d59190610a08565b60405180910390f35b6100f860048036038101906100f39190610a4f565b610251565b005b610114600480360381019061010f91906109c2565b61030d565b6040516101219190610b06565b60405180910390f35b610144600480360381019061013f9190610b7f565b61032d565b005b61014e6104ce565b60405161015b9190610be1565b60405180910390f35b61016c6104f4565b005b61018860048036038101906101839190610bfc565b61057c565b005b6101926106d4565b60405161019f9190610be1565b60405180910390f35b6101c260048036038101906101bd9190610c3c565b6106fd565b005b6101de60048036038101906101d991906109c2565b6107bd565b6040516101eb9190610a08565b60405180910390f35b61020e60048036038101906102099190610c3c565b6107d5565b005b60006003600083600381111561022957610228610a8f565b5b600381111561023b5761023a610a8f565b5b8152602001908152602001600020549050919050565b6102596108cc565b73ffffffffffffffffffffffffffffffffffffffff166102776106d4565b73ffffffffffffffffffffffffffffffffffffffff16146102cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c490610cc6565b60405180910390fd5b80600360008460038111156102e5576102e4610a8f565b5b60038111156102f7576102f6610a8f565b5b8152602001908152602001600020819055505050565b60046020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661036e6108cc565b73ffffffffffffffffffffffffffffffffffffffff16146103bb576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b2cb2d6f846003600085600381111561041157610410610a8f565b5b600381111561042357610422610a8f565b5b815260200190815260200160002054856004600087600381111561044a57610449610a8f565b5b600381111561045c5761045b610a8f565b5b815260200190815260200160002060009054906101000a900460ff166040518563ffffffff1660e01b81526004016104979493929190610ce6565b600060405180830381600087803b1580156104b157600080fd5b505af11580156104c5573d6000803e3d6000fd5b50505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104fc6108cc565b73ffffffffffffffffffffffffffffffffffffffff1661051a6106d4565b73ffffffffffffffffffffffffffffffffffffffff1614610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056790610cc6565b60405180910390fd5b61057a60006108d4565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166105bd6108cc565b73ffffffffffffffffffffffffffffffffffffffff161461060a576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd6869c483600360008560038111156106605761065f610a8f565b5b600381111561067257610671610a8f565b5b8152602001908152602001600020546040518363ffffffff1660e01b815260040161069e929190610d2b565b600060405180830381600087803b1580156106b857600080fd5b505af11580156106cc573d6000803e3d6000fd5b505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6107056108cc565b73ffffffffffffffffffffffffffffffffffffffff166107236106d4565b73ffffffffffffffffffffffffffffffffffffffff1614610779576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077090610cc6565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60036020528060005260406000206000915090505481565b6107dd6108cc565b73ffffffffffffffffffffffffffffffffffffffff166107fb6106d4565b73ffffffffffffffffffffffffffffffffffffffff1614610851576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084890610cc6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b790610dc6565b60405180910390fd5b6108c9816108d4565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600481106109aa57600080fd5b50565b6000813590506109bc8161099d565b92915050565b6000602082840312156109d8576109d7610998565b5b60006109e6848285016109ad565b91505092915050565b6000819050919050565b610a02816109ef565b82525050565b6000602082019050610a1d60008301846109f9565b92915050565b610a2c816109ef565b8114610a3757600080fd5b50565b600081359050610a4981610a23565b92915050565b60008060408385031215610a6657610a65610998565b5b6000610a74858286016109ad565b9250506020610a8585828601610a3a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110610acf57610ace610a8f565b5b50565b6000819050610ae082610abe565b919050565b6000610af082610ad2565b9050919050565b610b0081610ae5565b82525050565b6000602082019050610b1b6000830184610af7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b4c82610b21565b9050919050565b610b5c81610b41565b8114610b6757600080fd5b50565b600081359050610b7981610b53565b92915050565b600080600060608486031215610b9857610b97610998565b5b6000610ba686828701610b6a565b9350506020610bb786828701610a3a565b9250506040610bc8868287016109ad565b9150509250925092565b610bdb81610b41565b82525050565b6000602082019050610bf66000830184610bd2565b92915050565b60008060408385031215610c1357610c12610998565b5b6000610c2185828601610b6a565b9250506020610c32858286016109ad565b9150509250929050565b600060208284031215610c5257610c51610998565b5b6000610c6084828501610b6a565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610cb0602083610c69565b9150610cbb82610c7a565b602082019050919050565b60006020820190508181036000830152610cdf81610ca3565b9050919050565b6000608082019050610cfb6000830187610bd2565b610d0860208301866109f9565b610d1560408301856109f9565b610d226060830184610af7565b95945050505050565b6000604082019050610d406000830185610bd2565b610d4d60208301846109f9565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610db0602683610c69565b9150610dbb82610d54565b604082019050919050565b60006020820190508181036000830152610ddf81610da3565b905091905056fea2646970667358221220705e7700c03a1935120a10891b53efbb8426b20bdf1d31ee3304f2609e307e0064736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a61461016457806377b696471461016e5780638da5cb5b1461018a578063c0875dfd146101a8578063d9eecddf146101c4578063f2fde38b146101f4576100a9565b8063099ef7d7146100ae578063101a6181146100de5780631956f19c146100fa5780631d67644d1461012a5780636baef49714610146575b600080fd5b6100c860048036038101906100c391906109c2565b610210565b6040516100d59190610a08565b60405180910390f35b6100f860048036038101906100f39190610a4f565b610251565b005b610114600480360381019061010f91906109c2565b61030d565b6040516101219190610b06565b60405180910390f35b610144600480360381019061013f9190610b7f565b61032d565b005b61014e6104ce565b60405161015b9190610be1565b60405180910390f35b61016c6104f4565b005b61018860048036038101906101839190610bfc565b61057c565b005b6101926106d4565b60405161019f9190610be1565b60405180910390f35b6101c260048036038101906101bd9190610c3c565b6106fd565b005b6101de60048036038101906101d991906109c2565b6107bd565b6040516101eb9190610a08565b60405180910390f35b61020e60048036038101906102099190610c3c565b6107d5565b005b60006003600083600381111561022957610228610a8f565b5b600381111561023b5761023a610a8f565b5b8152602001908152602001600020549050919050565b6102596108cc565b73ffffffffffffffffffffffffffffffffffffffff166102776106d4565b73ffffffffffffffffffffffffffffffffffffffff16146102cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c490610cc6565b60405180910390fd5b80600360008460038111156102e5576102e4610a8f565b5b60038111156102f7576102f6610a8f565b5b8152602001908152602001600020819055505050565b60046020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661036e6108cc565b73ffffffffffffffffffffffffffffffffffffffff16146103bb576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b2cb2d6f846003600085600381111561041157610410610a8f565b5b600381111561042357610422610a8f565b5b815260200190815260200160002054856004600087600381111561044a57610449610a8f565b5b600381111561045c5761045b610a8f565b5b815260200190815260200160002060009054906101000a900460ff166040518563ffffffff1660e01b81526004016104979493929190610ce6565b600060405180830381600087803b1580156104b157600080fd5b505af11580156104c5573d6000803e3d6000fd5b50505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104fc6108cc565b73ffffffffffffffffffffffffffffffffffffffff1661051a6106d4565b73ffffffffffffffffffffffffffffffffffffffff1614610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056790610cc6565b60405180910390fd5b61057a60006108d4565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166105bd6108cc565b73ffffffffffffffffffffffffffffffffffffffff161461060a576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd6869c483600360008560038111156106605761065f610a8f565b5b600381111561067257610671610a8f565b5b8152602001908152602001600020546040518363ffffffff1660e01b815260040161069e929190610d2b565b600060405180830381600087803b1580156106b857600080fd5b505af11580156106cc573d6000803e3d6000fd5b505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6107056108cc565b73ffffffffffffffffffffffffffffffffffffffff166107236106d4565b73ffffffffffffffffffffffffffffffffffffffff1614610779576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077090610cc6565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60036020528060005260406000206000915090505481565b6107dd6108cc565b73ffffffffffffffffffffffffffffffffffffffff166107fb6106d4565b73ffffffffffffffffffffffffffffffffffffffff1614610851576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084890610cc6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b790610dc6565b60405180910390fd5b6108c9816108d4565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600481106109aa57600080fd5b50565b6000813590506109bc8161099d565b92915050565b6000602082840312156109d8576109d7610998565b5b60006109e6848285016109ad565b91505092915050565b6000819050919050565b610a02816109ef565b82525050565b6000602082019050610a1d60008301846109f9565b92915050565b610a2c816109ef565b8114610a3757600080fd5b50565b600081359050610a4981610a23565b92915050565b60008060408385031215610a6657610a65610998565b5b6000610a74858286016109ad565b9250506020610a8585828601610a3a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110610acf57610ace610a8f565b5b50565b6000819050610ae082610abe565b919050565b6000610af082610ad2565b9050919050565b610b0081610ae5565b82525050565b6000602082019050610b1b6000830184610af7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b4c82610b21565b9050919050565b610b5c81610b41565b8114610b6757600080fd5b50565b600081359050610b7981610b53565b92915050565b600080600060608486031215610b9857610b97610998565b5b6000610ba686828701610b6a565b9350506020610bb786828701610a3a565b9250506040610bc8868287016109ad565b9150509250925092565b610bdb81610b41565b82525050565b6000602082019050610bf66000830184610bd2565b92915050565b60008060408385031215610c1357610c12610998565b5b6000610c2185828601610b6a565b9250506020610c32858286016109ad565b9150509250929050565b600060208284031215610c5257610c51610998565b5b6000610c6084828501610b6a565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610cb0602083610c69565b9150610cbb82610c7a565b602082019050919050565b60006020820190508181036000830152610cdf81610ca3565b9050919050565b6000608082019050610cfb6000830187610bd2565b610d0860208301866109f9565b610d1560408301856109f9565b610d226060830184610af7565b95945050505050565b6000604082019050610d406000830185610bd2565b610d4d60208301846109f9565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610db0602683610c69565b9150610dbb82610d54565b604082019050919050565b60006020820190508181036000830152610ddf81610da3565b905091905056fea2646970667358221220705e7700c03a1935120a10891b53efbb8426b20bdf1d31ee3304f2609e307e0064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setActionCost(uint8,uint256)": {
        "params": {
          "cost": "The new cost of creating a question"
        }
      },
      "setQuestionApi(address)": {
        "params": {
          "_newApi": "The new address of the question API."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setActionCost(uint8,uint256)": {
        "notice": "Changes the cost of creating a question"
      },
      "setQuestionApi(address)": {
        "notice": "Sets the address of the question API."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/ActionCostController.sol:ActionCostController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6829,
        "contract": "src/contracts/Protocol/ActionCostController.sol:ActionCostController",
        "label": "questionApi",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3390,
        "contract": "src/contracts/Protocol/ActionCostController.sol:ActionCostController",
        "label": "_vault",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IVault)6721"
      },
      {
        "astId": 3395,
        "contract": "src/contracts/Protocol/ActionCostController.sol:ActionCostController",
        "label": "actionCost",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_enum(ACTION)4084,t_uint256)"
      },
      {
        "astId": 3401,
        "contract": "src/contracts/Protocol/ActionCostController.sol:ActionCostController",
        "label": "actionStage",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_enum(ACTION)4084,t_enum(STAGE)4108)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)6721": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_enum(ACTION)4084": {
        "encoding": "inplace",
        "label": "enum ACTION",
        "numberOfBytes": "1"
      },
      "t_enum(STAGE)4108": {
        "encoding": "inplace",
        "label": "enum STAGE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(ACTION)4084,t_enum(STAGE)4108)": {
        "encoding": "mapping",
        "key": "t_enum(ACTION)4084",
        "label": "mapping(enum ACTION => enum STAGE)",
        "numberOfBytes": "32",
        "value": "t_enum(STAGE)4108"
      },
      "t_mapping(t_enum(ACTION)4084,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(ACTION)4084",
        "label": "mapping(enum ACTION => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}