{
  "address": "0x647448403c19E8b6F792D5547013984c4e0BD6c3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "HasAlreadyVotedForQuestion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HasNotVotedForQuestion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStateTransition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheApi",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getHasUserVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum STATE",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getQuestions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalVotes",
              "type": "uint256"
            },
            {
              "internalType": "enum STATE",
              "name": "questionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct QuestionData[]",
          "name": "questions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum STATE",
          "name": "currentState",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "currentQuestionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getQuestionsByState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalVotes",
              "type": "uint256"
            },
            {
              "internalType": "enum STATE",
              "name": "questionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct QuestionData[]",
          "name": "found",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "internalType": "enum STATE",
          "name": "currentState",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getTotalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getVoters",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "initializeChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "initializeQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "publishFromChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "publishFromQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionApi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "questionIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "setDisqualifiedState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newApi",
          "type": "address"
        }
      ],
      "name": "setQuestionApi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "unvoteFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateBountyQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "voteFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x96d0d1553ebbfed39060471e2bec2a41f34871a5cd8f8a15fe92c7a96aaf52c6",
  "receipt": {
    "to": null,
    "from": "0x0F7494eE0831529fD676ADbc234f858e280AeAF0",
    "contractAddress": "0x647448403c19E8b6F792D5547013984c4e0BD6c3",
    "transactionIndex": 12,
    "gasUsed": "2458884",
    "logsBloom": "0x
    "blockHash": "0x473e7d71c5e926cb89bb9503e2e8a7c1bccc6ee659111ce9d9199afedf9721ce",
    "transactionHash": "0x96d0d1553ebbfed39060471e2bec2a41f34871a5cd8f8a15fe92c7a96aaf52c6",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 7603832,
        "transactionHash": "0x96d0d1553ebbfed39060471e2bec2a41f34871a5cd8f8a15fe92c7a96aaf52c6",
        "address": "0x647448403c19E8b6F792D5547013984c4e0BD6c3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f7494ee0831529fd676adbc234f858e280aeaf0"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x473e7d71c5e926cb89bb9503e2e8a7c1bccc6ee659111ce9d9199afedf9721ce"
      }
    ],
    "blockNumber": 7603832,
    "cumulativeGasUsed": "3730071",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "47b64a1bc1e11d0d714fb3e2e194e242",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"HasAlreadyVotedForQuestion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HasNotVotedForQuestion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStateTransition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheApi\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getHasUserVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum STATE\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getQuestions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"enum STATE\",\"name\":\"questionState\",\"type\":\"uint8\"}],\"internalType\":\"struct QuestionData[]\",\"name\":\"questions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum STATE\",\"name\":\"currentState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"currentQuestionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getQuestionsByState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"enum STATE\",\"name\":\"questionState\",\"type\":\"uint8\"}],\"internalType\":\"struct QuestionData[]\",\"name\":\"found\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum STATE\",\"name\":\"currentState\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getTotalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"initializeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"initializeQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"publishFromChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"publishFromQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionApi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"setDisqualifiedState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newApi\",\"type\":\"address\"}],\"name\":\"setQuestionApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"unvoteFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateBountyQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"voteFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initializeQuestion(uint256)\":{\"params\":{\"questionId\":\"The id of the question\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setQuestionApi(address)\":{\"params\":{\"_newApi\":\"The new address of the question API.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"HasNotVotedForQuestion()\":[{\"notice\":\"------------------------------------------------------ ERRORS\"}]},\"kind\":\"user\",\"methods\":{\"initializeQuestion(uint256)\":{\"notice\":\"Initializes a question to draft.\"},\"questionIndex(address,uint256)\":{\"notice\":\"For a given address and a given question, tracks the index of their vote in the votes[]\"},\"setQuestionApi(address)\":{\"notice\":\"Sets the address of the question API.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/QuestionStateController.sol\":\"QuestionStateController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/QuestionStateEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum STATE {\\n    UNINIT,\\n    VOTING,\\n    PENDING,\\n    PUBLISHED,\\n    DISQUALIFIED,\\n    COMPLETED\\n}\\n\",\"keccak256\":\"0x72cc784cc502713781c3079d528f57b2c0a3f1b21a93b5e8f490c3897be8f65e\",\"license\":\"MIT\"},\"src/contracts/Protocol/EventsAndErrors/StateEventsAndErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface StateEventsAndErrors {\\n    ///------------------------------------------------------ ERRORS\\n\\n    error HasNotVotedForQuestion();\\n    error HasAlreadyVotedForQuestion();\\n    error InvalidStateTransition();\\n    error InvalidAddress();\\n}\\n\",\"keccak256\":\"0xd3d7079bab3a1ddcc9cdf4d25d82ef41f0acdbb7863ca49acafd0170060f67b7\",\"license\":\"MIT\"},\"src/contracts/Protocol/QuestionStateController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Interfaces\\nimport {IBountyQuestion} from \\\"./interfaces/IBountyQuestion.sol\\\";\\nimport {IQuestionAPI} from \\\"./interfaces/IQuestionAPI.sol\\\";\\n\\n// Enums\\nimport {STATE} from \\\"./Enums/QuestionStateEnum.sol\\\";\\n\\n// Structs\\nimport {QuestionData} from \\\"./Structs/QuestionData.sol\\\";\\n\\n// Errors\\nimport {StateEventsAndErrors} from \\\"./EventsAndErrors/StateEventsAndErrors.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\ncontract QuestionStateController is Ownable, OnlyApi, StateEventsAndErrors {\\n    IBountyQuestion private _bountyQuestion;\\n\\n    mapping(address => mapping(uint256 => bool)) public hasVoted;\\n\\n    /// @notice For a given address and a given question, tracks the index of their vote in the votes[]\\n    mapping(address => mapping(uint256 => uint256)) public questionIndex;\\n    mapping(uint256 => address[]) public votes;\\n\\n    //------------------------------------------------------ CONSTRUCTOR\\n    constructor() {}\\n\\n    //------------------------------------------------------ FUNCTIONS\\n\\n    /**\\n     * @notice Initializes a question to draft.\\n     * @param questionId The id of the question\\n     */\\n    function initializeQuestion(uint256 questionId) public onlyApi {\\n        _bountyQuestion.updateState(questionId, STATE.VOTING);\\n        _bountyQuestion.updateVotes(questionId, 1);\\n    }\\n\\n    function initializeChallenge(uint256 questionId) public onlyApi {\\n        _bountyQuestion.updateState(questionId, STATE.PENDING);\\n    }\\n\\n    function publishFromQuestion(uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        _bountyQuestion.updateState(questionId, STATE.PUBLISHED);\\n    }\\n\\n    function publishFromChallenge(uint256 questionId) public onlyApi onlyState(STATE.PENDING, questionId) {\\n        _bountyQuestion.updateState(questionId, STATE.PUBLISHED);\\n    }\\n\\n    function voteFor(address _user, uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        if (hasVoted[_user][questionId]) revert HasAlreadyVotedForQuestion();\\n\\n        // Effects\\n        hasVoted[_user][questionId] = true;\\n\\n        _bountyQuestion.updateVotes(questionId, (getTotalVotes(questionId) + 1));\\n        votes[questionId].push(_user);\\n\\n        questionIndex[_user][questionId] = votes[questionId].length - 1;\\n\\n        // Interactions\\n    }\\n\\n    function unvoteFor(address _user, uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        if (!hasVoted[_user][questionId]) revert HasNotVotedForQuestion();\\n\\n        // Effects\\n        _bountyQuestion.updateVotes(questionId, (getTotalVotes(questionId) - 1));\\n\\n        uint256 index = questionIndex[_user][questionId];\\n        delete votes[questionId][index];\\n\\n        hasVoted[_user][questionId] = false;\\n\\n        // Interactions\\n    }\\n\\n    function setDisqualifiedState(uint256 questionId) public onlyApi {\\n        _bountyQuestion.updateState(questionId, STATE.DISQUALIFIED);\\n    }\\n\\n    function updateBountyQuestion() public {\\n        _bountyQuestion = IBountyQuestion(IQuestionAPI(questionApi).getBountyQuestion());\\n    }\\n\\n    // ------------------------------------------------------ VIEW FUNCTIONS\\n\\n    function getState(uint256 questionId) public view returns (STATE currentState) {\\n        return _bountyQuestion.getQuestionData(questionId).questionState;\\n    }\\n\\n    function getVoters(uint256 questionId) public view returns (address[] memory) {\\n        return votes[questionId];\\n    }\\n\\n    function getTotalVotes(uint256 questionId) public view returns (uint256) {\\n        return _bountyQuestion.getQuestionData(questionId).totalVotes;\\n    }\\n\\n    function getHasUserVoted(address user, uint256 questionId) external view returns (bool) {\\n        return hasVoted[user][questionId];\\n    }\\n\\n    function getQuestions(\\n        STATE state,\\n        uint256 offset,\\n        uint256 limit\\n    ) public view returns (QuestionData[] memory questions) {\\n        uint256 highestQuestion = _bountyQuestion.getMostRecentQuestion();\\n        if (limit > highestQuestion) limit = highestQuestion;\\n        if (offset > highestQuestion) offset = highestQuestion;\\n\\n        questions = new QuestionData[](limit);\\n\\n        uint256 found = 0;\\n        QuestionData memory cur;\\n\\n        for (uint256 i = 0; i < highestQuestion; i++) {\\n            cur = _bountyQuestion.getQuestionData(i);\\n            if (cur.questionState == state) {\\n                questions[found] = cur;\\n                found++;\\n                if (found == limit) break;\\n            }\\n        }\\n\\n        return questions;\\n    }\\n\\n    function getQuestionsByState(\\n        STATE currentState,\\n        uint256 currentQuestionId,\\n        uint256 offset\\n    ) public view returns (QuestionData[] memory found) {\\n        uint256 j = 0;\\n        uint256 limit;\\n        uint256 sizeOfArray;\\n        currentQuestionId;\\n        if (currentQuestionId > offset) {\\n            limit = currentQuestionId - offset;\\n            sizeOfArray = (currentQuestionId - offset) + 1;\\n        } else {\\n            limit = 1;\\n            sizeOfArray = currentQuestionId;\\n        }\\n        found = new QuestionData[](sizeOfArray);\\n        for (uint256 i = currentQuestionId; i >= limit; i--) {\\n            if (_bountyQuestion.getQuestionData(i).questionState == currentState) {\\n                found[j] = _bountyQuestion.getQuestionData(i);\\n                found[j].totalVotes = _bountyQuestion.getQuestionData(i).totalVotes;\\n                j++;\\n            }\\n        }\\n        return found;\\n    }\\n\\n    // Modifier\\n    modifier onlyState(STATE required, uint256 questionId) {\\n        if (required != getState(questionId)) revert InvalidStateTransition();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x246c476ca0766db5b41fba17a9646e75219f3599668f4f47e492a630d8263547\",\"license\":\"MIT\"},\"src/contracts/Protocol/Structs/QuestionData.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {STATE} from \\\"../Enums/QuestionStateEnum.sol\\\";\\n\\nstruct QuestionData {\\n    uint256 questionId;\\n    address author;\\n    string uri;\\n    uint256 totalVotes;\\n    STATE questionState;\\n}\\n\",\"keccak256\":\"0x7f79334ef9425f69db4c3fd53ddc0c610aa3588cfaf72e89aee9a0cae2db3214\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IBountyQuestion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Structs/QuestionData.sol\\\";\\n\\ninterface IBountyQuestion {\\n    function mintQuestion(address author, string calldata uri) external returns (uint256);\\n\\n    function getQuestionData(uint256 questionId) external view returns (QuestionData memory);\\n\\n    function getMostRecentQuestion() external view returns (uint256);\\n\\n    function updateState(uint256 questionId, STATE newState) external;\\n\\n    function updateVotes(uint256 questionId, uint256 newVotes) external;\\n\\n    function getAuthorOfQuestion(uint256 questionId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xdf4b3a9ecaec2769699b45ecab614aef77f6506da168eae2aa11a004756f223b\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IQuestionAPI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IQuestionAPI {\\n    function getMetricToken() external view returns (address);\\n\\n    function getQuestionStateController() external view returns (address);\\n\\n    function getClaimController() external view returns (address);\\n\\n    function getCostController() external view returns (address);\\n\\n    function getBountyQuestion() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbb9a3811a5d0286d26ce4613eec199a6eea5363b27d9421d0bfe23f8be3ddf1b\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5062000032620000266200003860201b60201c565b6200004060201b60201c565b62000104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612b2b80620001146000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80638da5cb5b116100b8578063c6e36a321161007c578063c6e36a3214610373578063d68993e5146103a3578063d6a8f797146103d3578063e78daa75146103ef578063ecf24b311461040b578063f2fde38b1461042757610142565b80638da5cb5b146102e35780638dd86bc1146103015780639e0ffcd51461030b578063a134ac1f1461033b578063c0875dfd1461035757610142565b80635ee272ab1161010a5780635ee272ab146102235780636baef4971461023f5780636e0a7e671461025d5780636fbb8fc71461028d578063715018a6146102a957806386b646f2146102b357610142565b806324d6d601146101475780632ce35e1114610163578063425458251461019357806344c9af28146101c35780635856015a146101f3575b600080fd5b610161600480360381019061015c9190611fb4565b610443565b005b61017d60048036038101906101789190611ff4565b6107cb565b60405161018a9190612030565b60405180910390f35b6101ad60048036038101906101a89190611fb4565b610879565b6040516101ba9190612066565b60405180910390f35b6101dd60048036038101906101d89190611ff4565b6108a8565b6040516101ea91906120f8565b60405180910390f35b61020d60048036038101906102089190612138565b610956565b60405161021a9190612389565b60405180910390f35b61023d60048036038101906102389190611ff4565b610b96565b005b610247610d21565b60405161025491906123ba565b60405180910390f35b61027760048036038101906102729190611fb4565b610d47565b6040516102849190612066565b60405180910390f35b6102a760048036038101906102a29190611ff4565b610daf565b005b6102b1610ed0565b005b6102cd60048036038101906102c89190611ff4565b610f58565b6040516102da9190612484565b60405180910390f35b6102eb610ff9565b6040516102f891906123ba565b60405180910390f35b610309611022565b005b61032560048036038101906103209190612138565b6110f5565b6040516103329190612389565b60405180910390f35b61035560048036038101906103509190611ff4565b61141e565b005b610371600480360381019061036c91906124a6565b6115a9565b005b61038d600480360381019061038891906124d3565b611669565b60405161039a91906123ba565b60405180910390f35b6103bd60048036038101906103b89190611fb4565b6116b7565b6040516103ca9190612030565b60405180910390f35b6103ed60048036038101906103e89190611ff4565b6116dc565b005b61040960048036038101906104049190611fb4565b61188d565b005b61042560048036038101906104209190611ff4565b611bd1565b005b610441600480360381019061043c91906124a6565b611cf2565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610484611de9565b73ffffffffffffffffffffffffffffffffffffffff16146104d1576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816104dd816108a8565b60058111156104ef576104ee612081565b5b82600581111561050257610501612081565b5b14610539576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff16156105ce576040517f285d4e4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d2c1dcd846001610681876107cb565b61068b9190612542565b6040518363ffffffff1660e01b81526004016106a8929190612598565b600060405180830381600087803b1580156106c257600080fd5b505af11580156106d6573d6000803e3d6000fd5b5050505060056000848152602001908152602001600020849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600560008581526020019081526020016000208054905061077191906125c1565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000208190555050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42836040518263ffffffff1660e01b81526004016108289190612030565b600060405180830381865afa158015610845573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061086e919061280c565b606001519050919050565b60036020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42836040518263ffffffff1660e01b81526004016109059190612030565b600060405180830381865afa158015610922573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061094b919061280c565b608001519050919050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166374bedfc96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb9190612855565b9050808311156109f9578092505b80841115610a05578093505b8267ffffffffffffffff811115610a1f57610a1e6125fa565b5b604051908082528060200260200182016040528015610a5857816020015b610a45611eb5565b815260200190600190039081610a3d5790505b5091506000610a65611eb5565b60005b83811015610b8b57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42826040518263ffffffff1660e01b8152600401610acb9190612030565b600060405180830381865afa158015610ae8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b11919061280c565b9150876005811115610b2657610b25612081565b5b82608001516005811115610b3d57610b3c612081565b5b03610b785781858481518110610b5657610b55612882565b5b60200260200101819052508280610b6c906128b1565b93505085830315610b8b575b8080610b83906128b1565b915050610a68565b505050509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610bd7611de9565b73ffffffffffffffffffffffffffffffffffffffff1614610c24576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600281610c30816108a8565b6005811115610c4257610c41612081565b5b826005811115610c5557610c54612081565b5b14610c8c576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffbafdfe8460036040518363ffffffff1660e01b8152600401610cea9291906128f9565b600060405180830381600087803b158015610d0457600080fd5b505af1158015610d18573d6000803e3d6000fd5b50505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610df0611de9565b73ffffffffffffffffffffffffffffffffffffffff1614610e3d576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffbafdfe8260026040518363ffffffff1660e01b8152600401610e9b9291906128f9565b600060405180830381600087803b158015610eb557600080fd5b505af1158015610ec9573d6000803e3d6000fd5b5050505050565b610ed8611de9565b73ffffffffffffffffffffffffffffffffffffffff16610ef6610ff9565b73ffffffffffffffffffffffffffffffffffffffff1614610f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f439061297f565b60405180910390fd5b610f566000611df1565b565b606060056000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610fed57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610fa3575b50505050509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad81ca786040518163ffffffff1660e01b8152600401602060405180830381865afa15801561108f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b3919061299f565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6060600080808486111561113057848661110f91906125c1565b91506001858761111f91906125c1565b6111299190612542565b9050611138565b600191508590505b8067ffffffffffffffff811115611152576111516125fa565b5b60405190808252806020026020018201604052801561118b57816020015b611178611eb5565b8152602001906001900390816111705790505b50935060008690505b828110611413578760058111156111ae576111ad612081565b5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42836040518263ffffffff1660e01b81526004016112099190612030565b600060405180830381865afa158015611226573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061124f919061280c565b60800151600581111561126557611264612081565b5b0361140057600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42826040518263ffffffff1660e01b81526004016112c59190612030565b600060405180830381865afa1580156112e2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061130b919061280c565b85858151811061131e5761131d612882565b5b6020026020010181905250600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42826040518263ffffffff1660e01b81526004016113849190612030565b600060405180830381865afa1580156113a1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906113ca919061280c565b606001518585815181106113e1576113e0612882565b5b6020026020010151606001818152505083806113fc906128b1565b9450505b808061140b906129cc565b915050611194565b505050509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661145f611de9565b73ffffffffffffffffffffffffffffffffffffffff16146114ac576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816114b8816108a8565b60058111156114ca576114c9612081565b5b8260058111156114dd576114dc612081565b5b14611514576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffbafdfe8460036040518363ffffffff1660e01b81526004016115729291906128f9565b600060405180830381600087803b15801561158c57600080fd5b505af11580156115a0573d6000803e3d6000fd5b50505050505050565b6115b1611de9565b73ffffffffffffffffffffffffffffffffffffffff166115cf610ff9565b73ffffffffffffffffffffffffffffffffffffffff1614611625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161c9061297f565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6005602052816000526040600020818154811061168557600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6004602052816000526040600020602052806000526040600020600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661171d611de9565b73ffffffffffffffffffffffffffffffffffffffff161461176a576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffbafdfe8260016040518363ffffffff1660e01b81526004016117c89291906128f9565b600060405180830381600087803b1580156117e257600080fd5b505af11580156117f6573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d2c1dcd8260016040518363ffffffff1660e01b8152600401611858929190612a3a565b600060405180830381600087803b15801561187257600080fd5b505af1158015611886573d6000803e3d6000fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118ce611de9565b73ffffffffffffffffffffffffffffffffffffffff161461191b576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181611927816108a8565b600581111561193957611938612081565b5b82600581111561194c5761194b612081565b5b14611983576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff16611a17576040517f4c0e0faf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d2c1dcd846001611a61876107cb565b611a6b91906125c1565b6040518363ffffffff1660e01b8152600401611a88929190612598565b600060405180830381600087803b158015611aa257600080fd5b505af1158015611ab6573d6000803e3d6000fd5b505050506000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020549050600560008581526020019081526020016000208181548110611b3457611b33612882565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611c12611de9565b73ffffffffffffffffffffffffffffffffffffffff1614611c5f576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffbafdfe8260046040518363ffffffff1660e01b8152600401611cbd9291906128f9565b600060405180830381600087803b158015611cd757600080fd5b505af1158015611ceb573d6000803e3d6000fd5b5050505050565b611cfa611de9565b73ffffffffffffffffffffffffffffffffffffffff16611d18610ff9565b73ffffffffffffffffffffffffffffffffffffffff1614611d6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d659061297f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611ddd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd490612ad5565b60405180910390fd5b611de681611df1565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160006005811115611f0657611f05612081565b5b81525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f4b82611f20565b9050919050565b611f5b81611f40565b8114611f6657600080fd5b50565b600081359050611f7881611f52565b92915050565b6000819050919050565b611f9181611f7e565b8114611f9c57600080fd5b50565b600081359050611fae81611f88565b92915050565b60008060408385031215611fcb57611fca611f16565b5b6000611fd985828601611f69565b9250506020611fea85828601611f9f565b9150509250929050565b60006020828403121561200a57612009611f16565b5b600061201884828501611f9f565b91505092915050565b61202a81611f7e565b82525050565b60006020820190506120456000830184612021565b92915050565b60008115159050919050565b6120608161204b565b82525050565b600060208201905061207b6000830184612057565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600681106120c1576120c0612081565b5b50565b60008190506120d2826120b0565b919050565b60006120e2826120c4565b9050919050565b6120f2816120d7565b82525050565b600060208201905061210d60008301846120e9565b92915050565b6006811061212057600080fd5b50565b60008135905061213281612113565b92915050565b60008060006060848603121561215157612150611f16565b5b600061215f86828701612123565b935050602061217086828701611f9f565b925050604061218186828701611f9f565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6121c081611f7e565b82525050565b6121cf81611f40565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561220f5780820151818401526020810190506121f4565b8381111561221e576000848401525b50505050565b6000601f19601f8301169050919050565b6000612240826121d5565b61224a81856121e0565b935061225a8185602086016121f1565b61226381612224565b840191505092915050565b612277816120d7565b82525050565b600060a08301600083015161229560008601826121b7565b5060208301516122a860208601826121c6565b50604083015184820360408601526122c08282612235565b91505060608301516122d560608601826121b7565b5060808301516122e8608086018261226e565b508091505092915050565b60006122ff838361227d565b905092915050565b6000602082019050919050565b600061231f8261218b565b6123298185612196565b93508360208202850161233b856121a7565b8060005b85811015612377578484038952815161235885826122f3565b945061236383612307565b925060208a0199505060018101905061233f565b50829750879550505050505092915050565b600060208201905081810360008301526123a38184612314565b905092915050565b6123b481611f40565b82525050565b60006020820190506123cf60008301846123ab565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061240d83836121c6565b60208301905092915050565b6000602082019050919050565b6000612431826123d5565b61243b81856123e0565b9350612446836123f1565b8060005b8381101561247757815161245e8882612401565b975061246983612419565b92505060018101905061244a565b5085935050505092915050565b6000602082019050818103600083015261249e8184612426565b905092915050565b6000602082840312156124bc576124bb611f16565b5b60006124ca84828501611f69565b91505092915050565b600080604083850312156124ea576124e9611f16565b5b60006124f885828601611f9f565b925050602061250985828601611f9f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061254d82611f7e565b915061255883611f7e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561258d5761258c612513565b5b828201905092915050565b60006040820190506125ad6000830185612021565b6125ba6020830184612021565b9392505050565b60006125cc82611f7e565b91506125d783611f7e565b9250828210156125ea576125e9612513565b5b828203905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61263282612224565b810181811067ffffffffffffffff82111715612651576126506125fa565b5b80604052505050565b6000612664611f0c565b90506126708282612629565b919050565b600080fd5b60008151905061268981611f88565b92915050565b60008151905061269e81611f52565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156126c9576126c86125fa565b5b6126d282612224565b9050602081019050919050565b60006126f26126ed846126ae565b61265a565b90508281526020810184848401111561270e5761270d6126a9565b5b6127198482856121f1565b509392505050565b600082601f830112612736576127356126a4565b5b81516127468482602086016126df565b91505092915050565b60008151905061275e81612113565b92915050565b600060a0828403121561277a576127796125f5565b5b61278460a061265a565b905060006127948482850161267a565b60008301525060206127a88482850161268f565b602083015250604082015167ffffffffffffffff8111156127cc576127cb612675565b5b6127d884828501612721565b60408301525060606127ec8482850161267a565b60608301525060806128008482850161274f565b60808301525092915050565b60006020828403121561282257612821611f16565b5b600082015167ffffffffffffffff8111156128405761283f611f1b565b5b61284c84828501612764565b91505092915050565b60006020828403121561286b5761286a611f16565b5b60006128798482850161267a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006128bc82611f7e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128ee576128ed612513565b5b600182019050919050565b600060408201905061290e6000830185612021565b61291b60208301846120e9565b9392505050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612969602083612922565b915061297482612933565b602082019050919050565b600060208201905081810360008301526129988161295c565b9050919050565b6000602082840312156129b5576129b4611f16565b5b60006129c38482850161268f565b91505092915050565b60006129d782611f7e565b9150600082036129ea576129e9612513565b5b600182039050919050565b6000819050919050565b6000819050919050565b6000612a24612a1f612a1a846129f5565b6129ff565b611f7e565b9050919050565b612a3481612a09565b82525050565b6000604082019050612a4f6000830185612021565b612a5c6020830184612a2b565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612abf602683612922565b9150612aca82612a63565b604082019050919050565b60006020820190508181036000830152612aee81612ab2565b905091905056fea2646970667358221220a892276f7b6457941b360e264abf84d8a39897d2caed6a479093ad9869ac5cc464736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c80638da5cb5b116100b8578063c6e36a321161007c578063c6e36a3214610373578063d68993e5146103a3578063d6a8f797146103d3578063e78daa75146103ef578063ecf24b311461040b578063f2fde38b1461042757610142565b80638da5cb5b146102e35780638dd86bc1146103015780639e0ffcd51461030b578063a134ac1f1461033b578063c0875dfd1461035757610142565b80635ee272ab1161010a5780635ee272ab146102235780636baef4971461023f5780636e0a7e671461025d5780636fbb8fc71461028d578063715018a6146102a957806386b646f2146102b357610142565b806324d6d601146101475780632ce35e1114610163578063425458251461019357806344c9af28146101c35780635856015a146101f3575b600080fd5b610161600480360381019061015c9190611fb4565b610443565b005b61017d60048036038101906101789190611ff4565b6107cb565b60405161018a9190612030565b60405180910390f35b6101ad60048036038101906101a89190611fb4565b610879565b6040516101ba9190612066565b60405180910390f35b6101dd60048036038101906101d89190611ff4565b6108a8565b6040516101ea91906120f8565b60405180910390f35b61020d60048036038101906102089190612138565b610956565b60405161021a9190612389565b60405180910390f35b61023d60048036038101906102389190611ff4565b610b96565b005b610247610d21565b60405161025491906123ba565b60405180910390f35b61027760048036038101906102729190611fb4565b610d47565b6040516102849190612066565b60405180910390f35b6102a760048036038101906102a29190611ff4565b610daf565b005b6102b1610ed0565b005b6102cd60048036038101906102c89190611ff4565b610f58565b6040516102da9190612484565b60405180910390f35b6102eb610ff9565b6040516102f891906123ba565b60405180910390f35b610309611022565b005b61032560048036038101906103209190612138565b6110f5565b6040516103329190612389565b60405180910390f35b61035560048036038101906103509190611ff4565b61141e565b005b610371600480360381019061036c91906124a6565b6115a9565b005b61038d600480360381019061038891906124d3565b611669565b60405161039a91906123ba565b60405180910390f35b6103bd60048036038101906103b89190611fb4565b6116b7565b6040516103ca9190612030565b60405180910390f35b6103ed60048036038101906103e89190611ff4565b6116dc565b005b61040960048036038101906104049190611fb4565b61188d565b005b61042560048036038101906104209190611ff4565b611bd1565b005b610441600480360381019061043c91906124a6565b611cf2565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610484611de9565b73ffffffffffffffffffffffffffffffffffffffff16146104d1576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816104dd816108a8565b60058111156104ef576104ee612081565b5b82600581111561050257610501612081565b5b14610539576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff16156105ce576040517f285d4e4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d2c1dcd846001610681876107cb565b61068b9190612542565b6040518363ffffffff1660e01b81526004016106a8929190612598565b600060405180830381600087803b1580156106c257600080fd5b505af11580156106d6573d6000803e3d6000fd5b5050505060056000848152602001908152602001600020849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600560008581526020019081526020016000208054905061077191906125c1565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000208190555050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42836040518263ffffffff1660e01b81526004016108289190612030565b600060405180830381865afa158015610845573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061086e919061280c565b606001519050919050565b60036020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42836040518263ffffffff1660e01b81526004016109059190612030565b600060405180830381865afa158015610922573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061094b919061280c565b608001519050919050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166374bedfc96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb9190612855565b9050808311156109f9578092505b80841115610a05578093505b8267ffffffffffffffff811115610a1f57610a1e6125fa565b5b604051908082528060200260200182016040528015610a5857816020015b610a45611eb5565b815260200190600190039081610a3d5790505b5091506000610a65611eb5565b60005b83811015610b8b57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42826040518263ffffffff1660e01b8152600401610acb9190612030565b600060405180830381865afa158015610ae8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b11919061280c565b9150876005811115610b2657610b25612081565b5b82608001516005811115610b3d57610b3c612081565b5b03610b785781858481518110610b5657610b55612882565b5b60200260200101819052508280610b6c906128b1565b93505085830315610b8b575b8080610b83906128b1565b915050610a68565b505050509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610bd7611de9565b73ffffffffffffffffffffffffffffffffffffffff1614610c24576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600281610c30816108a8565b6005811115610c4257610c41612081565b5b826005811115610c5557610c54612081565b5b14610c8c576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffbafdfe8460036040518363ffffffff1660e01b8152600401610cea9291906128f9565b600060405180830381600087803b158015610d0457600080fd5b505af1158015610d18573d6000803e3d6000fd5b50505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610df0611de9565b73ffffffffffffffffffffffffffffffffffffffff1614610e3d576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffbafdfe8260026040518363ffffffff1660e01b8152600401610e9b9291906128f9565b600060405180830381600087803b158015610eb557600080fd5b505af1158015610ec9573d6000803e3d6000fd5b5050505050565b610ed8611de9565b73ffffffffffffffffffffffffffffffffffffffff16610ef6610ff9565b73ffffffffffffffffffffffffffffffffffffffff1614610f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f439061297f565b60405180910390fd5b610f566000611df1565b565b606060056000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610fed57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610fa3575b50505050509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad81ca786040518163ffffffff1660e01b8152600401602060405180830381865afa15801561108f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b3919061299f565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6060600080808486111561113057848661110f91906125c1565b91506001858761111f91906125c1565b6111299190612542565b9050611138565b600191508590505b8067ffffffffffffffff811115611152576111516125fa565b5b60405190808252806020026020018201604052801561118b57816020015b611178611eb5565b8152602001906001900390816111705790505b50935060008690505b828110611413578760058111156111ae576111ad612081565b5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42836040518263ffffffff1660e01b81526004016112099190612030565b600060405180830381865afa158015611226573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061124f919061280c565b60800151600581111561126557611264612081565b5b0361140057600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42826040518263ffffffff1660e01b81526004016112c59190612030565b600060405180830381865afa1580156112e2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061130b919061280c565b85858151811061131e5761131d612882565b5b6020026020010181905250600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42826040518263ffffffff1660e01b81526004016113849190612030565b600060405180830381865afa1580156113a1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906113ca919061280c565b606001518585815181106113e1576113e0612882565b5b6020026020010151606001818152505083806113fc906128b1565b9450505b808061140b906129cc565b915050611194565b505050509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661145f611de9565b73ffffffffffffffffffffffffffffffffffffffff16146114ac576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816114b8816108a8565b60058111156114ca576114c9612081565b5b8260058111156114dd576114dc612081565b5b14611514576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffbafdfe8460036040518363ffffffff1660e01b81526004016115729291906128f9565b600060405180830381600087803b15801561158c57600080fd5b505af11580156115a0573d6000803e3d6000fd5b50505050505050565b6115b1611de9565b73ffffffffffffffffffffffffffffffffffffffff166115cf610ff9565b73ffffffffffffffffffffffffffffffffffffffff1614611625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161c9061297f565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6005602052816000526040600020818154811061168557600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6004602052816000526040600020602052806000526040600020600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661171d611de9565b73ffffffffffffffffffffffffffffffffffffffff161461176a576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffbafdfe8260016040518363ffffffff1660e01b81526004016117c89291906128f9565b600060405180830381600087803b1580156117e257600080fd5b505af11580156117f6573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d2c1dcd8260016040518363ffffffff1660e01b8152600401611858929190612a3a565b600060405180830381600087803b15801561187257600080fd5b505af1158015611886573d6000803e3d6000fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166118ce611de9565b73ffffffffffffffffffffffffffffffffffffffff161461191b576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181611927816108a8565b600581111561193957611938612081565b5b82600581111561194c5761194b612081565b5b14611983576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff16611a17576040517f4c0e0faf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d2c1dcd846001611a61876107cb565b611a6b91906125c1565b6040518363ffffffff1660e01b8152600401611a88929190612598565b600060405180830381600087803b158015611aa257600080fd5b505af1158015611ab6573d6000803e3d6000fd5b505050506000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000858152602001908152602001600020549050600560008581526020019081526020016000208181548110611b3457611b33612882565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611c12611de9565b73ffffffffffffffffffffffffffffffffffffffff1614611c5f576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffbafdfe8260046040518363ffffffff1660e01b8152600401611cbd9291906128f9565b600060405180830381600087803b158015611cd757600080fd5b505af1158015611ceb573d6000803e3d6000fd5b5050505050565b611cfa611de9565b73ffffffffffffffffffffffffffffffffffffffff16611d18610ff9565b73ffffffffffffffffffffffffffffffffffffffff1614611d6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d659061297f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611ddd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd490612ad5565b60405180910390fd5b611de681611df1565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160006005811115611f0657611f05612081565b5b81525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f4b82611f20565b9050919050565b611f5b81611f40565b8114611f6657600080fd5b50565b600081359050611f7881611f52565b92915050565b6000819050919050565b611f9181611f7e565b8114611f9c57600080fd5b50565b600081359050611fae81611f88565b92915050565b60008060408385031215611fcb57611fca611f16565b5b6000611fd985828601611f69565b9250506020611fea85828601611f9f565b9150509250929050565b60006020828403121561200a57612009611f16565b5b600061201884828501611f9f565b91505092915050565b61202a81611f7e565b82525050565b60006020820190506120456000830184612021565b92915050565b60008115159050919050565b6120608161204b565b82525050565b600060208201905061207b6000830184612057565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600681106120c1576120c0612081565b5b50565b60008190506120d2826120b0565b919050565b60006120e2826120c4565b9050919050565b6120f2816120d7565b82525050565b600060208201905061210d60008301846120e9565b92915050565b6006811061212057600080fd5b50565b60008135905061213281612113565b92915050565b60008060006060848603121561215157612150611f16565b5b600061215f86828701612123565b935050602061217086828701611f9f565b925050604061218186828701611f9f565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6121c081611f7e565b82525050565b6121cf81611f40565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561220f5780820151818401526020810190506121f4565b8381111561221e576000848401525b50505050565b6000601f19601f8301169050919050565b6000612240826121d5565b61224a81856121e0565b935061225a8185602086016121f1565b61226381612224565b840191505092915050565b612277816120d7565b82525050565b600060a08301600083015161229560008601826121b7565b5060208301516122a860208601826121c6565b50604083015184820360408601526122c08282612235565b91505060608301516122d560608601826121b7565b5060808301516122e8608086018261226e565b508091505092915050565b60006122ff838361227d565b905092915050565b6000602082019050919050565b600061231f8261218b565b6123298185612196565b93508360208202850161233b856121a7565b8060005b85811015612377578484038952815161235885826122f3565b945061236383612307565b925060208a0199505060018101905061233f565b50829750879550505050505092915050565b600060208201905081810360008301526123a38184612314565b905092915050565b6123b481611f40565b82525050565b60006020820190506123cf60008301846123ab565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061240d83836121c6565b60208301905092915050565b6000602082019050919050565b6000612431826123d5565b61243b81856123e0565b9350612446836123f1565b8060005b8381101561247757815161245e8882612401565b975061246983612419565b92505060018101905061244a565b5085935050505092915050565b6000602082019050818103600083015261249e8184612426565b905092915050565b6000602082840312156124bc576124bb611f16565b5b60006124ca84828501611f69565b91505092915050565b600080604083850312156124ea576124e9611f16565b5b60006124f885828601611f9f565b925050602061250985828601611f9f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061254d82611f7e565b915061255883611f7e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561258d5761258c612513565b5b828201905092915050565b60006040820190506125ad6000830185612021565b6125ba6020830184612021565b9392505050565b60006125cc82611f7e565b91506125d783611f7e565b9250828210156125ea576125e9612513565b5b828203905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61263282612224565b810181811067ffffffffffffffff82111715612651576126506125fa565b5b80604052505050565b6000612664611f0c565b90506126708282612629565b919050565b600080fd5b60008151905061268981611f88565b92915050565b60008151905061269e81611f52565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156126c9576126c86125fa565b5b6126d282612224565b9050602081019050919050565b60006126f26126ed846126ae565b61265a565b90508281526020810184848401111561270e5761270d6126a9565b5b6127198482856121f1565b509392505050565b600082601f830112612736576127356126a4565b5b81516127468482602086016126df565b91505092915050565b60008151905061275e81612113565b92915050565b600060a0828403121561277a576127796125f5565b5b61278460a061265a565b905060006127948482850161267a565b60008301525060206127a88482850161268f565b602083015250604082015167ffffffffffffffff8111156127cc576127cb612675565b5b6127d884828501612721565b60408301525060606127ec8482850161267a565b60608301525060806128008482850161274f565b60808301525092915050565b60006020828403121561282257612821611f16565b5b600082015167ffffffffffffffff8111156128405761283f611f1b565b5b61284c84828501612764565b91505092915050565b60006020828403121561286b5761286a611f16565b5b60006128798482850161267a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006128bc82611f7e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128ee576128ed612513565b5b600182019050919050565b600060408201905061290e6000830185612021565b61291b60208301846120e9565b9392505050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612969602083612922565b915061297482612933565b602082019050919050565b600060208201905081810360008301526129988161295c565b9050919050565b6000602082840312156129b5576129b4611f16565b5b60006129c38482850161268f565b91505092915050565b60006129d782611f7e565b9150600082036129ea576129e9612513565b5b600182039050919050565b6000819050919050565b6000819050919050565b6000612a24612a1f612a1a846129f5565b6129ff565b611f7e565b9050919050565b612a3481612a09565b82525050565b6000604082019050612a4f6000830185612021565b612a5c6020830184612a2b565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612abf602683612922565b9150612aca82612a63565b604082019050919050565b60006020820190508181036000830152612aee81612ab2565b905091905056fea2646970667358221220a892276f7b6457941b360e264abf84d8a39897d2caed6a479093ad9869ac5cc464736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initializeQuestion(uint256)": {
        "params": {
          "questionId": "The id of the question"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setQuestionApi(address)": {
        "params": {
          "_newApi": "The new address of the question API."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "HasNotVotedForQuestion()": [
        {
          "notice": "------------------------------------------------------ ERRORS"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "initializeQuestion(uint256)": {
        "notice": "Initializes a question to draft."
      },
      "questionIndex(address,uint256)": {
        "notice": "For a given address and a given question, tracks the index of their vote in the votes[]"
      },
      "setQuestionApi(address)": {
        "notice": "Sets the address of the question API."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6829,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "questionApi",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5175,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "_bountyQuestion",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IBountyQuestion)6537"
      },
      {
        "astId": 5181,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "hasVoted",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 5188,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "questionIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 5193,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "votes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBountyQuestion)6537": {
        "encoding": "inplace",
        "label": "contract IBountyQuestion",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}