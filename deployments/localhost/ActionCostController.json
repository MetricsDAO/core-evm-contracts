{
  "address": "0x09635F643e140090A9A8Dcd712eD6285858ceBef",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_metric",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotTheApi",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum ACTION",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "actionCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ACTION",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "actionStage",
      "outputs": [
        {
          "internalType": "enum STAGE",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "payForCreateQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "enum ACTION",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "payForAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionApi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ACTION",
          "name": "action",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "name": "setActionCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_metric",
          "type": "address"
        }
      ],
      "name": "setMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newApi",
          "type": "address"
        }
      ],
      "name": "setQuestionApi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cost",
          "type": "uint256"
        }
      ],
      "name": "setVoteCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voteCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a7cd2d45605cdecdb3e483a1c0998a2403f520d206511122a7a53fda34e637d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x09635F643e140090A9A8Dcd712eD6285858ceBef",
    "transactionIndex": 0,
    "gasUsed": "928298",
    "logsBloom": "0x
    "blockHash": "0xb4a3d75a024fc2ff040b56f0c3d28035f05080eeb203225b39e6097d4e7fd80c",
    "transactionHash": "0x0a7cd2d45605cdecdb3e483a1c0998a2403f520d206511122a7a53fda34e637d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 222,
        "transactionHash": "0x0a7cd2d45605cdecdb3e483a1c0998a2403f520d206511122a7a53fda34e637d",
        "address": "0x09635F643e140090A9A8Dcd712eD6285858ceBef",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb4a3d75a024fc2ff040b56f0c3d28035f05080eeb203225b39e6097d4e7fd80c"
      }
    ],
    "blockNumber": 222,
    "cumulativeGasUsed": "928298",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x3Aa5ebB10DC797CAC828524e59A333d0A371443c", "0x7a2088a1bFc9d81c55368AE168C2C02570cB814F"],
  "numDeployments": 1,
  "solcInputHash": "4a2696ec6ec05bd8e211447d338ac135",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metric\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotTheApi\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum ACTION\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"actionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ACTION\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"actionStage\",\"outputs\":[{\"internalType\":\"enum STAGE\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"enum ACTION\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"payForAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionApi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ACTION\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"setActionCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metric\",\"type\":\"address\"}],\"name\":\"setMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newApi\",\"type\":\"address\"}],\"name\":\"setQuestionApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setActionCost(uint8,uint256)\":{\"params\":{\"cost\":\"The new cost of creating a question\"}},\"setQuestionApi(address)\":{\"params\":{\"_newApi\":\"The new address of the question API.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setActionCost(uint8,uint256)\":{\"notice\":\"Changes the cost of creating a question\"},\"setQuestionApi(address)\":{\"notice\":\"Sets the address of the question API.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/ActionCostController.sol\":\"ActionCostController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"src/contracts/MetricToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// @custom:security-contact contracts@metricsdao.com\\ncontract MetricToken is ERC20 {\\n    constructor() ERC20(\\\"METRIC\\\", \\\"METRIC\\\") {\\n        _mint(_msgSender(), 1000000000 * 10**decimals());\\n    }\\n}\\n\",\"keccak256\":\"0x015317ec77ea633af5f2af9cde22891298225bbd33fc6309c06d87579920329b\",\"license\":\"MIT\"},\"src/contracts/Protocol/ActionCostController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../MetricToken.sol\\\";\\nimport \\\"./Vault.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IActionCostController.sol\\\";\\n\\n// Enums\\nimport \\\"./Enums/VaultEnum.sol\\\";\\nimport \\\"./Enums/ActionEnum.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\ncontract ActionCostController is Ownable, OnlyApi, IActionCostController {\\n    IERC20 private metric;\\n    Vault private vault;\\n\\n    mapping(ACTION => uint256) public actionCost;\\n    mapping(ACTION => STAGE) public actionStage;\\n\\n    constructor(address _metric, address _vault) {\\n        metric = IERC20(_metric);\\n        vault = Vault(_vault);\\n\\n        actionCost[ACTION.CREATE] = 1e18;\\n        actionCost[ACTION.VOTE] = 1e18;\\n        actionCost[ACTION.CLAIM] = 1e18;\\n\\n        actionStage[ACTION.CREATE] = STAGE.CREATE_AND_VOTE;\\n        actionStage[ACTION.VOTE] = STAGE.CREATE_AND_VOTE;\\n        actionStage[ACTION.CLAIM] = STAGE.CLAIM_AND_ANSWER;\\n    }\\n\\n    function payForAction(\\n        address _user,\\n        uint256 questionId,\\n        ACTION action\\n    ) external onlyApi {\\n        vault.lockMetric(_user, actionCost[action], questionId, actionStage[action]);\\n    }\\n\\n    // ------------------------------- Admin\\n\\n    /**\\n     * @notice Changes the cost of creating a question\\n     * @param cost The new cost of creating a question\\n     */\\n    function setActionCost(ACTION action, uint256 cost) external onlyOwner {\\n        actionCost[action] = cost;\\n    }\\n\\n    function setMetric(address _metric) public onlyOwner {\\n        metric = IERC20(_metric);\\n    }\\n}\\n\",\"keccak256\":\"0x4b3b2d88e49c78699ffc01ad8b8a1e0fce7b600fb52497f3cce2a21af6514944\",\"license\":\"MIT\"},\"src/contracts/Protocol/BountyQuestion.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\nimport \\\"./modifiers/OnlyStateController.sol\\\";\\nimport \\\"./Structs/QuestionData.sol\\\";\\nimport \\\"./interfaces/IBountyQuestion.sol\\\";\\n\\n/// @custom:security-contact contracts@metricsdao.xyz\\ncontract BountyQuestion is IBountyQuestion, Ownable, OnlyApi, OnlyStateController {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _questionIdCounter;\\n\\n    // This maps the author to the list of question IDs they have created\\n    mapping(address => uint256[]) public authors;\\n\\n    mapping(uint256 => QuestionData) public questionData;\\n\\n    constructor() {\\n        _questionIdCounter.increment();\\n    }\\n\\n    function mintQuestion(address author, string calldata uri) public onlyApi returns (uint256) {\\n        uint256 questionId = _questionIdCounter.current();\\n        _questionIdCounter.increment();\\n\\n        questionData[questionId].author = author;\\n        questionData[questionId].questionId = questionId;\\n        questionData[questionId].uri = uri;\\n\\n        authors[author].push(questionId);\\n        return questionId;\\n    }\\n\\n    function updateState(uint256 questionId, STATE newState) public onlyStateController {\\n        QuestionData storage question = questionData[questionId];\\n        question.questionState = newState;\\n    }\\n\\n    function getAuthor(address user) public view returns (QuestionData[] memory) {\\n        uint256[] memory created = authors[user];\\n\\n        QuestionData[] memory ret = new QuestionData[](created.length);\\n\\n        for (uint256 i = 0; i < created.length; i++) {\\n            ret[i] = questionData[created[i]];\\n        }\\n        return ret;\\n    }\\n\\n    function getAuthorOfQuestion(uint256 questionId) public view returns (address) {\\n        return questionData[questionId].author;\\n    }\\n\\n    function getMostRecentQuestion() public view returns (uint256) {\\n        return _questionIdCounter.current();\\n    }\\n\\n    function getQuestionData(uint256 questionId) public view returns (QuestionData memory) {\\n        return questionData[questionId];\\n    }\\n}\\n\",\"keccak256\":\"0x747e0ad3f8d6dc91784a5971e071aae0a89e51aee57021c17db16816a73a422f\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/ActionEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum ACTION {\\n    CREATE,\\n    VOTE,\\n    CLAIM\\n}\\n\",\"keccak256\":\"0x68cd6c623c549ca24e4670cf6a190f5fe318661ed8ec693fe15e660b72450fac\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/ClaimEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum CLAIM_STATE {\\n    UNINT,\\n    CLAIMED,\\n    RELEASED,\\n    ANSWERED\\n}\\n\",\"keccak256\":\"0xea71b984aaf40147b5540a4db0f867086eaf9c4c45acd47e4f4e3149b649b1e6\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/QuestionStateEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum STATE {\\n    UNINIT,\\n    VOTING,\\n    PUBLISHED,\\n    DISQUALIFIED,\\n    COMPLETED\\n}\\n\",\"keccak256\":\"0x4a2d21883586044bf77a96e2d19266d75b55b2ca8940780115f35cc581c32902\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/VaultEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum STAGE {\\n    CREATE_AND_VOTE,\\n    UNVOTE,\\n    CLAIM_AND_ANSWER,\\n    RELEASE_CLAIM,\\n    REVIEW\\n}\\n\\nenum STATUS {\\n    UNINT,\\n    DEPOSITED,\\n    WITHDRAWN,\\n    SLASHED\\n}\\n\",\"keccak256\":\"0x1d96c2cfb960bcdad5245263ab395222413b31c448bed38e1de19ce6f46244c8\",\"license\":\"MIT\"},\"src/contracts/Protocol/QuestionStateController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IQuestionStateController.sol\\\";\\nimport \\\"./interfaces/IBountyQuestion.sol\\\";\\n\\n// Enums\\nimport \\\"./Enums/QuestionStateEnum.sol\\\";\\n\\n// Structs\\nimport \\\"./Structs/QuestionData.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\ncontract QuestionStateController is IQuestionStateController, Ownable, OnlyApi {\\n    // Mapping for all questions that are upvoted by the user?\\n    mapping(address => mapping(uint256 => bool)) public hasVoted;\\n\\n    /// @notice For a given address and a given question, tracks the index of their vote in the votes[]\\n    mapping(address => mapping(uint256 => uint256)) public questionIndex; // TODO userVoteIndex\\n\\n    mapping(uint256 => Votes) public votes;\\n\\n    IBountyQuestion private _bountyQuestion;\\n\\n    // TODO do we want user to lose their metric if a question is closed? they voted on something bad\\n\\n    constructor(address bountyQuestion) {\\n        _bountyQuestion = IBountyQuestion(bountyQuestion);\\n    }\\n\\n    /**\\n     * @notice Initializes a question to draft.\\n     * @param questionId The id of the question\\n     */\\n    function initializeQuestion(uint256 questionId) public onlyApi {\\n        _bountyQuestion.updateState(questionId, STATE.VOTING);\\n\\n        votes[questionId].totalVotes = 1;\\n    }\\n\\n    function publish(uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // if some voting barrier is passed, we can publish the question\\n        _bountyQuestion.updateState(questionId, STATE.PUBLISHED);\\n    }\\n\\n    function voteFor(address _user, uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        if (hasVoted[_user][questionId]) revert HasAlreadyVotedForQuestion();\\n\\n        // Effects\\n        hasVoted[_user][questionId] = true;\\n\\n        votes[questionId].totalVotes++;\\n        votes[questionId].voters.push(_user);\\n\\n        questionIndex[_user][questionId] = votes[questionId].voters.length - 1;\\n\\n        // Interactions\\n    }\\n\\n    function unvoteFor(address _user, uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        if (!hasVoted[_user][questionId]) revert HasNotVotedForQuestion();\\n\\n        // Effects\\n        votes[questionId].totalVotes--;\\n\\n        uint256 index = questionIndex[_user][questionId];\\n        delete votes[questionId].voters[index];\\n\\n        hasVoted[_user][questionId] = false;\\n\\n        // Interactions\\n    }\\n\\n    function setDisqualifiedState(uint256 questionId) public onlyApi {\\n        _bountyQuestion.updateState(questionId, STATE.DISQUALIFIED);\\n    }\\n\\n    // TODO batch voting and batch operations and look into arrays as parameters security risk\\n\\n    //------------------------------------------------------ View Functions\\n\\n    function getState(uint256 questionId) public view returns (STATE currentState) {\\n        return _bountyQuestion.getQuestionData(questionId).questionState;\\n    }\\n\\n    function getVoters(uint256 questionId) public view returns (address[] memory voters) {\\n        return votes[questionId].voters;\\n    }\\n\\n    function getTotalVotes(uint256 questionId) public view returns (uint256) {\\n        return votes[questionId].totalVotes;\\n    }\\n\\n    function getHasUserVoted(address user, uint256 questionId) external view returns (bool) {\\n        return hasVoted[user][questionId];\\n    }\\n\\n    function getQuestions(\\n        STATE state,\\n        uint256 offset,\\n        uint256 limit\\n    ) public view returns (QuestionData[] memory questions) {\\n        uint256 highestQuestion = _bountyQuestion.getMostRecentQuestion();\\n        if (limit > highestQuestion) limit = highestQuestion;\\n        if (offset > highestQuestion) offset = highestQuestion;\\n\\n        questions = new QuestionData[](limit);\\n\\n        uint256 found = 0;\\n        QuestionData memory cur;\\n\\n        for (uint256 i = 0; i < highestQuestion; i++) {\\n            cur = _bountyQuestion.getQuestionData(i);\\n            if (cur.questionState == state) {\\n                questions[found] = cur;\\n                found++;\\n                if (found == limit) break;\\n            }\\n        }\\n\\n        return questions;\\n    }\\n\\n    function getQuestionsByState(\\n        STATE currentState,\\n        uint256 currentQuestionId,\\n        uint256 offset\\n    ) public view returns (QuestionData[] memory found) {\\n        uint256 j = 0;\\n        uint256 limit;\\n        uint256 sizeOfArray;\\n        currentQuestionId -= 1;\\n        if (currentQuestionId > offset) {\\n            limit = currentQuestionId - offset;\\n            sizeOfArray = (currentQuestionId - offset) + 1;\\n        } else {\\n            limit = 1;\\n            sizeOfArray = currentQuestionId;\\n        }\\n        found = new QuestionData[](sizeOfArray);\\n        for (uint256 i = currentQuestionId; i >= limit; i--) {\\n            if (_bountyQuestion.getQuestionData(i).questionState == currentState) {\\n                found[j] = _bountyQuestion.getQuestionData(i);\\n                found[j].totalVotes = votes[i].totalVotes;\\n                j++;\\n            }\\n        }\\n        return found;\\n    }\\n\\n    //------------------------------------------------------ OWNER FUNCTIONS\\n\\n    /**\\n     * @notice Allows the owner to set the BountyQuestion contract address.\\n     * @param newQuestion The address of the new BountyQuestion contract.\\n     */\\n    function setQuestionProxy(address newQuestion) public onlyOwner {\\n        if (newQuestion == address(0)) revert InvalidAddress();\\n        _bountyQuestion = IBountyQuestion(newQuestion);\\n    }\\n\\n    //------------------------------------------------------ Errors\\n    error HasNotVotedForQuestion();\\n    error HasAlreadyVotedForQuestion();\\n    error InvalidStateTransition();\\n    error InvalidAddress();\\n\\n    //------------------------------------------------------ Structs\\n    modifier onlyState(STATE required, uint256 questionId) {\\n        if (required != getState(questionId)) revert InvalidStateTransition();\\n        _;\\n    }\\n\\n    struct Votes {\\n        address[] voters;\\n        uint256 totalVotes;\\n    }\\n}\\n\",\"keccak256\":\"0x41be4bbe794b77a3f9cc9443ae9434b02be964770aa63609d54ddfe6470fc8b5\",\"license\":\"MIT\"},\"src/contracts/Protocol/Structs/AnswerStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"../Enums/ClaimEnum.sol\\\";\\n\\nstruct Answer {\\n    CLAIM_STATE state;\\n    address author;\\n    string answerURL;\\n    uint256 finalGrade;\\n    string scoringMetaDataURI;\\n}\\n\",\"keccak256\":\"0xf6e0212f6a848def738435df319971ab89a8690dd8b6e40d3100285ada4adf0b\",\"license\":\"MIT\"},\"src/contracts/Protocol/Structs/QuestionData.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Enums/QuestionStateEnum.sol\\\";\\n\\nstruct QuestionData {\\n    uint256 questionId;\\n    address author;\\n    string uri;\\n    // TODO this is only used for our bulk read functions and is not actively tracked, it shouldn't be here.\\n    uint256 totalVotes;\\n    STATE questionState;\\n}\\n\",\"keccak256\":\"0xf71721d270e9ec079299d4f4c4a18f7cc24f95803c846ddb28937082a93775e2\",\"license\":\"MIT\"},\"src/contracts/Protocol/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./QuestionStateController.sol\\\";\\nimport \\\"./BountyQuestion.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IQuestionStateController.sol\\\";\\nimport \\\"./interfaces/IClaimController.sol\\\";\\n\\n// Enums\\nimport \\\"./Enums/VaultEnum.sol\\\";\\nimport \\\"./Enums/QuestionStateEnum.sol\\\";\\nimport \\\"./Enums/ClaimEnum.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyCostController.sol\\\";\\n\\ncontract Vault is Ownable, OnlyCostController {\\n    IERC20 public metric;\\n    IQuestionStateController public questionStateController;\\n    IClaimController public claimController;\\n    BountyQuestion private _question;\\n\\n    STATUS public status;\\n\\n    /// @notice Address to the MetricsDAO treasury.\\n    address public treasury;\\n\\n    /// @notice Keeps track of the quantity of deposits per user.\\n    mapping(address => uint256[]) public depositsByWithdrawers;\\n\\n    /// @notice Keeps track of the amount of METRIC locked per question\\n    mapping(uint256 => uint256) public lockedMetricByQuestion;\\n\\n    /// @notice Keeps track of total amount in vault for a given user.\\n    mapping(address => uint256) public totalLockedInVaults;\\n\\n    /// @notice Keeps track of the quantity of withdrawals per user.\\n    mapping(uint256 => mapping(STAGE => mapping(address => lockAttributes))) public lockedMetric;\\n\\n    //------------------------------------------------------ ERRORS\\n\\n    /// @notice Throw if user tries to withdraw Metric from a question it does not own.\\n    error NotTheDepositor();\\n    /// @notice Throw if user tries to withdraw Metric without having first deposited.\\n    error NoMetricDeposited();\\n    /// @notice Throw if user tries to lock Metric for a question that has a different state than UNINT.\\n    error QuestionHasInvalidStatus();\\n    /// @notice Throw if user tries to claim Metric for unvoting on a question that is not in the VOTING state.\\n    error QuestionNotInVoting();\\n    /// @notice Throw if user tries to claim Metric for a question that has not been published (yet).\\n    error QuestionNotPublished();\\n    /// @notice Throw if user tries to claim Metric for a question that was not unvoted\\n    error UserHasNotUnvoted();\\n    /// @notice Throw if user tries to withdraw Metric from a question that is not in the review state.\\n    error QuestionNotInReview();\\n    /// @notice Throw if user tries to withdraw Metric from a claim that is not released.\\n    error ClaimNotReleased();\\n    /// @notice Throw if creator of question tries to unvote\\n    error CannotUnvoteOwnQuestion();\\n    /// @notice Throw if the same question is slashed twice.\\n    error AlreadySlashed();\\n    /// @notice Throw if address is equal to address(0).\\n    error InvalidAddress();\\n    /// @notice Throw if user tries to lock METRIC for a stage that does not require locking.\\n    error InvalidStage();\\n\\n    //------------------------------------------------------ STRUCTS\\n\\n    struct lockAttributes {\\n        address user;\\n        uint256 amount;\\n        STATUS status;\\n    }\\n\\n    //------------------------------------------------------ EVENTS\\n\\n    /// @notice Event emitted when Metric is withdrawn.\\n    event Withdraw(address indexed user, uint256 indexed amount);\\n    /// @notice Event emitted when a question is slashed.\\n    event Slashed(address indexed user, uint256 indexed questionId);\\n\\n    //------------------------------------------------------ CONSTRUCTOR\\n\\n    /**\\n     * @notice Constructor sets the question Metric token, QuestionStateController and the treasury.\\n     * @param metricTokenAddress The Metric token address\\n     * @param questionStateControllerAddress The QuestionStateController address.\\n     * @param treasuryAddress The treasury address.\\n     */\\n    constructor(\\n        address metricTokenAddress,\\n        address questionStateControllerAddress,\\n        address treasuryAddress\\n    ) {\\n        metric = IERC20(metricTokenAddress);\\n        questionStateController = IQuestionStateController(questionStateControllerAddress);\\n        treasury = treasuryAddress;\\n    }\\n\\n    //------------------------------------------------------ FUNCTIONS\\n\\n    /**\\n     * @notice Locks METRIC for creating a question\\n     * @param user The address of the user locking the METRIC\\n     * @param amount The amount of METRIC to lock\\n     * @param questionId The question id'\\n     * @param stage The stage for which METRIC is locked\\n     */\\n    function lockMetric(\\n        address user,\\n        uint256 amount,\\n        uint256 questionId,\\n        STAGE stage\\n    ) external onlyCostController {\\n        // Checks if METRIC is locked for a valid stage.\\n        if (uint8(stage) >= 5) revert InvalidStage();\\n        // Checks if there has not been a deposit yet\\n        if (lockedMetric[questionId][stage][user].status != STATUS.UNINT) revert QuestionHasInvalidStatus();\\n\\n        depositAccounting(user, amount, questionId, stage);\\n    }\\n\\n    /**\\n     * @notice Allows a user to withdraw METRIC locked for a question, after the question is published.\\n     * @param questionId The question id\\n     * @param stage The stage for which the user is withdrawing metric from a question.\\n     */\\n    function withdrawMetric(uint256 questionId, STAGE stage) external {\\n        // Checks if Metric is withdrawn for a valid stage.\\n        if (uint8(stage) >= 5) revert InvalidStage();\\n\\n        if (stage == STAGE.CREATE_AND_VOTE) {\\n            // Checks that the question is published\\n            if (questionStateController.getState(questionId) != STATE.PUBLISHED) revert QuestionNotPublished();\\n\\n            // Accounting & changes\\n            withdrawalAccounting(questionId, STAGE.CREATE_AND_VOTE);\\n        } else if (stage == STAGE.UNVOTE) {\\n            // Check that user has a voting index, has not voted and the question state is VOTING.\\n            if (_question.getAuthorOfQuestion(questionId) == _msgSender()) revert CannotUnvoteOwnQuestion();\\n            if (questionStateController.getHasUserVoted(_msgSender(), questionId) == true) revert UserHasNotUnvoted();\\n            if (questionStateController.getState(questionId) != STATE.VOTING) revert QuestionNotInVoting();\\n\\n            // Accounting & changes\\n            withdrawalAccounting(questionId, STAGE.CREATE_AND_VOTE);\\n\\n            lockedMetric[questionId][STAGE.CREATE_AND_VOTE][_msgSender()].status = STATUS.UNINT;\\n        } else if (stage == STAGE.CLAIM_AND_ANSWER) {\\n            if (questionStateController.getState(questionId) != STATE.COMPLETED) revert QuestionNotInReview();\\n\\n            withdrawalAccounting(questionId, STAGE.CLAIM_AND_ANSWER);\\n        } else if (stage == STAGE.RELEASE_CLAIM) {\\n            if (questionStateController.getState(questionId) != STATE.PUBLISHED) revert QuestionNotPublished();\\n            if (claimController.getQuestionClaimState(questionId, _msgSender()) != CLAIM_STATE.RELEASED) revert ClaimNotReleased();\\n\\n            withdrawalAccounting(questionId, STAGE.CLAIM_AND_ANSWER);\\n\\n            lockedMetric[questionId][STAGE.CLAIM_AND_ANSWER][_msgSender()].status = STATUS.UNINT;\\n        } else {\\n            // if (reviewPeriod == active) revert ReviewPeriodActive();\\n        }\\n    }\\n\\n    function depositAccounting(\\n        address user,\\n        uint256 amount,\\n        uint256 questionId,\\n        STAGE stage\\n    ) internal {\\n        // Accounting & changes\\n        lockedMetric[questionId][stage][user].user = user;\\n        lockedMetric[questionId][stage][user].amount += amount;\\n\\n        lockedMetricByQuestion[questionId] += amount;\\n\\n        lockedMetric[questionId][stage][user].status = STATUS.DEPOSITED;\\n\\n        totalLockedInVaults[user] += amount;\\n        depositsByWithdrawers[user].push(questionId);\\n\\n        // Transfers Metric from the user to the vault.\\n        metric.transferFrom(user, address(this), amount);\\n    }\\n\\n    function withdrawalAccounting(uint256 questionId, STAGE stage) internal {\\n        if (_msgSender() != lockedMetric[questionId][stage][_msgSender()].user) revert NotTheDepositor();\\n        if (lockedMetric[questionId][stage][_msgSender()].status != STATUS.DEPOSITED) revert NoMetricDeposited();\\n\\n        uint256 toWithdraw = lockedMetric[questionId][stage][_msgSender()].amount;\\n\\n        lockedMetric[questionId][stage][_msgSender()].status = STATUS.WITHDRAWN;\\n        lockedMetric[questionId][stage][_msgSender()].amount = 0;\\n\\n        lockedMetricByQuestion[questionId] -= toWithdraw;\\n        totalLockedInVaults[_msgSender()] -= toWithdraw;\\n\\n        // Transfers Metric from the vault to the user.\\n        metric.transfer(_msgSender(), toWithdraw);\\n\\n        emit Withdraw(_msgSender(), toWithdraw);\\n    }\\n\\n    /**\\n     * @notice Allows onlyOwner to slash a question -- halfing the METRIC locked for the question.\\n     * @param questionId The question id\\n     */\\n    // function slashMetric(uint256 questionId) external onlyOwner {\\n    //     // Check that the question has not been slashed yet.\\n    //     if (lockedMetric[questionId][0].status == STATUS.SLASHED) revert AlreadySlashed();\\n\\n    //     lockedMetric[questionId][0].status = STATUS.SLASHED;\\n\\n    //     // Send half of the Metric to the treasury\\n    //     metric.transfer(treasury, lockedMetricByQuestion[questionId] / 2);\\n\\n    //     // Return the other half of the Metric to the user\\n    //     metric.transfer(lockedMetric[questionId][0].user, lockedMetric[questionId][0].amount / 2);\\n\\n    //     emit Slashed(lockedMetric[questionId][0].user, questionId);\\n    // }\\n\\n    /**\\n     * @notice Gets the questions that a user has created.\\n     * @param user The address of the user.\\n     * @return The questions that the user has created.\\n     */\\n    function getVaultsByWithdrawer(address user) external view returns (uint256[] memory) {\\n        return depositsByWithdrawers[user];\\n    }\\n\\n    /**\\n     * @notice Gets the information about the vault attributes of a question.\\n     * @param questionId The question id.\\n     * @param stage The stage of the question.\\n     * @param user The address of the user.\\n     * @return A struct containing the attributes of the question (withdrawer, amount, status).\\n     */\\n    function getVaultById(\\n        uint256 questionId,\\n        STAGE stage,\\n        address user\\n    ) external view returns (lockAttributes memory) {\\n        return lockedMetric[questionId][stage][user];\\n    }\\n\\n    function getLockedMetricByQuestion(uint256 questionId) public view returns (uint256) {\\n        return lockedMetricByQuestion[questionId];\\n    }\\n\\n    function getUserFromProperties(\\n        uint256 questionId,\\n        STAGE stage,\\n        address user\\n    ) public view returns (address) {\\n        return lockedMetric[questionId][stage][user].user;\\n    }\\n\\n    function getAmountFromProperties(\\n        uint256 questionId,\\n        STAGE stage,\\n        address user\\n    ) public view returns (uint256) {\\n        return lockedMetric[questionId][stage][user].amount;\\n    }\\n\\n    function getLockedPerUser(address _user) public view returns (uint256) {\\n        return totalLockedInVaults[_user];\\n    }\\n\\n    /**\\n     * @notice Gets the total amount of Metric locked in the vault.\\n     * @return The total amount of Metric locked in the vault.\\n     */\\n    function getMetricTotalLockedBalance() external view returns (uint256) {\\n        return metric.balanceOf(address(this));\\n    }\\n\\n    //------------------------------------------------------ OWNER FUNCTIONS\\n\\n    /**\\n     * @notice Allows owner to update the QuestionStateController.\\n     */\\n    function setQuestionStateController(address _questionStateController) public onlyOwner {\\n        if (_questionStateController == address(0)) revert InvalidAddress();\\n        questionStateController = IQuestionStateController(_questionStateController);\\n    }\\n\\n    function setClaimController(address _claimController) public onlyOwner {\\n        if (_claimController == address(0)) revert InvalidAddress();\\n        claimController = IClaimController(_claimController);\\n    }\\n\\n    /**\\n     * @notice Allows owner to update the treasury address.\\n     */\\n    function setTreasury(address _treasury) public onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n    function setBountyQuestion(address _bountyQuestion) public onlyOwner {\\n        _question = BountyQuestion(_bountyQuestion);\\n    }\\n\\n    /**\\n     * @notice Allows owner to update the Metric token address.\\n     */\\n    function setMetric(address _metric) public onlyOwner {\\n        if (_metric == address(0)) revert InvalidAddress();\\n        metric = IERC20(_metric);\\n    }\\n}\\n\",\"keccak256\":\"0xb1f0b9a915ca38ce1d839ffee161daf98633819ae94017d4d5f965818926b2be\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IActionCostController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Enums/ActionEnum.sol\\\";\\n\\ninterface IActionCostController {\\n    function setActionCost(ACTION action, uint256 cost) external;\\n\\n    function payForAction(\\n        address _user,\\n        uint256 questionId,\\n        ACTION action\\n    ) external;\\n}\\n\",\"keccak256\":\"0x021a7b24003c8c29cfaba784ee4f427f1d36cff3e32148b4589f7c56a9f61511\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IBountyQuestion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Structs/QuestionData.sol\\\";\\n\\ninterface IBountyQuestion {\\n    function getQuestionData(uint256 questionId) external view returns (QuestionData memory);\\n\\n    function getMostRecentQuestion() external view returns (uint256);\\n\\n    function updateState(uint256 questionId, STATE newState) external;\\n}\\n\",\"keccak256\":\"0x7fbcc765c545a0ab30f9e3ce66aee3616352f28076b56662de71a0e525448268\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IClaimController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Structs/AnswerStruct.sol\\\";\\n\\ninterface IClaimController {\\n    function initializeQuestion(uint256 questionId, uint256 claimLimit) external;\\n\\n    function claim(address user, uint256 questionId) external;\\n\\n    function releaseClaim(address user, uint256 questionId) external;\\n\\n    function answer(\\n        address user,\\n        uint256 questionId,\\n        string calldata answerURL\\n    ) external;\\n\\n    function getClaimDataForUser(uint256 questionId, address user) external view returns (Answer memory _answer);\\n\\n    function getQuestionClaimState(uint256 questionId, address user) external view returns (CLAIM_STATE claimState);\\n}\\n\",\"keccak256\":\"0xbda3cf7828fa61e227c75ad6d1a2758b33c328a094bf058013751b1a5370a68f\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IQuestionStateController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Enums/QuestionStateEnum.sol\\\";\\n\\ninterface IQuestionStateController {\\n    function initializeQuestion(uint256 questionId) external;\\n\\n    function voteFor(address _user, uint256 questionId) external;\\n\\n    function unvoteFor(address _user, uint256 questionId) external;\\n\\n    function publish(uint256 question) external;\\n\\n    function getState(uint256 quesitonId) external view returns (STATE currentState);\\n\\n    function getHasUserVoted(address user, uint256 questionId) external view returns (bool);\\n\\n    function setDisqualifiedState(uint256 questionId) external;\\n}\\n\",\"keccak256\":\"0x6dc6645a93ddc84005da520f6e1a0f9633a7dfc8cb58b56bcca268c796248558\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyCostController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyCostController is Ownable {\\n    address public costController;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the ActionCostController.\\n     * @param _newCostController The new address of the ActionCostController.\\n     */\\n    function setCostController(address _newCostController) external onlyOwner {\\n        costController = _newCostController;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyCostController() {\\n        if (_msgSender() != costController) revert NotTheCostController();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheCostController();\\n}\\n\",\"keccak256\":\"0x4c3f6b61445fe478b6b3248f1ac2a6f483111c1b0dd89c722c3351f1ece35a86\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyStateController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyStateController is Ownable {\\n    address public stateController;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the QuestionStateController.\\n     * @param _newStateController The new address of the QuestionStateController.\\n     */\\n    function setStateController(address _newStateController) external onlyOwner {\\n        stateController = _newStateController;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyStateController() {\\n        if (_msgSender() != stateController) revert NotTheStateController();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheStateController();\\n}\\n\",\"keccak256\":\"0x6a61c96a95b38f2fb05225b7550fb68556c5ac74e7f7a2714dff98992f107c8c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200115738038062001157833981810160405281019062000037919062000432565b620000576200004b620002fc60201b60201c565b6200030460201b60201c565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a764000060046000806002811115620000fc57620000fb62000479565b5b600281111562000111576200011062000479565b5b815260200190815260200160002081905550670de0b6b3a7640000600460006001600281111562000147576200014662000479565b5b60028111156200015c576200015b62000479565b5b815260200190815260200160002081905550670de0b6b3a76400006004600060028081111562000191576200019062000479565b5b6002811115620001a657620001a562000479565b5b815260200190815260200160002081905550600060056000806002811115620001d457620001d362000479565b5b6002811115620001e957620001e862000479565b5b815260200190815260200160002060006101000a81548160ff021916908360048111156200021c576200021b62000479565b5b0217905550600060056000600160028111156200023e576200023d62000479565b5b600281111562000253576200025262000479565b5b815260200190815260200160002060006101000a81548160ff0219169083600481111562000286576200028562000479565b5b0217905550600260056000600280811115620002a757620002a662000479565b5b6002811115620002bc57620002bb62000479565b5b815260200190815260200160002060006101000a81548160ff02191690836004811115620002ef57620002ee62000479565b5b02179055505050620004a8565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003fa82620003cd565b9050919050565b6200040c81620003ed565b81146200041857600080fd5b50565b6000815190506200042c8162000401565b92915050565b600080604083850312156200044c576200044b620003c8565b5b60006200045c858286016200041b565b92505060206200046f858286016200041b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610c9f80620004b86000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063715018a611610066578063715018a6146101455780638da5cb5b1461014f578063c0875dfd1461016d578063d9eecddf14610189578063f2fde38b146101b95761009e565b8063101a6181146100a35780631956f19c146100bf5780631d67644d146100ef57806347365f5c1461010b5780636baef49714610127575b600080fd5b6100bd60048036038101906100b891906108e4565b6101d5565b005b6100d960048036038101906100d49190610924565b610291565b6040516100e691906109c8565b60405180910390f35b61010960048036038101906101049190610a41565b6102b1565b005b61012560048036038101906101209190610a94565b610452565b005b61012f610512565b60405161013c9190610ad0565b60405180910390f35b61014d610538565b005b6101576105c0565b6040516101649190610ad0565b60405180910390f35b61018760048036038101906101829190610a94565b6105e9565b005b6101a3600480360381019061019e9190610924565b6106a9565b6040516101b09190610afa565b60405180910390f35b6101d360048036038101906101ce9190610a94565b6106c1565b005b6101dd6107b8565b73ffffffffffffffffffffffffffffffffffffffff166101fb6105c0565b73ffffffffffffffffffffffffffffffffffffffff1614610251576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024890610b72565b60405180910390fd5b806004600084600281111561026957610268610951565b5b600281111561027b5761027a610951565b5b8152602001908152602001600020819055505050565b60056020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166102f26107b8565b73ffffffffffffffffffffffffffffffffffffffff161461033f576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b2cb2d6f846004600085600281111561039557610394610951565b5b60028111156103a7576103a6610951565b5b81526020019081526020016000205485600560008760028111156103ce576103cd610951565b5b60028111156103e0576103df610951565b5b815260200190815260200160002060009054906101000a900460ff166040518563ffffffff1660e01b815260040161041b9493929190610b92565b600060405180830381600087803b15801561043557600080fd5b505af1158015610449573d6000803e3d6000fd5b50505050505050565b61045a6107b8565b73ffffffffffffffffffffffffffffffffffffffff166104786105c0565b73ffffffffffffffffffffffffffffffffffffffff16146104ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c590610b72565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105406107b8565b73ffffffffffffffffffffffffffffffffffffffff1661055e6105c0565b73ffffffffffffffffffffffffffffffffffffffff16146105b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ab90610b72565b60405180910390fd5b6105be60006107c0565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6105f16107b8565b73ffffffffffffffffffffffffffffffffffffffff1661060f6105c0565b73ffffffffffffffffffffffffffffffffffffffff1614610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065c90610b72565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60046020528060005260406000206000915090505481565b6106c96107b8565b73ffffffffffffffffffffffffffffffffffffffff166106e76105c0565b73ffffffffffffffffffffffffffffffffffffffff161461073d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073490610b72565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a390610c49565b60405180910390fd5b6107b5816107c0565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6003811061089657600080fd5b50565b6000813590506108a881610889565b92915050565b6000819050919050565b6108c1816108ae565b81146108cc57600080fd5b50565b6000813590506108de816108b8565b92915050565b600080604083850312156108fb576108fa610884565b5b600061090985828601610899565b925050602061091a858286016108cf565b9150509250929050565b60006020828403121561093a57610939610884565b5b600061094884828501610899565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061099157610990610951565b5b50565b60008190506109a282610980565b919050565b60006109b282610994565b9050919050565b6109c2816109a7565b82525050565b60006020820190506109dd60008301846109b9565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a0e826109e3565b9050919050565b610a1e81610a03565b8114610a2957600080fd5b50565b600081359050610a3b81610a15565b92915050565b600080600060608486031215610a5a57610a59610884565b5b6000610a6886828701610a2c565b9350506020610a79868287016108cf565b9250506040610a8a86828701610899565b9150509250925092565b600060208284031215610aaa57610aa9610884565b5b6000610ab884828501610a2c565b91505092915050565b610aca81610a03565b82525050565b6000602082019050610ae56000830184610ac1565b92915050565b610af4816108ae565b82525050565b6000602082019050610b0f6000830184610aeb565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610b5c602083610b15565b9150610b6782610b26565b602082019050919050565b60006020820190508181036000830152610b8b81610b4f565b9050919050565b6000608082019050610ba76000830187610ac1565b610bb46020830186610aeb565b610bc16040830185610aeb565b610bce60608301846109b9565b95945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c33602683610b15565b9150610c3e82610bd7565b604082019050919050565b60006020820190508181036000830152610c6281610c26565b905091905056fea26469706673582212205f56968c5da6d77b5e5c1bcf56f33cd1bfbf852e0894159545fea51dbb9f007464736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063715018a611610066578063715018a6146101455780638da5cb5b1461014f578063c0875dfd1461016d578063d9eecddf14610189578063f2fde38b146101b95761009e565b8063101a6181146100a35780631956f19c146100bf5780631d67644d146100ef57806347365f5c1461010b5780636baef49714610127575b600080fd5b6100bd60048036038101906100b891906108e4565b6101d5565b005b6100d960048036038101906100d49190610924565b610291565b6040516100e691906109c8565b60405180910390f35b61010960048036038101906101049190610a41565b6102b1565b005b61012560048036038101906101209190610a94565b610452565b005b61012f610512565b60405161013c9190610ad0565b60405180910390f35b61014d610538565b005b6101576105c0565b6040516101649190610ad0565b60405180910390f35b61018760048036038101906101829190610a94565b6105e9565b005b6101a3600480360381019061019e9190610924565b6106a9565b6040516101b09190610afa565b60405180910390f35b6101d360048036038101906101ce9190610a94565b6106c1565b005b6101dd6107b8565b73ffffffffffffffffffffffffffffffffffffffff166101fb6105c0565b73ffffffffffffffffffffffffffffffffffffffff1614610251576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024890610b72565b60405180910390fd5b806004600084600281111561026957610268610951565b5b600281111561027b5761027a610951565b5b8152602001908152602001600020819055505050565b60056020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166102f26107b8565b73ffffffffffffffffffffffffffffffffffffffff161461033f576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b2cb2d6f846004600085600281111561039557610394610951565b5b60028111156103a7576103a6610951565b5b81526020019081526020016000205485600560008760028111156103ce576103cd610951565b5b60028111156103e0576103df610951565b5b815260200190815260200160002060009054906101000a900460ff166040518563ffffffff1660e01b815260040161041b9493929190610b92565b600060405180830381600087803b15801561043557600080fd5b505af1158015610449573d6000803e3d6000fd5b50505050505050565b61045a6107b8565b73ffffffffffffffffffffffffffffffffffffffff166104786105c0565b73ffffffffffffffffffffffffffffffffffffffff16146104ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c590610b72565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105406107b8565b73ffffffffffffffffffffffffffffffffffffffff1661055e6105c0565b73ffffffffffffffffffffffffffffffffffffffff16146105b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ab90610b72565b60405180910390fd5b6105be60006107c0565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6105f16107b8565b73ffffffffffffffffffffffffffffffffffffffff1661060f6105c0565b73ffffffffffffffffffffffffffffffffffffffff1614610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065c90610b72565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60046020528060005260406000206000915090505481565b6106c96107b8565b73ffffffffffffffffffffffffffffffffffffffff166106e76105c0565b73ffffffffffffffffffffffffffffffffffffffff161461073d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073490610b72565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a390610c49565b60405180910390fd5b6107b5816107c0565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6003811061089657600080fd5b50565b6000813590506108a881610889565b92915050565b6000819050919050565b6108c1816108ae565b81146108cc57600080fd5b50565b6000813590506108de816108b8565b92915050565b600080604083850312156108fb576108fa610884565b5b600061090985828601610899565b925050602061091a858286016108cf565b9150509250929050565b60006020828403121561093a57610939610884565b5b600061094884828501610899565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061099157610990610951565b5b50565b60008190506109a282610980565b919050565b60006109b282610994565b9050919050565b6109c2816109a7565b82525050565b60006020820190506109dd60008301846109b9565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a0e826109e3565b9050919050565b610a1e81610a03565b8114610a2957600080fd5b50565b600081359050610a3b81610a15565b92915050565b600080600060608486031215610a5a57610a59610884565b5b6000610a6886828701610a2c565b9350506020610a79868287016108cf565b9250506040610a8a86828701610899565b9150509250925092565b600060208284031215610aaa57610aa9610884565b5b6000610ab884828501610a2c565b91505092915050565b610aca81610a03565b82525050565b6000602082019050610ae56000830184610ac1565b92915050565b610af4816108ae565b82525050565b6000602082019050610b0f6000830184610aeb565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610b5c602083610b15565b9150610b6782610b26565b602082019050919050565b60006020820190508181036000830152610b8b81610b4f565b9050919050565b6000608082019050610ba76000830187610ac1565b610bb46020830186610aeb565b610bc16040830185610aeb565b610bce60608301846109b9565b95945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c33602683610b15565b9150610c3e82610bd7565b604082019050919050565b60006020820190508181036000830152610c6281610c26565b905091905056fea26469706673582212205f56968c5da6d77b5e5c1bcf56f33cd1bfbf852e0894159545fea51dbb9f007464736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setActionCost(uint8,uint256)": {
        "params": {
          "cost": "The new cost of creating a question"
        }
      },
      "setQuestionApi(address)": {
        "params": {
          "_newApi": "The new address of the question API."
        }
      },
      "setVoteCost(uint256)": {
        "params": {
          "_cost": "The new cost of voting for a question"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setActionCost(uint8,uint256)": {
        "notice": "Changes the cost of creating a question"
      },
      "setQuestionApi(address)": {
        "notice": "Sets the address of the question API."
      },
      "setVoteCost(uint256)": {
        "notice": "Changes the cost of voting for a question"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/ActionCostController.sol:ActionCostController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3595,
        "contract": "src/contracts/Protocol/ActionCostController.sol:ActionCostController",
        "label": "questionApi",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1067,
        "contract": "src/contracts/Protocol/ActionCostController.sol:ActionCostController",
        "label": "metric",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)773"
      },
      {
        "astId": 1070,
        "contract": "src/contracts/Protocol/ActionCostController.sol:ActionCostController",
        "label": "vault",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Vault)3337"
      },
      {
        "astId": 1075,
        "contract": "src/contracts/Protocol/ActionCostController.sol:ActionCostController",
        "label": "actionCost",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_enum(ACTION)1425,t_uint256)"
      },
      {
        "astId": 1081,
        "contract": "src/contracts/Protocol/ActionCostController.sol:ActionCostController",
        "label": "actionStage",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_enum(ACTION)1425,t_enum(STAGE)1448)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)773": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(Vault)3337": {
        "encoding": "inplace",
        "label": "contract Vault",
        "numberOfBytes": "20"
      },
      "t_enum(ACTION)1425": {
        "encoding": "inplace",
        "label": "enum ACTION",
        "numberOfBytes": "1"
      },
      "t_enum(STAGE)1448": {
        "encoding": "inplace",
        "label": "enum STAGE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(ACTION)1425,t_enum(STAGE)1448)": {
        "encoding": "mapping",
        "key": "t_enum(ACTION)1425",
        "label": "mapping(enum ACTION => enum STAGE)",
        "numberOfBytes": "32",
        "value": "t_enum(STAGE)1448"
      },
      "t_mapping(t_enum(ACTION)1425,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(ACTION)1425",
        "label": "mapping(enum ACTION => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
