{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "inputs": [],
      "name": "HasAlreadyVotedForQuestion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HasNotVotedForQuestion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStateTransition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheApi",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quesitonId",
          "type": "uint256"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentState",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getTotalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct QuestionStateController.Vote[]",
          "name": "_votes",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "initializeQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "publish",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionApi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "questionIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "setBadState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newApi",
          "type": "address"
        }
      ],
      "name": "setQuestionApi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum IQuestionStateController.STATE",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "unvoteFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "voteFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalVoteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1fb25df748da58cad30fe42674efe743ae6170864ba501d3b107cb5fa34fd82c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "transactionIndex": 0,
    "gasUsed": "1373790",
    "logsBloom": "0x
    "blockHash": "0x9d212103b3bc95d0b4777221c6f9658e675bd6c5946b2d1e111f1e572b0bdede",
    "transactionHash": "0x1fb25df748da58cad30fe42674efe743ae6170864ba501d3b107cb5fa34fd82c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2972,
        "transactionHash": "0x1fb25df748da58cad30fe42674efe743ae6170864ba501d3b107cb5fa34fd82c",
        "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9d212103b3bc95d0b4777221c6f9658e675bd6c5946b2d1e111f1e572b0bdede"
      }
    ],
    "blockNumber": 2972,
    "cumulativeGasUsed": "1373790",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ccee38e7ecfebbf64ca3637d709f41ca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"HasAlreadyVotedForQuestion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HasNotVotedForQuestion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStateTransition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheApi\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quesitonId\",\"type\":\"uint256\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentState\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getTotalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getVotes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct QuestionStateController.Vote[]\",\"name\":\"_votes\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"initializeQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"publish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionApi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"setBadState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newApi\",\"type\":\"address\"}],\"name\":\"setQuestionApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum IQuestionStateController.STATE\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"unvoteFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"voteFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVoteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initializeQuestion(uint256)\":{\"params\":{\"questionId\":\"The id of the question\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setQuestionApi(address)\":{\"params\":{\"_newApi\":\"The new address of the question API.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initializeQuestion(uint256)\":{\"notice\":\"Initializes a question to draft.\"},\"setQuestionApi(address)\":{\"notice\":\"Sets the address of the question API.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/QuestionStateController.sol\":\"QuestionStateController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/Protocol/QuestionStateController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IQuestionStateController.sol\\\";\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\ncontract QuestionStateController is IQuestionStateController, Ownable, OnlyApi {\\n    mapping(uint256 => QuestionVote) public votes;\\n    mapping(uint256 => STATE) public state;\\n\\n    // Mapping for all questions that are upvoted by the user?\\n    mapping(address => mapping(uint256 => bool)) public hasVoted;\\n    mapping(address => mapping(uint256 => uint256)) public questionIndex;\\n\\n    // TODO do we want user to lose their metric if a question is closed? they voted on somethjing bad\\n\\n    /**\\n     * @notice Initializes a question to draft.\\n     * @param questionId The id of the question\\n     */\\n    function initializeQuestion(uint256 questionId) public onlyApi {\\n        state[questionId] = STATE.VOTING;\\n    }\\n\\n    function publish(uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // if some voting barrier is passed, we can publish the question\\n        state[questionId] = STATE.PUBLISHED;\\n    }\\n\\n    function voteFor(\\n        address _user,\\n        uint256 questionId,\\n        uint256 amount\\n    ) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        // TODO check if creator can upvote their own ?\\n        // TODO limit the max amount of token they can use?\\n        if (hasVoted[_user][questionId]) revert HasAlreadyVotedForQuestion();\\n\\n        // Effects\\n        Vote memory _vote = Vote({voter: _user, amount: amount});\\n        votes[questionId].votes.push(_vote);\\n\\n        hasVoted[_user][questionId] = true;\\n        questionIndex[_user][questionId] = votes[questionId].votes.length - 1;\\n\\n        votes[questionId].totalVoteCount += amount;\\n\\n        // Interactions\\n        // TODO Lock tokens for voting include safeTransferFrom\\n    }\\n\\n    function unvoteFor(address _user, uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        if (!hasVoted[_user][questionId]) revert HasNotVotedForQuestion();\\n\\n        // Effects\\n        uint256 index = questionIndex[_user][questionId];\\n        uint256 amount = votes[questionId].votes[index].amount;\\n\\n        votes[questionId].votes[index].amount = 0;\\n        votes[questionId].totalVoteCount -= amount;\\n\\n        // Interactions\\n        // TODO Unlock tokens for voting\\n    }\\n\\n    function setBadState(uint256 questionId) public onlyApi {\\n        state[questionId] = STATE.BAD;\\n    }\\n\\n    // TODO batch voting and batch operations and look into arrays as parameters security risk\\n\\n    //------------------------------------------------------ View Functions\\n\\n    function getState(uint256 quesitonId) public view returns (uint256 currentState) {\\n        return uint256(state[quesitonId]);\\n    }\\n\\n    function getVotes(uint256 questionId) public view returns (Vote[] memory _votes) {\\n        return votes[questionId].votes;\\n    }\\n\\n    function getTotalVotes(uint256 questionId) public view returns (uint256) {\\n        return votes[questionId].totalVoteCount;\\n    }\\n\\n    //------------------------------------------------------ Errors\\n    error HasNotVotedForQuestion();\\n    error HasAlreadyVotedForQuestion();\\n    error InvalidStateTransition();\\n\\n    //------------------------------------------------------ Structs\\n    modifier onlyState(STATE required, uint256 questionId) {\\n        if (required != state[questionId]) revert InvalidStateTransition();\\n        _;\\n    }\\n\\n    struct QuestionVote {\\n        Vote[] votes;\\n        uint256 totalVoteCount;\\n    }\\n\\n    struct Vote {\\n        address voter;\\n        uint256 amount;\\n    }\\n}\\n\",\"keccak256\":\"0xc44c179f4f9fbf9e9ca5a4f8e71132ef2d360e32b47cbbd24b8a96c3c07bd6ef\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IQuestionStateController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IQuestionStateController {\\n    function initializeQuestion(uint256 questionId) external;\\n\\n    function voteFor(\\n        address _user,\\n        uint256 questionId,\\n        uint256 amount\\n    ) external;\\n\\n    function unvoteFor(address _user, uint256 questionId) external;\\n\\n    function publish(uint256 questionId) external;\\n\\n    // TODO currentState can probably be like a uint8, it depends on how many states we have\\n    function getState(uint256 quesitonId) external view returns (uint256 currentState);\\n\\n    function setBadState(uint256 questionId) external;\\n\\n    enum STATE {\\n        UNINIT,\\n        VOTING,\\n        PUBLISHED, // TODO this where it becomes a challenge, can be claimed and answered\\n        IN_GRADING,\\n        COMPLETED,\\n        CANCELLED,\\n        BAD\\n    }\\n}\\n\",\"keccak256\":\"0xab93e2f491dcbf627b84f79ed8bab9cf696b95ae35862cea050fdd77f4783685\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6117838061010d6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063d6a8f79711610071578063d6a8f797146102ca578063e78daa75146102e6578063f2fde38b14610302578063f68952f31461031e578063ff9810991461033a5761010b565b80638da5cb5b14610244578063c0875dfd14610262578063cc4ef1191461027e578063d68993e51461029a5761010b565b80635df81330116100de5780635df81330146101d05780636baef49714610200578063715018a61461021e5780637644bd8f146102285761010b565b80632ce35e11146101105780633e4f49e614610140578063425458251461017057806344c9af28146101a0575b600080fd5b61012a600480360381019061012591906111d1565b61036a565b604051610137919061120d565b60405180910390f35b61015a600480360381019061015591906111d1565b61038a565b604051610167919061129f565b60405180910390f35b61018a60048036038101906101859190611318565b6103aa565b6040516101979190611373565b60405180910390f35b6101ba60048036038101906101b591906111d1565b6103d9565b6040516101c7919061120d565b60405180910390f35b6101ea60048036038101906101e591906111d1565b610415565b6040516101f7919061120d565b60405180910390f35b610208610433565b604051610215919061139d565b60405180910390f35b610226610459565b005b610242600480360381019061023d91906113b8565b6104e1565b005b61024c61085e565b604051610259919061139d565b60405180910390f35b61027c6004803603810190610277919061140b565b610887565b005b610298600480360381019061029391906111d1565b610947565b005b6102b460048036038101906102af9190611318565b610a96565b6040516102c1919061120d565b60405180910390f35b6102e460048036038101906102df91906111d1565b610abb565b005b61030060048036038101906102fb9190611318565b610b88565b005b61031c6004803603810190610317919061140b565b610e31565b005b610338600480360381019061033391906111d1565b610f28565b005b610354600480360381019061034f91906111d1565b610ff5565b6040516103619190611534565b60405180910390f35b600060026000838152602001908152602001600020600101549050919050565b60036020528060005260406000206000915054906101000a900460ff1681565b60046020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60006003600083815260200190815260200160002060009054906101000a900460ff16600681111561040e5761040d611228565b5b9050919050565b60026020528060005260406000206000915090508060010154905081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104616110ca565b73ffffffffffffffffffffffffffffffffffffffff1661047f61085e565b73ffffffffffffffffffffffffffffffffffffffff16146104d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cc906115b3565b60405180910390fd5b6104df60006110d2565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166105226110ca565b73ffffffffffffffffffffffffffffffffffffffff161461056f576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001826003600082815260200190815260200160002060009054906101000a900460ff1660068111156105a5576105a4611228565b5b8260068111156105b8576105b7611228565b5b146105ef576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff1615610684576040517f285d4e4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060405180604001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018581525090506002600086815260200190815260200160002060000181908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015550506001600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060006101000a81548160ff021916908315150217905550600160026000878152602001908152602001600020600001805490506107d59190611602565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878152602001908152602001600020819055508360026000878152602001908152602001600020600101600082825461084f9190611636565b92505081905550505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61088f6110ca565b73ffffffffffffffffffffffffffffffffffffffff166108ad61085e565b73ffffffffffffffffffffffffffffffffffffffff1614610903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fa906115b3565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166109886110ca565b73ffffffffffffffffffffffffffffffffffffffff16146109d5576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816003600082815260200190815260200160002060009054906101000a900460ff166006811115610a0b57610a0a611228565b5b826006811115610a1e57610a1d611228565b5b14610a55576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026003600085815260200190815260200160002060006101000a81548160ff02191690836006811115610a8c57610a8b611228565b5b0217905550505050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610afc6110ca565b73ffffffffffffffffffffffffffffffffffffffff1614610b49576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016003600083815260200190815260200160002060006101000a81548160ff02191690836006811115610b8057610b7f611228565b5b021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610bc96110ca565b73ffffffffffffffffffffffffffffffffffffffff1614610c16576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816003600082815260200190815260200160002060009054906101000a900460ff166006811115610c4c57610c4b611228565b5b826006811115610c5f57610c5e611228565b5b14610c96576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff16610d2a576040517f4c0e0faf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000205490506000600260008681526020019081526020016000206000018281548110610da957610da861168c565b5b90600052602060002090600202016001015490506000600260008781526020019081526020016000206000018381548110610de757610de661168c565b5b90600052602060002090600202016001018190555080600260008781526020019081526020016000206001016000828254610e229190611602565b92505081905550505050505050565b610e396110ca565b73ffffffffffffffffffffffffffffffffffffffff16610e5761085e565b73ffffffffffffffffffffffffffffffffffffffff1614610ead576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea4906115b3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f139061172d565b60405180910390fd5b610f25816110d2565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610f696110ca565b73ffffffffffffffffffffffffffffffffffffffff1614610fb6576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60066003600083815260200190815260200160002060006101000a81548160ff02191690836006811115610fed57610fec611228565b5b021790555050565b606060026000838152602001908152602001600020600001805480602002602001604051908101604052809291908181526020016000905b828210156110bf57838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001906001019061102d565b505050509050919050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b6111ae8161119b565b81146111b957600080fd5b50565b6000813590506111cb816111a5565b92915050565b6000602082840312156111e7576111e6611196565b5b60006111f5848285016111bc565b91505092915050565b6112078161119b565b82525050565b600060208201905061122260008301846111fe565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6007811061126857611267611228565b5b50565b600081905061127982611257565b919050565b60006112898261126b565b9050919050565b6112998161127e565b82525050565b60006020820190506112b46000830184611290565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112e5826112ba565b9050919050565b6112f5816112da565b811461130057600080fd5b50565b600081359050611312816112ec565b92915050565b6000806040838503121561132f5761132e611196565b5b600061133d85828601611303565b925050602061134e858286016111bc565b9150509250929050565b60008115159050919050565b61136d81611358565b82525050565b60006020820190506113886000830184611364565b92915050565b611397816112da565b82525050565b60006020820190506113b2600083018461138e565b92915050565b6000806000606084860312156113d1576113d0611196565b5b60006113df86828701611303565b93505060206113f0868287016111bc565b9250506040611401868287016111bc565b9150509250925092565b60006020828403121561142157611420611196565b5b600061142f84828501611303565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61146d816112da565b82525050565b61147c8161119b565b82525050565b6040820160008201516114986000850182611464565b5060208201516114ab6020850182611473565b50505050565b60006114bd8383611482565b60408301905092915050565b6000602082019050919050565b60006114e182611438565b6114eb8185611443565b93506114f683611454565b8060005b8381101561152757815161150e88826114b1565b9750611519836114c9565b9250506001810190506114fa565b5085935050505092915050565b6000602082019050818103600083015261154e81846114d6565b905092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061159d602083611556565b91506115a882611567565b602082019050919050565b600060208201905081810360008301526115cc81611590565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061160d8261119b565b91506116188361119b565b92508282101561162b5761162a6115d3565b5b828203905092915050565b60006116418261119b565b915061164c8361119b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611681576116806115d3565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611717602683611556565b9150611722826116bb565b604082019050919050565b600060208201905081810360008301526117468161170a565b905091905056fea26469706673582212205b0fcc6392831c7867d4a9cc314f56ed761a1abe0fe1e8fcca4874e7a99d93a064736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063d6a8f79711610071578063d6a8f797146102ca578063e78daa75146102e6578063f2fde38b14610302578063f68952f31461031e578063ff9810991461033a5761010b565b80638da5cb5b14610244578063c0875dfd14610262578063cc4ef1191461027e578063d68993e51461029a5761010b565b80635df81330116100de5780635df81330146101d05780636baef49714610200578063715018a61461021e5780637644bd8f146102285761010b565b80632ce35e11146101105780633e4f49e614610140578063425458251461017057806344c9af28146101a0575b600080fd5b61012a600480360381019061012591906111d1565b61036a565b604051610137919061120d565b60405180910390f35b61015a600480360381019061015591906111d1565b61038a565b604051610167919061129f565b60405180910390f35b61018a60048036038101906101859190611318565b6103aa565b6040516101979190611373565b60405180910390f35b6101ba60048036038101906101b591906111d1565b6103d9565b6040516101c7919061120d565b60405180910390f35b6101ea60048036038101906101e591906111d1565b610415565b6040516101f7919061120d565b60405180910390f35b610208610433565b604051610215919061139d565b60405180910390f35b610226610459565b005b610242600480360381019061023d91906113b8565b6104e1565b005b61024c61085e565b604051610259919061139d565b60405180910390f35b61027c6004803603810190610277919061140b565b610887565b005b610298600480360381019061029391906111d1565b610947565b005b6102b460048036038101906102af9190611318565b610a96565b6040516102c1919061120d565b60405180910390f35b6102e460048036038101906102df91906111d1565b610abb565b005b61030060048036038101906102fb9190611318565b610b88565b005b61031c6004803603810190610317919061140b565b610e31565b005b610338600480360381019061033391906111d1565b610f28565b005b610354600480360381019061034f91906111d1565b610ff5565b6040516103619190611534565b60405180910390f35b600060026000838152602001908152602001600020600101549050919050565b60036020528060005260406000206000915054906101000a900460ff1681565b60046020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60006003600083815260200190815260200160002060009054906101000a900460ff16600681111561040e5761040d611228565b5b9050919050565b60026020528060005260406000206000915090508060010154905081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104616110ca565b73ffffffffffffffffffffffffffffffffffffffff1661047f61085e565b73ffffffffffffffffffffffffffffffffffffffff16146104d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cc906115b3565b60405180910390fd5b6104df60006110d2565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166105226110ca565b73ffffffffffffffffffffffffffffffffffffffff161461056f576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001826003600082815260200190815260200160002060009054906101000a900460ff1660068111156105a5576105a4611228565b5b8260068111156105b8576105b7611228565b5b146105ef576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff1615610684576040517f285d4e4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060405180604001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018581525090506002600086815260200190815260200160002060000181908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015550506001600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060006101000a81548160ff021916908315150217905550600160026000878152602001908152602001600020600001805490506107d59190611602565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000878152602001908152602001600020819055508360026000878152602001908152602001600020600101600082825461084f9190611636565b92505081905550505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61088f6110ca565b73ffffffffffffffffffffffffffffffffffffffff166108ad61085e565b73ffffffffffffffffffffffffffffffffffffffff1614610903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fa906115b3565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166109886110ca565b73ffffffffffffffffffffffffffffffffffffffff16146109d5576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816003600082815260200190815260200160002060009054906101000a900460ff166006811115610a0b57610a0a611228565b5b826006811115610a1e57610a1d611228565b5b14610a55576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026003600085815260200190815260200160002060006101000a81548160ff02191690836006811115610a8c57610a8b611228565b5b0217905550505050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610afc6110ca565b73ffffffffffffffffffffffffffffffffffffffff1614610b49576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016003600083815260200190815260200160002060006101000a81548160ff02191690836006811115610b8057610b7f611228565b5b021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610bc96110ca565b73ffffffffffffffffffffffffffffffffffffffff1614610c16576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816003600082815260200190815260200160002060009054906101000a900460ff166006811115610c4c57610c4b611228565b5b826006811115610c5f57610c5e611228565b5b14610c96576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff16610d2a576040517f4c0e0faf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000205490506000600260008681526020019081526020016000206000018281548110610da957610da861168c565b5b90600052602060002090600202016001015490506000600260008781526020019081526020016000206000018381548110610de757610de661168c565b5b90600052602060002090600202016001018190555080600260008781526020019081526020016000206001016000828254610e229190611602565b92505081905550505050505050565b610e396110ca565b73ffffffffffffffffffffffffffffffffffffffff16610e5761085e565b73ffffffffffffffffffffffffffffffffffffffff1614610ead576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea4906115b3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f139061172d565b60405180910390fd5b610f25816110d2565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610f696110ca565b73ffffffffffffffffffffffffffffffffffffffff1614610fb6576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60066003600083815260200190815260200160002060006101000a81548160ff02191690836006811115610fed57610fec611228565b5b021790555050565b606060026000838152602001908152602001600020600001805480602002602001604051908101604052809291908181526020016000905b828210156110bf57838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001906001019061102d565b505050509050919050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b6111ae8161119b565b81146111b957600080fd5b50565b6000813590506111cb816111a5565b92915050565b6000602082840312156111e7576111e6611196565b5b60006111f5848285016111bc565b91505092915050565b6112078161119b565b82525050565b600060208201905061122260008301846111fe565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6007811061126857611267611228565b5b50565b600081905061127982611257565b919050565b60006112898261126b565b9050919050565b6112998161127e565b82525050565b60006020820190506112b46000830184611290565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112e5826112ba565b9050919050565b6112f5816112da565b811461130057600080fd5b50565b600081359050611312816112ec565b92915050565b6000806040838503121561132f5761132e611196565b5b600061133d85828601611303565b925050602061134e858286016111bc565b9150509250929050565b60008115159050919050565b61136d81611358565b82525050565b60006020820190506113886000830184611364565b92915050565b611397816112da565b82525050565b60006020820190506113b2600083018461138e565b92915050565b6000806000606084860312156113d1576113d0611196565b5b60006113df86828701611303565b93505060206113f0868287016111bc565b9250506040611401868287016111bc565b9150509250925092565b60006020828403121561142157611420611196565b5b600061142f84828501611303565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61146d816112da565b82525050565b61147c8161119b565b82525050565b6040820160008201516114986000850182611464565b5060208201516114ab6020850182611473565b50505050565b60006114bd8383611482565b60408301905092915050565b6000602082019050919050565b60006114e182611438565b6114eb8185611443565b93506114f683611454565b8060005b8381101561152757815161150e88826114b1565b9750611519836114c9565b9250506001810190506114fa565b5085935050505092915050565b6000602082019050818103600083015261154e81846114d6565b905092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061159d602083611556565b91506115a882611567565b602082019050919050565b600060208201905081810360008301526115cc81611590565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061160d8261119b565b91506116188361119b565b92508282101561162b5761162a6115d3565b5b828203905092915050565b60006116418261119b565b915061164c8361119b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611681576116806115d3565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611717602683611556565b9150611722826116bb565b604082019050919050565b600060208201905081810360008301526117468161170a565b905091905056fea26469706673582212205b0fcc6392831c7867d4a9cc314f56ed761a1abe0fe1e8fcca4874e7a99d93a064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initializeQuestion(uint256)": {
        "params": {
          "questionId": "The id of the question"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setQuestionApi(address)": {
        "params": {
          "_newApi": "The new address of the question API."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initializeQuestion(uint256)": {
        "notice": "Initializes a question to draft."
      },
      "setQuestionApi(address)": {
        "notice": "Sets the address of the question API."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4977,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "questionApi",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4535,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "votes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(QuestionVote)4808_storage)"
      },
      {
        "astId": 4540,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "state",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_enum(STATE)4904)"
      },
      {
        "astId": 4546,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "hasVoted",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 4552,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "questionIndex",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Vote)4813_storage)dyn_storage": {
        "base": "t_struct(Vote)4813_storage",
        "encoding": "dynamic_array",
        "label": "struct QuestionStateController.Vote[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(STATE)4904": {
        "encoding": "inplace",
        "label": "enum IQuestionStateController.STATE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_enum(STATE)4904)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum IQuestionStateController.STATE)",
        "numberOfBytes": "32",
        "value": "t_enum(STATE)4904"
      },
      "t_mapping(t_uint256,t_struct(QuestionVote)4808_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct QuestionStateController.QuestionVote)",
        "numberOfBytes": "32",
        "value": "t_struct(QuestionVote)4808_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(QuestionVote)4808_storage": {
        "encoding": "inplace",
        "label": "struct QuestionStateController.QuestionVote",
        "members": [
          {
            "astId": 4805,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "votes",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Vote)4813_storage)dyn_storage"
          },
          {
            "astId": 4807,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "totalVoteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Vote)4813_storage": {
        "encoding": "inplace",
        "label": "struct QuestionStateController.Vote",
        "members": [
          {
            "astId": 4810,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "voter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4812,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}