{
  "address": "0x4A679253410272dd5232B3Ff7cF5dbB88f295319",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bountyQuestion",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "HasAlreadyVotedForQuestion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HasNotVotedForQuestion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStateTransition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheApi",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getHasUserVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum STATE",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getQuestions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalVotes",
              "type": "uint256"
            },
            {
              "internalType": "enum STATE",
              "name": "questionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct QuestionData[]",
          "name": "questions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum STATE",
          "name": "currentState",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "currentQuestionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getQuestionsByState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalVotes",
              "type": "uint256"
            },
            {
              "internalType": "enum STATE",
              "name": "questionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct QuestionData[]",
          "name": "found",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "internalType": "enum STATE",
          "name": "currentState",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getTotalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getVoters",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "voters",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "initializeQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "publish",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionApi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "questionByState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalVotes",
          "type": "uint256"
        },
        {
          "internalType": "enum IQuestionStateController.STATE",
          "name": "questionState",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "questionIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "setDisqualifiedState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newApi",
          "type": "address"
        }
      ],
      "name": "setQuestionApi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newQuestion",
          "type": "address"
        }
      ],
      "name": "setQuestionProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "unvoteFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "voteFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalVotes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf6917cb9131b29de740c3c07fbc3a990bbbee3f9e6cd8ab793b27cc1257502de",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x4A679253410272dd5232B3Ff7cF5dbB88f295319",
    "transactionIndex": 0,
    "gasUsed": "2144949",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000100000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000300000000000000000000000002100000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x3ed89c07cb158851ec72fc175b1354aa87ba994393a68fb444ced839130491a8",
    "transactionHash": "0xf6917cb9131b29de740c3c07fbc3a990bbbee3f9e6cd8ab793b27cc1257502de",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 219,
        "transactionHash": "0xf6917cb9131b29de740c3c07fbc3a990bbbee3f9e6cd8ab793b27cc1257502de",
        "address": "0x4A679253410272dd5232B3Ff7cF5dbB88f295319",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3ed89c07cb158851ec72fc175b1354aa87ba994393a68fb444ced839130491a8"
      }
    ],
    "blockNumber": 219,
    "cumulativeGasUsed": "2144949",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x322813Fd9A801c5507c9de605d63CEA4f2CE6c44"],
  "numDeployments": 1,
  "solcInputHash": "4a2696ec6ec05bd8e211447d338ac135",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bountyQuestion\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"HasAlreadyVotedForQuestion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HasNotVotedForQuestion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStateTransition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheApi\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getHasUserVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum STATE\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getQuestions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"enum STATE\",\"name\":\"questionState\",\"type\":\"uint8\"}],\"internalType\":\"struct QuestionData[]\",\"name\":\"questions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum STATE\",\"name\":\"currentState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"currentQuestionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getQuestionsByState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"enum STATE\",\"name\":\"questionState\",\"type\":\"uint8\"}],\"internalType\":\"struct QuestionData[]\",\"name\":\"found\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum STATE\",\"name\":\"currentState\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getTotalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"initializeQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"publish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionApi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"setDisqualifiedState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newApi\",\"type\":\"address\"}],\"name\":\"setQuestionApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newQuestion\",\"type\":\"address\"}],\"name\":\"setQuestionProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"unvoteFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"voteFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initializeQuestion(uint256)\":{\"params\":{\"questionId\":\"The id of the question\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setQuestionApi(address)\":{\"params\":{\"_newApi\":\"The new address of the question API.\"}},\"setQuestionProxy(address)\":{\"params\":{\"newQuestion\":\"The address of the new BountyQuestion contract.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initializeQuestion(uint256)\":{\"notice\":\"Initializes a question to draft.\"},\"questionIndex(address,uint256)\":{\"notice\":\"For a given address and a given question, tracks the index of their vote in the votes[]\"},\"setQuestionApi(address)\":{\"notice\":\"Sets the address of the question API.\"},\"setQuestionProxy(address)\":{\"notice\":\"Allows the owner to set the BountyQuestion contract address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/QuestionStateController.sol\":\"QuestionStateController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/QuestionStateEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum STATE {\\n    UNINIT,\\n    VOTING,\\n    PUBLISHED,\\n    DISQUALIFIED,\\n    COMPLETED\\n}\\n\",\"keccak256\":\"0x4a2d21883586044bf77a96e2d19266d75b55b2ca8940780115f35cc581c32902\",\"license\":\"MIT\"},\"src/contracts/Protocol/QuestionStateController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IQuestionStateController.sol\\\";\\nimport \\\"./interfaces/IBountyQuestion.sol\\\";\\n\\n// Enums\\nimport \\\"./Enums/QuestionStateEnum.sol\\\";\\n\\n// Structs\\nimport \\\"./Structs/QuestionData.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\ncontract QuestionStateController is IQuestionStateController, Ownable, OnlyApi {\\n    // Mapping for all questions that are upvoted by the user?\\n    mapping(address => mapping(uint256 => bool)) public hasVoted;\\n\\n    /// @notice For a given address and a given question, tracks the index of their vote in the votes[]\\n    mapping(address => mapping(uint256 => uint256)) public questionIndex; // TODO userVoteIndex\\n\\n    mapping(uint256 => Votes) public votes;\\n\\n    IBountyQuestion private _bountyQuestion;\\n\\n    // TODO do we want user to lose their metric if a question is closed? they voted on something bad\\n\\n    constructor(address bountyQuestion) {\\n        _bountyQuestion = IBountyQuestion(bountyQuestion);\\n    }\\n\\n    /**\\n     * @notice Initializes a question to draft.\\n     * @param questionId The id of the question\\n     */\\n    function initializeQuestion(uint256 questionId) public onlyApi {\\n        _bountyQuestion.updateState(questionId, STATE.VOTING);\\n\\n        votes[questionId].totalVotes = 1;\\n    }\\n\\n    function publish(uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // if some voting barrier is passed, we can publish the question\\n        _bountyQuestion.updateState(questionId, STATE.PUBLISHED);\\n    }\\n\\n    function voteFor(address _user, uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        if (hasVoted[_user][questionId]) revert HasAlreadyVotedForQuestion();\\n\\n        // Effects\\n        hasVoted[_user][questionId] = true;\\n\\n        votes[questionId].totalVotes++;\\n        votes[questionId].voters.push(_user);\\n\\n        questionIndex[_user][questionId] = votes[questionId].voters.length - 1;\\n\\n        // Interactions\\n    }\\n\\n    function unvoteFor(address _user, uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        if (!hasVoted[_user][questionId]) revert HasNotVotedForQuestion();\\n\\n        // Effects\\n        votes[questionId].totalVotes--;\\n\\n        uint256 index = questionIndex[_user][questionId];\\n        delete votes[questionId].voters[index];\\n\\n        hasVoted[_user][questionId] = false;\\n\\n        // Interactions\\n    }\\n\\n    function setDisqualifiedState(uint256 questionId) public onlyApi {\\n        _bountyQuestion.updateState(questionId, STATE.DISQUALIFIED);\\n    }\\n\\n    // TODO batch voting and batch operations and look into arrays as parameters security risk\\n\\n    //------------------------------------------------------ View Functions\\n\\n    function getState(uint256 questionId) public view returns (STATE currentState) {\\n        return _bountyQuestion.getQuestionData(questionId).questionState;\\n    }\\n\\n    function getVoters(uint256 questionId) public view returns (address[] memory voters) {\\n        return votes[questionId].voters;\\n    }\\n\\n    function getTotalVotes(uint256 questionId) public view returns (uint256) {\\n        return votes[questionId].totalVotes;\\n    }\\n\\n    function getHasUserVoted(address user, uint256 questionId) external view returns (bool) {\\n        return hasVoted[user][questionId];\\n    }\\n\\n    function getQuestions(\\n        STATE state,\\n        uint256 offset,\\n        uint256 limit\\n    ) public view returns (QuestionData[] memory questions) {\\n        uint256 highestQuestion = _bountyQuestion.getMostRecentQuestion();\\n        if (limit > highestQuestion) limit = highestQuestion;\\n        if (offset > highestQuestion) offset = highestQuestion;\\n\\n        questions = new QuestionData[](limit);\\n\\n        uint256 found = 0;\\n        QuestionData memory cur;\\n\\n        for (uint256 i = 0; i < highestQuestion; i++) {\\n            cur = _bountyQuestion.getQuestionData(i);\\n            if (cur.questionState == state) {\\n                questions[found] = cur;\\n                found++;\\n                if (found == limit) break;\\n            }\\n        }\\n\\n        return questions;\\n    }\\n\\n    function getQuestionsByState(\\n        STATE currentState,\\n        uint256 currentQuestionId,\\n        uint256 offset\\n    ) public view returns (QuestionData[] memory found) {\\n        uint256 j = 0;\\n        uint256 limit;\\n        uint256 sizeOfArray;\\n        currentQuestionId -= 1;\\n        if (currentQuestionId > offset) {\\n            limit = currentQuestionId - offset;\\n            sizeOfArray = (currentQuestionId - offset) + 1;\\n        } else {\\n            limit = 1;\\n            sizeOfArray = currentQuestionId;\\n        }\\n        found = new QuestionData[](sizeOfArray);\\n        for (uint256 i = currentQuestionId; i >= limit; i--) {\\n            if (_bountyQuestion.getQuestionData(i).questionState == currentState) {\\n                found[j] = _bountyQuestion.getQuestionData(i);\\n                found[j].totalVotes = votes[i].totalVotes;\\n                j++;\\n            }\\n        }\\n        return found;\\n    }\\n\\n    //------------------------------------------------------ OWNER FUNCTIONS\\n\\n    /**\\n     * @notice Allows the owner to set the BountyQuestion contract address.\\n     * @param newQuestion The address of the new BountyQuestion contract.\\n     */\\n    function setQuestionProxy(address newQuestion) public onlyOwner {\\n        if (newQuestion == address(0)) revert InvalidAddress();\\n        _bountyQuestion = IBountyQuestion(newQuestion);\\n    }\\n\\n    //------------------------------------------------------ Errors\\n    error HasNotVotedForQuestion();\\n    error HasAlreadyVotedForQuestion();\\n    error InvalidStateTransition();\\n    error InvalidAddress();\\n\\n    //------------------------------------------------------ Structs\\n    modifier onlyState(STATE required, uint256 questionId) {\\n        if (required != getState(questionId)) revert InvalidStateTransition();\\n        _;\\n    }\\n\\n    struct Votes {\\n        address[] voters;\\n        uint256 totalVotes;\\n    }\\n}\\n\",\"keccak256\":\"0x41be4bbe794b77a3f9cc9443ae9434b02be964770aa63609d54ddfe6470fc8b5\",\"license\":\"MIT\"},\"src/contracts/Protocol/Structs/QuestionData.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Enums/QuestionStateEnum.sol\\\";\\n\\nstruct QuestionData {\\n    uint256 questionId;\\n    address author;\\n    string uri;\\n    // TODO this is only used for our bulk read functions and is not actively tracked, it shouldn't be here.\\n    uint256 totalVotes;\\n    STATE questionState;\\n}\\n\",\"keccak256\":\"0xf71721d270e9ec079299d4f4c4a18f7cc24f95803c846ddb28937082a93775e2\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IBountyQuestion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Structs/QuestionData.sol\\\";\\n\\ninterface IBountyQuestion {\\n    function getQuestionData(uint256 questionId) external view returns (QuestionData memory);\\n\\n    function getMostRecentQuestion() external view returns (uint256);\\n\\n    function updateState(uint256 questionId, STATE newState) external;\\n}\\n\",\"keccak256\":\"0x7fbcc765c545a0ab30f9e3ce66aee3616352f28076b56662de71a0e525448268\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IQuestionStateController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Enums/QuestionStateEnum.sol\\\";\\n\\ninterface IQuestionStateController {\\n    function initializeQuestion(uint256 questionId) external;\\n\\n    function voteFor(address _user, uint256 questionId) external;\\n\\n    function unvoteFor(address _user, uint256 questionId) external;\\n\\n    function publish(uint256 question) external;\\n\\n    function getState(uint256 quesitonId) external view returns (STATE currentState);\\n\\n    function getHasUserVoted(address user, uint256 questionId) external view returns (bool);\\n\\n    function setDisqualifiedState(uint256 questionId) external;\\n}\\n\",\"keccak256\":\"0x6dc6645a93ddc84005da520f6e1a0f9633a7dfc8cb58b56bcca268c796248558\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002716380380620027168339818101604052810190620000379190620001d5565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000207565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200019d8262000170565b9050919050565b620001af8162000190565b8114620001bb57600080fd5b50565b600081519050620001cf81620001a4565b92915050565b600060208284031215620001ee57620001ed6200016b565b5b6000620001fe84828501620001be565b91505092915050565b6124ff80620002176000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638da5cb5b116100ad578063d68993e511610071578063d68993e514610367578063d6a8f79714610397578063e78daa75146103b3578063ecf24b31146103cf578063f2fde38b146103eb5761012c565b80638da5cb5b146102c55780639e0ffcd5146102e3578063bc41029714610313578063c0875dfd1461032f578063cc4ef1191461034b5761012c565b80635df81330116100f45780635df813301461020d5780636baef4971461023d5780636e0a7e671461025b578063715018a61461028b57806386b646f2146102955761012c565b806324d6d601146101315780632ce35e111461014d578063425458251461017d57806344c9af28146101ad5780635856015a146101dd575b600080fd5b61014b60048036038101906101469190611a8c565b610407565b005b61016760048036038101906101629190611acc565b61071e565b6040516101749190611b08565b60405180910390f35b61019760048036038101906101929190611a8c565b61073e565b6040516101a49190611b3e565b60405180910390f35b6101c760048036038101906101c29190611acc565b61076d565b6040516101d49190611bd0565b60405180910390f35b6101f760048036038101906101f29190611c10565b61081b565b6040516102049190611e61565b60405180910390f35b61022760048036038101906102229190611acc565b610a5b565b6040516102349190611b08565b60405180910390f35b610245610a79565b6040516102529190611e92565b60405180910390f35b61027560048036038101906102709190611a8c565b610a9f565b6040516102829190611b3e565b60405180910390f35b610293610b07565b005b6102af60048036038101906102aa9190611acc565b610b8f565b6040516102bc9190611f5c565b60405180910390f35b6102cd610c33565b6040516102da9190611e92565b60405180910390f35b6102fd60048036038101906102f89190611c10565b610c5c565b60405161030a9190611e61565b60405180910390f35b61032d60048036038101906103289190611f7e565b610f06565b005b61034960048036038101906103449190611f7e565b61102c565b005b61036560048036038101906103609190611acc565b6110ec565b005b610381600480360381019061037c9190611a8c565b611277565b60405161038e9190611b08565b60405180910390f35b6103b160048036038101906103ac9190611acc565b61129c565b005b6103cd60048036038101906103c89190611a8c565b6113d9565b005b6103e960048036038101906103e49190611acc565b6116a9565b005b61040560048036038101906104009190611f7e565b6117ca565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166104486118c1565b73ffffffffffffffffffffffffffffffffffffffff1614610495576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816104a18161076d565b60048111156104b3576104b2611b59565b5b8260048111156104c6576104c5611b59565b5b146104fd576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff1615610592576040517f285d4e4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff02191690831515021790555060046000848152602001908152602001600020600101600081548092919061062290611fda565b919050555060046000848152602001908152602001600020600001849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160046000858152602001908152602001600020600001805490506106c49190612022565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000208190555050505050565b600060046000838152602001908152602001600020600101549050919050565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42836040518263ffffffff1660e01b81526004016107ca9190611b08565b600060405180830381865afa1580156107e7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610810919061226d565b608001519050919050565b60606000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166374bedfc96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561088c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b091906122b6565b9050808311156108be578092505b808411156108ca578093505b8267ffffffffffffffff8111156108e4576108e361205b565b5b60405190808252806020026020018201604052801561091d57816020015b61090a61198d565b8152602001906001900390816109025790505b509150600061092a61198d565b60005b83811015610a5057600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42826040518263ffffffff1660e01b81526004016109909190611b08565b600060405180830381865afa1580156109ad573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109d6919061226d565b91508760048111156109eb576109ea611b59565b5b82608001516004811115610a0257610a01611b59565b5b03610a3d5781858481518110610a1b57610a1a6122e3565b5b60200260200101819052508280610a3190611fda565b93505085830315610a50575b8080610a4890611fda565b91505061092d565b505050509392505050565b60046020528060005260406000206000915090508060010154905081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b610b0f6118c1565b73ffffffffffffffffffffffffffffffffffffffff16610b2d610c33565b73ffffffffffffffffffffffffffffffffffffffff1614610b83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7a9061236f565b60405180910390fd5b610b8d60006118c9565b565b606060046000838152602001908152602001600020600001805480602002602001604051908101604052809291908181526020018280548015610c2757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610bdd575b50505050509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060008080600186610c6f9190612022565b955084861115610ca6578486610c859190612022565b915060018587610c959190612022565b610c9f919061238f565b9050610cae565b600191508590505b8067ffffffffffffffff811115610cc857610cc761205b565b5b604051908082528060200260200182016040528015610d0157816020015b610cee61198d565b815260200190600190039081610ce65790505b50935060008690505b828110610efb57876004811115610d2457610d23611b59565b5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42836040518263ffffffff1660e01b8152600401610d7f9190611b08565b600060405180830381865afa158015610d9c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610dc5919061226d565b608001516004811115610ddb57610dda611b59565b5b03610ee857600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42826040518263ffffffff1660e01b8152600401610e3b9190611b08565b600060405180830381865afa158015610e58573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e81919061226d565b858581518110610e9457610e936122e3565b5b60200260200101819052506004600082815260200190815260200160002060010154858581518110610ec957610ec86122e3565b5b602002602001015160600181815250508380610ee490611fda565b9450505b8080610ef3906123e5565b915050610d0a565b505050509392505050565b610f0e6118c1565b73ffffffffffffffffffffffffffffffffffffffff16610f2c610c33565b73ffffffffffffffffffffffffffffffffffffffff1614610f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f799061236f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fe8576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6110346118c1565b73ffffffffffffffffffffffffffffffffffffffff16611052610c33565b73ffffffffffffffffffffffffffffffffffffffff16146110a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109f9061236f565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661112d6118c1565b73ffffffffffffffffffffffffffffffffffffffff161461117a576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816111868161076d565b600481111561119857611197611b59565b5b8260048111156111ab576111aa611b59565b5b146111e2576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffbafdfe8460026040518363ffffffff1660e01b815260040161124092919061240e565b600060405180830381600087803b15801561125a57600080fd5b505af115801561126e573d6000803e3d6000fd5b50505050505050565b6003602052816000526040600020602052806000526040600020600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112dd6118c1565b73ffffffffffffffffffffffffffffffffffffffff161461132a576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffbafdfe8260016040518363ffffffff1660e01b815260040161138892919061240e565b600060405180830381600087803b1580156113a257600080fd5b505af11580156113b6573d6000803e3d6000fd5b505050506001600460008381526020019081526020016000206001018190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661141a6118c1565b73ffffffffffffffffffffffffffffffffffffffff1614611467576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816114738161076d565b600481111561148557611484611b59565b5b82600481111561149857611497611b59565b5b146114cf576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff16611563576040517f4c0e0faf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60046000848152602001908152602001600020600101600081548092919061158a906123e5565b91905055506000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054905060046000858152602001908152602001600020600001818154811061160c5761160b6122e3565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116ea6118c1565b73ffffffffffffffffffffffffffffffffffffffff1614611737576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffbafdfe8260036040518363ffffffff1660e01b815260040161179592919061240e565b600060405180830381600087803b1580156117af57600080fd5b505af11580156117c3573d6000803e3d6000fd5b5050505050565b6117d26118c1565b73ffffffffffffffffffffffffffffffffffffffff166117f0610c33565b73ffffffffffffffffffffffffffffffffffffffff1614611846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183d9061236f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ac906124a9565b60405180910390fd5b6118be816118c9565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001600060048111156119de576119dd611b59565b5b81525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a23826119f8565b9050919050565b611a3381611a18565b8114611a3e57600080fd5b50565b600081359050611a5081611a2a565b92915050565b6000819050919050565b611a6981611a56565b8114611a7457600080fd5b50565b600081359050611a8681611a60565b92915050565b60008060408385031215611aa357611aa26119ee565b5b6000611ab185828601611a41565b9250506020611ac285828601611a77565b9150509250929050565b600060208284031215611ae257611ae16119ee565b5b6000611af084828501611a77565b91505092915050565b611b0281611a56565b82525050565b6000602082019050611b1d6000830184611af9565b92915050565b60008115159050919050565b611b3881611b23565b82525050565b6000602082019050611b536000830184611b2f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110611b9957611b98611b59565b5b50565b6000819050611baa82611b88565b919050565b6000611bba82611b9c565b9050919050565b611bca81611baf565b82525050565b6000602082019050611be56000830184611bc1565b92915050565b60058110611bf857600080fd5b50565b600081359050611c0a81611beb565b92915050565b600080600060608486031215611c2957611c286119ee565b5b6000611c3786828701611bfb565b9350506020611c4886828701611a77565b9250506040611c5986828701611a77565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611c9881611a56565b82525050565b611ca781611a18565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ce7578082015181840152602081019050611ccc565b83811115611cf6576000848401525b50505050565b6000601f19601f8301169050919050565b6000611d1882611cad565b611d228185611cb8565b9350611d32818560208601611cc9565b611d3b81611cfc565b840191505092915050565b611d4f81611baf565b82525050565b600060a083016000830151611d6d6000860182611c8f565b506020830151611d806020860182611c9e565b5060408301518482036040860152611d988282611d0d565b9150506060830151611dad6060860182611c8f565b506080830151611dc06080860182611d46565b508091505092915050565b6000611dd78383611d55565b905092915050565b6000602082019050919050565b6000611df782611c63565b611e018185611c6e565b935083602082028501611e1385611c7f565b8060005b85811015611e4f5784840389528151611e308582611dcb565b9450611e3b83611ddf565b925060208a01995050600181019050611e17565b50829750879550505050505092915050565b60006020820190508181036000830152611e7b8184611dec565b905092915050565b611e8c81611a18565b82525050565b6000602082019050611ea76000830184611e83565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611ee58383611c9e565b60208301905092915050565b6000602082019050919050565b6000611f0982611ead565b611f138185611eb8565b9350611f1e83611ec9565b8060005b83811015611f4f578151611f368882611ed9565b9750611f4183611ef1565b925050600181019050611f22565b5085935050505092915050565b60006020820190508181036000830152611f768184611efe565b905092915050565b600060208284031215611f9457611f936119ee565b5b6000611fa284828501611a41565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fe582611a56565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361201757612016611fab565b5b600182019050919050565b600061202d82611a56565b915061203883611a56565b92508282101561204b5761204a611fab565b5b828203905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61209382611cfc565b810181811067ffffffffffffffff821117156120b2576120b161205b565b5b80604052505050565b60006120c56119e4565b90506120d1828261208a565b919050565b600080fd5b6000815190506120ea81611a60565b92915050565b6000815190506120ff81611a2a565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff82111561212a5761212961205b565b5b61213382611cfc565b9050602081019050919050565b600061215361214e8461210f565b6120bb565b90508281526020810184848401111561216f5761216e61210a565b5b61217a848285611cc9565b509392505050565b600082601f83011261219757612196612105565b5b81516121a7848260208601612140565b91505092915050565b6000815190506121bf81611beb565b92915050565b600060a082840312156121db576121da612056565b5b6121e560a06120bb565b905060006121f5848285016120db565b6000830152506020612209848285016120f0565b602083015250604082015167ffffffffffffffff81111561222d5761222c6120d6565b5b61223984828501612182565b604083015250606061224d848285016120db565b6060830152506080612261848285016121b0565b60808301525092915050565b600060208284031215612283576122826119ee565b5b600082015167ffffffffffffffff8111156122a1576122a06119f3565b5b6122ad848285016121c5565b91505092915050565b6000602082840312156122cc576122cb6119ee565b5b60006122da848285016120db565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612359602083612312565b915061236482612323565b602082019050919050565b600060208201905081810360008301526123888161234c565b9050919050565b600061239a82611a56565b91506123a583611a56565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156123da576123d9611fab565b5b828201905092915050565b60006123f082611a56565b91506000820361240357612402611fab565b5b600182039050919050565b60006040820190506124236000830185611af9565b6124306020830184611bc1565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612493602683612312565b915061249e82612437565b604082019050919050565b600060208201905081810360008301526124c281612486565b905091905056fea26469706673582212209b4f08293fd24fcd78ff1958c80d4cae32c8acaeead71cf1e5a6f08c8da6944264736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80638da5cb5b116100ad578063d68993e511610071578063d68993e514610367578063d6a8f79714610397578063e78daa75146103b3578063ecf24b31146103cf578063f2fde38b146103eb5761012c565b80638da5cb5b146102c55780639e0ffcd5146102e3578063bc41029714610313578063c0875dfd1461032f578063cc4ef1191461034b5761012c565b80635df81330116100f45780635df813301461020d5780636baef4971461023d5780636e0a7e671461025b578063715018a61461028b57806386b646f2146102955761012c565b806324d6d601146101315780632ce35e111461014d578063425458251461017d57806344c9af28146101ad5780635856015a146101dd575b600080fd5b61014b60048036038101906101469190611a8c565b610407565b005b61016760048036038101906101629190611acc565b61071e565b6040516101749190611b08565b60405180910390f35b61019760048036038101906101929190611a8c565b61073e565b6040516101a49190611b3e565b60405180910390f35b6101c760048036038101906101c29190611acc565b61076d565b6040516101d49190611bd0565b60405180910390f35b6101f760048036038101906101f29190611c10565b61081b565b6040516102049190611e61565b60405180910390f35b61022760048036038101906102229190611acc565b610a5b565b6040516102349190611b08565b60405180910390f35b610245610a79565b6040516102529190611e92565b60405180910390f35b61027560048036038101906102709190611a8c565b610a9f565b6040516102829190611b3e565b60405180910390f35b610293610b07565b005b6102af60048036038101906102aa9190611acc565b610b8f565b6040516102bc9190611f5c565b60405180910390f35b6102cd610c33565b6040516102da9190611e92565b60405180910390f35b6102fd60048036038101906102f89190611c10565b610c5c565b60405161030a9190611e61565b60405180910390f35b61032d60048036038101906103289190611f7e565b610f06565b005b61034960048036038101906103449190611f7e565b61102c565b005b61036560048036038101906103609190611acc565b6110ec565b005b610381600480360381019061037c9190611a8c565b611277565b60405161038e9190611b08565b60405180910390f35b6103b160048036038101906103ac9190611acc565b61129c565b005b6103cd60048036038101906103c89190611a8c565b6113d9565b005b6103e960048036038101906103e49190611acc565b6116a9565b005b61040560048036038101906104009190611f7e565b6117ca565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166104486118c1565b73ffffffffffffffffffffffffffffffffffffffff1614610495576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816104a18161076d565b60048111156104b3576104b2611b59565b5b8260048111156104c6576104c5611b59565b5b146104fd576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff1615610592576040517f285d4e4b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff02191690831515021790555060046000848152602001908152602001600020600101600081548092919061062290611fda565b919050555060046000848152602001908152602001600020600001849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160046000858152602001908152602001600020600001805490506106c49190612022565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000208190555050505050565b600060046000838152602001908152602001600020600101549050919050565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42836040518263ffffffff1660e01b81526004016107ca9190611b08565b600060405180830381865afa1580156107e7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610810919061226d565b608001519050919050565b60606000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166374bedfc96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561088c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b091906122b6565b9050808311156108be578092505b808411156108ca578093505b8267ffffffffffffffff8111156108e4576108e361205b565b5b60405190808252806020026020018201604052801561091d57816020015b61090a61198d565b8152602001906001900390816109025790505b509150600061092a61198d565b60005b83811015610a5057600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42826040518263ffffffff1660e01b81526004016109909190611b08565b600060405180830381865afa1580156109ad573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109d6919061226d565b91508760048111156109eb576109ea611b59565b5b82608001516004811115610a0257610a01611b59565b5b03610a3d5781858481518110610a1b57610a1a6122e3565b5b60200260200101819052508280610a3190611fda565b93505085830315610a50575b8080610a4890611fda565b91505061092d565b505050509392505050565b60046020528060005260406000206000915090508060010154905081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16905092915050565b610b0f6118c1565b73ffffffffffffffffffffffffffffffffffffffff16610b2d610c33565b73ffffffffffffffffffffffffffffffffffffffff1614610b83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7a9061236f565b60405180910390fd5b610b8d60006118c9565b565b606060046000838152602001908152602001600020600001805480602002602001604051908101604052809291908181526020018280548015610c2757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610bdd575b50505050509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060008080600186610c6f9190612022565b955084861115610ca6578486610c859190612022565b915060018587610c959190612022565b610c9f919061238f565b9050610cae565b600191508590505b8067ffffffffffffffff811115610cc857610cc761205b565b5b604051908082528060200260200182016040528015610d0157816020015b610cee61198d565b815260200190600190039081610ce65790505b50935060008690505b828110610efb57876004811115610d2457610d23611b59565b5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42836040518263ffffffff1660e01b8152600401610d7f9190611b08565b600060405180830381865afa158015610d9c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610dc5919061226d565b608001516004811115610ddb57610dda611b59565b5b03610ee857600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f74bfd42826040518263ffffffff1660e01b8152600401610e3b9190611b08565b600060405180830381865afa158015610e58573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e81919061226d565b858581518110610e9457610e936122e3565b5b60200260200101819052506004600082815260200190815260200160002060010154858581518110610ec957610ec86122e3565b5b602002602001015160600181815250508380610ee490611fda565b9450505b8080610ef3906123e5565b915050610d0a565b505050509392505050565b610f0e6118c1565b73ffffffffffffffffffffffffffffffffffffffff16610f2c610c33565b73ffffffffffffffffffffffffffffffffffffffff1614610f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f799061236f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fe8576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6110346118c1565b73ffffffffffffffffffffffffffffffffffffffff16611052610c33565b73ffffffffffffffffffffffffffffffffffffffff16146110a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109f9061236f565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661112d6118c1565b73ffffffffffffffffffffffffffffffffffffffff161461117a576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816111868161076d565b600481111561119857611197611b59565b5b8260048111156111ab576111aa611b59565b5b146111e2576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffbafdfe8460026040518363ffffffff1660e01b815260040161124092919061240e565b600060405180830381600087803b15801561125a57600080fd5b505af115801561126e573d6000803e3d6000fd5b50505050505050565b6003602052816000526040600020602052806000526040600020600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112dd6118c1565b73ffffffffffffffffffffffffffffffffffffffff161461132a576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffbafdfe8260016040518363ffffffff1660e01b815260040161138892919061240e565b600060405180830381600087803b1580156113a257600080fd5b505af11580156113b6573d6000803e3d6000fd5b505050506001600460008381526020019081526020016000206001018190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661141a6118c1565b73ffffffffffffffffffffffffffffffffffffffff1614611467576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001816114738161076d565b600481111561148557611484611b59565b5b82600481111561149857611497611b59565b5b146114cf576040517f8f9a780c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff16611563576040517f4c0e0faf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60046000848152602001908152602001600020600101600081548092919061158a906123e5565b91905055506000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002054905060046000858152602001908152602001600020600001818154811061160c5761160b6122e3565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116ea6118c1565b73ffffffffffffffffffffffffffffffffffffffff1614611737576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ffbafdfe8260036040518363ffffffff1660e01b815260040161179592919061240e565b600060405180830381600087803b1580156117af57600080fd5b505af11580156117c3573d6000803e3d6000fd5b5050505050565b6117d26118c1565b73ffffffffffffffffffffffffffffffffffffffff166117f0610c33565b73ffffffffffffffffffffffffffffffffffffffff1614611846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183d9061236f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ac906124a9565b60405180910390fd5b6118be816118c9565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001600060048111156119de576119dd611b59565b5b81525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a23826119f8565b9050919050565b611a3381611a18565b8114611a3e57600080fd5b50565b600081359050611a5081611a2a565b92915050565b6000819050919050565b611a6981611a56565b8114611a7457600080fd5b50565b600081359050611a8681611a60565b92915050565b60008060408385031215611aa357611aa26119ee565b5b6000611ab185828601611a41565b9250506020611ac285828601611a77565b9150509250929050565b600060208284031215611ae257611ae16119ee565b5b6000611af084828501611a77565b91505092915050565b611b0281611a56565b82525050565b6000602082019050611b1d6000830184611af9565b92915050565b60008115159050919050565b611b3881611b23565b82525050565b6000602082019050611b536000830184611b2f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110611b9957611b98611b59565b5b50565b6000819050611baa82611b88565b919050565b6000611bba82611b9c565b9050919050565b611bca81611baf565b82525050565b6000602082019050611be56000830184611bc1565b92915050565b60058110611bf857600080fd5b50565b600081359050611c0a81611beb565b92915050565b600080600060608486031215611c2957611c286119ee565b5b6000611c3786828701611bfb565b9350506020611c4886828701611a77565b9250506040611c5986828701611a77565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611c9881611a56565b82525050565b611ca781611a18565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ce7578082015181840152602081019050611ccc565b83811115611cf6576000848401525b50505050565b6000601f19601f8301169050919050565b6000611d1882611cad565b611d228185611cb8565b9350611d32818560208601611cc9565b611d3b81611cfc565b840191505092915050565b611d4f81611baf565b82525050565b600060a083016000830151611d6d6000860182611c8f565b506020830151611d806020860182611c9e565b5060408301518482036040860152611d988282611d0d565b9150506060830151611dad6060860182611c8f565b506080830151611dc06080860182611d46565b508091505092915050565b6000611dd78383611d55565b905092915050565b6000602082019050919050565b6000611df782611c63565b611e018185611c6e565b935083602082028501611e1385611c7f565b8060005b85811015611e4f5784840389528151611e308582611dcb565b9450611e3b83611ddf565b925060208a01995050600181019050611e17565b50829750879550505050505092915050565b60006020820190508181036000830152611e7b8184611dec565b905092915050565b611e8c81611a18565b82525050565b6000602082019050611ea76000830184611e83565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611ee58383611c9e565b60208301905092915050565b6000602082019050919050565b6000611f0982611ead565b611f138185611eb8565b9350611f1e83611ec9565b8060005b83811015611f4f578151611f368882611ed9565b9750611f4183611ef1565b925050600181019050611f22565b5085935050505092915050565b60006020820190508181036000830152611f768184611efe565b905092915050565b600060208284031215611f9457611f936119ee565b5b6000611fa284828501611a41565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fe582611a56565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361201757612016611fab565b5b600182019050919050565b600061202d82611a56565b915061203883611a56565b92508282101561204b5761204a611fab565b5b828203905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61209382611cfc565b810181811067ffffffffffffffff821117156120b2576120b161205b565b5b80604052505050565b60006120c56119e4565b90506120d1828261208a565b919050565b600080fd5b6000815190506120ea81611a60565b92915050565b6000815190506120ff81611a2a565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff82111561212a5761212961205b565b5b61213382611cfc565b9050602081019050919050565b600061215361214e8461210f565b6120bb565b90508281526020810184848401111561216f5761216e61210a565b5b61217a848285611cc9565b509392505050565b600082601f83011261219757612196612105565b5b81516121a7848260208601612140565b91505092915050565b6000815190506121bf81611beb565b92915050565b600060a082840312156121db576121da612056565b5b6121e560a06120bb565b905060006121f5848285016120db565b6000830152506020612209848285016120f0565b602083015250604082015167ffffffffffffffff81111561222d5761222c6120d6565b5b61223984828501612182565b604083015250606061224d848285016120db565b6060830152506080612261848285016121b0565b60808301525092915050565b600060208284031215612283576122826119ee565b5b600082015167ffffffffffffffff8111156122a1576122a06119f3565b5b6122ad848285016121c5565b91505092915050565b6000602082840312156122cc576122cb6119ee565b5b60006122da848285016120db565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612359602083612312565b915061236482612323565b602082019050919050565b600060208201905081810360008301526123888161234c565b9050919050565b600061239a82611a56565b91506123a583611a56565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156123da576123d9611fab565b5b828201905092915050565b60006123f082611a56565b91506000820361240357612402611fab565b5b600182039050919050565b60006040820190506124236000830185611af9565b6124306020830184611bc1565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612493602683612312565b915061249e82612437565b604082019050919050565b600060208201905081810360008301526124c281612486565b905091905056fea26469706673582212209b4f08293fd24fcd78ff1958c80d4cae32c8acaeead71cf1e5a6f08c8da6944264736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initializeQuestion(uint256,string)": {
        "params": {
          "questionId": "The id of the question"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setQuestionApi(address)": {
        "params": {
          "_newApi": "The new address of the question API."
        }
      },
      "setQuestionProxy(address)": {
        "params": {
          "newQuestion": "The address of the new BountyQuestion contract."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initializeQuestion(uint256,string)": {
        "notice": "Initializes a question to draft."
      },
      "questionIndex(address,uint256)": {
        "notice": "For a given address and a given question, tracks the index of their vote in the votes[]"
      },
      "setQuestionApi(address)": {
        "notice": "Sets the address of the question API."
      },
      "setQuestionProxy(address)": {
        "notice": "Allows the owner to set the BountyQuestion contract address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3595,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "questionApi",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2006,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "hasVoted",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 2013,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "questionIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2018,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "votes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Votes)2531_storage)"
      },
      {
        "astId": 2021,
        "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
        "label": "_bountyQuestion",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IBountyQuestion)3384"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBountyQuestion)3384": {
        "encoding": "inplace",
        "label": "contract IBountyQuestion",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Votes)2531_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct QuestionStateController.Votes)",
        "numberOfBytes": "32",
        "value": "t_struct(Votes)2531_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Votes)2531_storage": {
        "encoding": "inplace",
        "label": "struct QuestionStateController.Votes",
        "members": [
          {
            "astId": 2528,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "voters",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 2530,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "totalVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4746,
            "contract": "src/contracts/Protocol/QuestionStateController.sol:QuestionStateController",
            "label": "questionState",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(STATE)5386"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
