{
  "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metricTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DuplicateAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoClaimableRewardsToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoMetricToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardsAreNotActive",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "harvester",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimable",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StakingChef.Staker",
          "name": "",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "harvester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimable",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StakingChef.Staker",
          "name": "",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_METRIC_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accumulatedWithPrecision",
          "type": "uint256"
        }
      ],
      "name": "accumulatedMetricDividedByShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressExistence",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "areRewardsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRewardBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLifeTimeShareValueEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetricPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetricToken",
      "outputs": [
        {
          "internalType": "contract MetricToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStake",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimable",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingChef.Staker",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalAllocationShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setLifetimeShareValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "metricAmount",
          "type": "uint256"
        }
      ],
      "name": "setMetricPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metricTokenAddress",
          "type": "address"
        }
      ],
      "name": "setMetricToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "metricAmount",
          "type": "uint256"
        }
      ],
      "name": "stakeMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "staker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isOn",
          "type": "bool"
        }
      ],
      "name": "toggleRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unStakeMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateAccumulatedStakingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewPendingClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewPendingHarvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9b098ee0b1a62fbe13233f4827a56e0712e82ccd8e145dc5d0e5c9fb578d4d9e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
    "transactionIndex": 0,
    "gasUsed": "1891130",
    "logsBloom": "0x
    "blockHash": "0x12086c97c64f6639cfe0c46e532059cb67649bcbdb5625a40735000d802b224c",
    "transactionHash": "0x9b098ee0b1a62fbe13233f4827a56e0712e82ccd8e145dc5d0e5c9fb578d4d9e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21,
        "transactionHash": "0x9b098ee0b1a62fbe13233f4827a56e0712e82ccd8e145dc5d0e5c9fb578d4d9e",
        "address": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x12086c97c64f6639cfe0c46e532059cb67649bcbdb5625a40735000d802b224c"
      }
    ],
    "blockNumber": 21,
    "cumulativeGasUsed": "1891130",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0165878A594ca255338adfa4d48449f69242Eb8F"
  ],
  "numDeployments": 1,
  "solcInputHash": "2384253e838e0764d6e4e972a08b52d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metricTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DuplicateAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoClaimableRewardsToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoMetricToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardsAreNotActive\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"harvester\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StakingChef.Staker\",\"name\":\"\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"harvester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StakingChef.Staker\",\"name\":\"\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_METRIC_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulatedWithPrecision\",\"type\":\"uint256\"}],\"name\":\"accumulatedMetricDividedByShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areRewardsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLifeTimeShareValueEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetricPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetricToken\",\"outputs\":[{\"internalType\":\"contract MetricToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingChef.Staker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAllocationShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLifetimeShareValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"metricAmount\",\"type\":\"uint256\"}],\"name\":\"setMetricPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metricTokenAddress\",\"type\":\"address\"}],\"name\":\"setMetricToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"metricAmount\",\"type\":\"uint256\"}],\"name\":\"stakeMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isOn\",\"type\":\"bool\"}],\"name\":\"toggleRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unStakeMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAccumulatedStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewPendingClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewPendingHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/StakingChef.sol\":\"StakingChef\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/Chef.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./MetricToken.sol\\\";\\n\\n// POSSIBLE FUTURE ITERATIONS\\n// TODO implement claim(address)\\n// TODO implement staking function\\n// TODO implement payable function\\n// TODO implement withdrawl function\\n// TODO implement updatedAccumulatedAllocations\\n\\n// TODO WE ADD THESE TO MAIN CHEF or should each contract have it's own\\n// TODO we make below more loosely coupled\\n// TODO viewPendingHarvest\\n// TODO viewPendingClaims\\n\\nabstract contract Chef is Ownable {\\n    uint256 private _metricPerBlock;\\n    uint256 public constant ACC_METRIC_PRECISION = 1e12;\\n\\n    bool private _rewardsActive;\\n    uint256 private _lastRewardBlock;\\n    uint256 private _lifetimeShareValue;\\n    uint256 private _totalAllocShares;\\n\\n    MetricToken private metric;\\n\\n    //------------------------------------------------------Setters\\n\\n    function toggleRewards(bool isOn) public onlyOwner {\\n        _rewardsActive = isOn;\\n        setLastRewardBlock();\\n    }\\n\\n    function setMetricPerBlock(uint256 metricAmount) public virtual onlyOwner {\\n        _metricPerBlock = metricAmount * 10**18;\\n    }\\n\\n    function setLastRewardBlock() internal virtual {\\n        _lastRewardBlock = block.number;\\n    }\\n\\n    function setMetricToken(address metricTokenAddress) public virtual onlyOwner {\\n        metric = MetricToken(metricTokenAddress);\\n    }\\n\\n    function setLifetimeShareValue() public virtual {\\n        uint256 accumulated = getAccumulated();\\n        uint256 accumulatedWithMetricPrecision = getAcculatedWithmetricPrecision(accumulated);\\n        _lifetimeShareValue = _lifetimeShareValue + accumulatedMetricDividedByShares(accumulatedWithMetricPrecision);\\n        setLastRewardBlock();\\n    }\\n\\n    function getLifeTimeShareValueEstimate() public view virtual returns (uint256) {\\n        uint256 accumulated = getAccumulated();\\n        uint256 accumulatedWithMetricPrecision = getAcculatedWithmetricPrecision(accumulated);\\n        uint256 lifetimesharevalue = getLifetimeShareValue();\\n        return lifetimesharevalue + accumulatedMetricDividedByShares(accumulatedWithMetricPrecision);\\n    }\\n\\n    function addTotalAllocShares(uint256 shares) internal virtual {\\n        _totalAllocShares = _totalAllocShares + shares;\\n    }\\n\\n    function addTotalAllocShares(uint256 oldShares, uint256 newShares) internal virtual {\\n        _totalAllocShares = _totalAllocShares - oldShares + newShares;\\n    }\\n\\n    function removeAllocShares(uint256 oldShares) internal virtual {\\n        _totalAllocShares = _totalAllocShares - oldShares;\\n    }\\n\\n    //------------------------------------------------------Getters\\n\\n    function getMetricPerBlock() public view virtual returns (uint256) {\\n        return _metricPerBlock;\\n    }\\n\\n    function getLastRewardBlock() public view virtual returns (uint256) {\\n        return _lastRewardBlock;\\n    }\\n\\n    function areRewardsActive() public view virtual returns (bool) {\\n        return _rewardsActive;\\n    }\\n\\n    function getAccumulated() internal view virtual returns (uint256) {\\n        uint256 blocksSince = block.number - getLastRewardBlock();\\n        return blocksSince * getMetricPerBlock();\\n    }\\n\\n    function getAcculatedWithmetricPrecision(uint256 accumulated) internal view virtual returns (uint256) {\\n        return accumulated * ACC_METRIC_PRECISION;\\n    }\\n\\n    function getTotalAllocationShares() public view returns (uint256) {\\n        return _totalAllocShares;\\n    }\\n\\n    function getLifetimeShareValue() internal view returns (uint256) {\\n        return _lifetimeShareValue;\\n    }\\n\\n    function accumulatedMetricDividedByShares(uint256 accumulatedWithPrecision) public view returns (uint256) {\\n        return accumulatedWithPrecision / getTotalAllocationShares();\\n    }\\n\\n    function getMetricToken() public view returns (MetricToken) {\\n        return metric;\\n    }\\n\\n    //------------------------------------------------------Support Functions\\n\\n    mapping(address => bool) public addressExistence;\\n    modifier nonDuplicated(address _address) {\\n        if (addressExistence[_address] == true) revert DuplicateAddress();\\n        addressExistence[_address] = true;\\n        _;\\n    }\\n\\n    //------------------------------------------------------Errors\\n    error DuplicateAddress();\\n\\n    //------------------------------------------------------Events\\n    event Harvest(address harvester, uint256 agIndex, uint256 amount);\\n    event Withdraw(address withdrawer, uint256 agIndex, uint256 amount);\\n}\\n\",\"keccak256\":\"0x47eb05ce432308cc32e14b3c7354fd62a59167e3daa97a93dd6d8f3937dfcc8e\",\"license\":\"MIT\"},\"src/contracts/MetricToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// @custom:security-contact contracts@metricsdao.com\\ncontract MetricToken is ERC20 {\\n    constructor() ERC20(\\\"METRIC\\\", \\\"METRIC\\\") {\\n        _mint(_msgSender(), 1000000000 * 10**decimals());\\n    }\\n}\\n\",\"keccak256\":\"0x015317ec77ea633af5f2af9cde22891298225bbd33fc6309c06d87579920329b\",\"license\":\"MIT\"},\"src/contracts/StakingChef.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Chef.sol\\\";\\n\\ncontract StakingChef is Chef {\\n    mapping(address => Staker) public staker;\\n\\n    constructor(address metricTokenAddress) {\\n        setMetricToken(metricTokenAddress);\\n        setMetricPerBlock(4);\\n        toggleRewards(false);\\n    }\\n\\n    // --------------------------------------------------------------------- staking functions\\n    function stakeMetric(uint256 metricAmount) external {\\n        // Effects\\n        Staker storage stake = staker[_msgSender()];\\n\\n        if (areRewardsActive() && getTotalAllocationShares() > 0) {\\n            updateAccumulatedStakingRewards();\\n        }\\n        staker[_msgSender()] = Staker({\\n            shares: stake.shares + metricAmount,\\n            startDate: block.timestamp,\\n            rewardDebt: stake.rewardDebt + (((metricAmount) * getLifetimeShareValue()) / ACC_METRIC_PRECISION),\\n            claimable: stake.claimable\\n        });\\n\\n        addTotalAllocShares(metricAmount);\\n\\n        // Interactions\\n        SafeERC20.safeTransferFrom(IERC20(getMetricToken()), _msgSender(), address(this), metricAmount);\\n    }\\n\\n    function updateAccumulatedStakingRewards() public {\\n        if (!areRewardsActive()) revert RewardsAreNotActive();\\n        if (block.number <= getLastRewardBlock()) {\\n            return;\\n        }\\n\\n        setLifetimeShareValue();\\n    }\\n\\n    // --------------------------------------------------------------------- Manage rewards and Principal\\n\\n    function claim() public {\\n        // Checks\\n        if (viewPendingHarvest() == 0) revert NoClaimableRewardsToWithdraw();\\n\\n        // Effects\\n        Staker storage stake = staker[_msgSender()];\\n        harvest();\\n\\n        uint256 toClaim = stake.claimable;\\n        stake.claimable = 0;\\n\\n        // Interactions\\n        SafeERC20.safeTransfer(IERC20(getMetricToken()), _msgSender(), toClaim);\\n\\n        emit Claim(_msgSender(), stake, toClaim);\\n    }\\n\\n    function unStakeMetric() public {\\n        // Checks\\n        Staker storage stake = staker[_msgSender()];\\n        if (stake.shares == 0) revert NoMetricToWithdraw();\\n\\n        if (areRewardsActive()) {\\n            updateAccumulatedStakingRewards();\\n        }\\n\\n        // Effects\\n        harvest();\\n        uint256 toClaim = staker[_msgSender()].claimable;\\n        uint256 toWithdraw = stake.shares;\\n        removeAllocShares(staker[_msgSender()].shares);\\n        stake.shares = 0;\\n\\n        // Interactions\\n\\n        if (toWithdraw + toClaim > 0) {\\n            SafeERC20.safeTransfer(IERC20(getMetricToken()), _msgSender(), toWithdraw + toClaim);\\n            emit UnStake(_msgSender(), stake, toWithdraw);\\n        }\\n        if (toClaim > 0) {\\n            emit Claim(_msgSender(), stake, toWithdraw);\\n        }\\n    }\\n\\n    function harvest() internal {\\n        Staker storage stake = staker[_msgSender()];\\n        updateAccumulatedStakingRewards();\\n\\n        uint256 claimable = (stake.shares * getLifetimeShareValue()) / ACC_METRIC_PRECISION - stake.rewardDebt;\\n\\n        stake.rewardDebt = stake.rewardDebt + claimable;\\n        stake.claimable = stake.claimable + claimable;\\n        emit Claim(_msgSender(), stake, claimable);\\n    }\\n\\n    //------------------------------------------------------Getters\\n\\n    function getStake() public view returns (Staker memory) {\\n        Staker storage stake = staker[_msgSender()];\\n        return stake;\\n    }\\n\\n    //------------------------------------------------------Distribution\\n\\n    function viewPendingHarvest() public view returns (uint256) {\\n        Staker storage stake = staker[_msgSender()];\\n\\n        return (stake.shares * getLifetimeShareValue()) / ACC_METRIC_PRECISION - stake.rewardDebt;\\n    }\\n\\n    function viewPendingClaims() public view returns (uint256) {\\n        Staker storage stake = staker[_msgSender()];\\n\\n        return stake.claimable;\\n    }\\n\\n    // --------------------------------------------------------------------- Structs\\n    struct Staker {\\n        uint256 shares;\\n        uint256 rewardDebt;\\n        uint256 claimable;\\n        uint256 startDate;\\n    }\\n\\n    // --------------------------------------------------------------------- Errors\\n    error RewardsAreNotActive();\\n    error NoMetricToWithdraw();\\n    error NoClaimableRewardsToWithdraw();\\n\\n    // --------------------------------------------------------------------- Events\\n    event Claim(address harvester, StakingChef.Staker, uint256 amount);\\n    event UnStake(address withdrawer, StakingChef.Staker, uint256 amount);\\n}\\n\",\"keccak256\":\"0x54b76d6ecfe755c2457d240f3e7ce5e03d8250d7470f8c8325bf7fd693c2b4c3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620024e2380380620024e2833981810160405281019062000037919062000438565b620000576200004b6200009360201b60201c565b6200009b60201b60201c565b62000068816200015f60201b60201c565b6200007a60046200023260201b60201c565b6200008c6000620002e060201b60201c565b5062000587565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200016f6200009360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620001956200039c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620001ee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001e590620004cb565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b620002426200009360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002686200039c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620002c1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002b890620004cb565b60405180910390fd5b670de0b6b3a764000081620002d7919062000526565b60018190555050565b620002f06200009360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620003166200039c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200036f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200036690620004cb565b60405180910390fd5b80600260006101000a81548160ff02191690831515021790555062000399620003c560201b60201c565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b43600381905550565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200040082620003d3565b9050919050565b6200041281620003f3565b81146200041e57600080fd5b50565b600081519050620004328162000407565b92915050565b600060208284031215620004515762000450620003ce565b5b6000620004618482850162000421565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000620004b36020836200046a565b9150620004c0826200047b565b602082019050919050565b60006020820190508181036000830152620004e681620004a4565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200053382620004ed565b91506200054083620004ed565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200057c576200057b620004f7565b5b828202905092915050565b611f4b80620005976000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638c19ec8b116100c3578063c5d836d91161007c578063c5d836d91461035a578063d944cb7a14610378578063e2eb5c4714610396578063f2fde38b146103a0578063f33c9baa146103bc578063fc0e3d90146103da57610158565b80638c19ec8b146102ac5780638da5cb5b146102c8578063945c5287146102e6578063a8e2a38b14610302578063bf62bee614610320578063c284b8bc1461033e57610158565b80634e71d92d116101155780634e71d92d1461021f5780635e175713146102295780635f9b1bb5146102475780636ac49a8914610251578063715018a61461026f57806382e4eda41461027957610158565b80630419ba051461015d5780631cd8f0fa1461017b5780631e718d271461019757806322abbddf146101c757806349ba013b146101f75780634be6811714610215575b600080fd5b6101656103f8565b6040516101729190611573565b60405180910390f35b610195600480360381019061019091906115bf565b61043a565b005b6101b160048036038101906101ac91906115bf565b6104d3565b6040516101be9190611573565b60405180910390f35b6101e160048036038101906101dc919061164a565b6104ef565b6040516101ee9190611692565b60405180910390f35b6101ff61050f565b60405161020c9190611573565b60405180910390f35b61021d610565565b005b6102276105bd565b005b6102316106c2565b60405161023e9190611573565b60405180910390f35b61024f6106cc565b005b61025961070d565b6040516102669190611573565b60405180910390f35b610277610716565b005b610293600480360381019061028e919061164a565b61079e565b6040516102a394939291906116ad565b60405180910390f35b6102c660048036038101906102c1919061171e565b6107ce565b005b6102d061086f565b6040516102dd919061175a565b60405180910390f35b61030060048036038101906102fb919061164a565b610898565b005b61030a610958565b60405161031791906117d4565b60405180910390f35b610328610982565b6040516103359190611573565b60405180910390f35b610358600480360381019061035391906115bf565b61098c565b005b610362610afc565b60405161036f9190611573565b60405180910390f35b610380610b06565b60405161038d9190611573565b60405180910390f35b61039e610b8d565b005b6103ba60048036038101906103b5919061164a565b610db2565b005b6103c4610ea9565b6040516103d19190611692565b60405180910390f35b6103e2610ec0565b6040516103ef9190611853565b60405180910390f35b600080610403610f4c565b9050600061041082610f7d565b9050600061041c610f97565b9050610427826104d3565b81610432919061189d565b935050505090565b610442610fa1565b73ffffffffffffffffffffffffffffffffffffffff1661046061086f565b73ffffffffffffffffffffffffffffffffffffffff16146104b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ad90611950565b60405180910390fd5b670de0b6b3a7640000816104ca9190611970565b60018190555050565b60006104dd6106c2565b826104e891906119f9565b9050919050565b60076020528060005260406000206000915054906101000a900460ff1681565b6000806008600061051e610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806002015491505090565b61056d610ea9565b6105a3576040517fa550df7300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105ab610982565b4311156105bb576105ba6106cc565b5b565b60006105c7610b06565b036105fe576040517fd1d47f3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006008600061060c610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610650610fa9565b6000816002015490506000826002018190555061067c61066e610958565b610676610fa1565b836110ab565b7f822e01c025b1cd3ec96ecdebfee61e49dbcdd29762ad69de9c20bb2b0f16a5726106a5610fa1565b83836040516106b693929190611ade565b60405180910390a15050565b6000600554905090565b60006106d6610f4c565b905060006106e382610f7d565b90506106ee816104d3565b6004546106fb919061189d565b600481905550610709611131565b5050565b64e8d4a5100081565b61071e610fa1565b73ffffffffffffffffffffffffffffffffffffffff1661073c61086f565b73ffffffffffffffffffffffffffffffffffffffff1614610792576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078990611950565b60405180910390fd5b61079c600061113a565b565b60086020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b6107d6610fa1565b73ffffffffffffffffffffffffffffffffffffffff166107f461086f565b73ffffffffffffffffffffffffffffffffffffffff161461084a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084190611950565b60405180910390fd5b80600260006101000a81548160ff02191690831515021790555061086c611131565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6108a0610fa1565b73ffffffffffffffffffffffffffffffffffffffff166108be61086f565b73ffffffffffffffffffffffffffffffffffffffff1614610914576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090b90611950565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600354905090565b60006008600061099a610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506109de610ea9565b80156109f1575060006109ef6106c2565b115b156109ff576109fe610565565b5b6040518060800160405280838360000154610a1a919061189d565b815260200164e8d4a51000610a2d610f97565b85610a389190611970565b610a4291906119f9565b8360010154610a51919061189d565b8152602001826002015481526020014281525060086000610a70610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155905050610ade826111fe565b610af8610ae9610958565b610af1610fa1565b3085611215565b5050565b6000600154905090565b60008060086000610b15610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806001015464e8d4a51000610b64610f97565b8360000154610b739190611970565b610b7d91906119f9565b610b879190611b15565b91505090565b600060086000610b9b610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015403610c15576040517f4b0aa74e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c1d610ea9565b15610c2b57610c2a610565565b5b610c33610fa9565b600060086000610c41610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050600082600001549050610cdc60086000610c99610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461129e565b6000836000018190555060008282610cf4919061189d565b1115610d6157610d1e610d05610958565b610d0d610fa1565b8484610d19919061189d565b6110ab565b7f4922b0708c82a8389a5529e4d07c03dd67c4efb52f6a9706d406f987c21f976e610d47610fa1565b8483604051610d5893929190611ade565b60405180910390a15b6000821115610dad577f822e01c025b1cd3ec96ecdebfee61e49dbcdd29762ad69de9c20bb2b0f16a572610d93610fa1565b8483604051610da493929190611ade565b60405180910390a15b505050565b610dba610fa1565b73ffffffffffffffffffffffffffffffffffffffff16610dd861086f565b73ffffffffffffffffffffffffffffffffffffffff1614610e2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2590611950565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9490611bbb565b60405180910390fd5b610ea68161113a565b50565b6000600260009054906101000a900460ff16905090565b610ec8611532565b600060086000610ed6610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505091505090565b600080610f57610982565b43610f629190611b15565b9050610f6c610afc565b81610f779190611970565b91505090565b600064e8d4a5100082610f909190611970565b9050919050565b6000600454905090565b600033905090565b600060086000610fb7610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610ffb610565565b6000816001015464e8d4a51000611010610f97565b846000015461101f9190611970565b61102991906119f9565b6110339190611b15565b9050808260010154611045919061189d565b826001018190555080826002015461105d919061189d565b82600201819055507f822e01c025b1cd3ec96ecdebfee61e49dbcdd29762ad69de9c20bb2b0f16a57261108e610fa1565b838360405161109f93929190611ade565b60405180910390a15050565b61112c8363a9059cbb60e01b84846040516024016110ca929190611bdb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506112b5565b505050565b43600381905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8060055461120c919061189d565b60058190555050565b611298846323b872dd60e01b85858560405160240161123693929190611c04565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506112b5565b50505050565b806005546112ac9190611b15565b60058190555050565b6000611317826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661137c9092919063ffffffff16565b905060008151111561137757808060200190518101906113379190611c50565b611376576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136d90611cef565b60405180910390fd5b5b505050565b606061138b8484600085611394565b90509392505050565b6060824710156113d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d090611d81565b60405180910390fd5b6113e2856114a8565b611421576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141890611ded565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161144a9190611e87565b60006040518083038185875af1925050503d8060008114611487576040519150601f19603f3d011682016040523d82523d6000602084013e61148c565b606091505b509150915061149c8282866114cb565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156114db5782905061152b565b6000835111156114ee5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115229190611ef3565b60405180910390fd5b9392505050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000819050919050565b61156d8161155a565b82525050565b60006020820190506115886000830184611564565b92915050565b600080fd5b61159c8161155a565b81146115a757600080fd5b50565b6000813590506115b981611593565b92915050565b6000602082840312156115d5576115d461158e565b5b60006115e3848285016115aa565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611617826115ec565b9050919050565b6116278161160c565b811461163257600080fd5b50565b6000813590506116448161161e565b92915050565b6000602082840312156116605761165f61158e565b5b600061166e84828501611635565b91505092915050565b60008115159050919050565b61168c81611677565b82525050565b60006020820190506116a76000830184611683565b92915050565b60006080820190506116c26000830187611564565b6116cf6020830186611564565b6116dc6040830185611564565b6116e96060830184611564565b95945050505050565b6116fb81611677565b811461170657600080fd5b50565b600081359050611718816116f2565b92915050565b6000602082840312156117345761173361158e565b5b600061174284828501611709565b91505092915050565b6117548161160c565b82525050565b600060208201905061176f600083018461174b565b92915050565b6000819050919050565b600061179a611795611790846115ec565b611775565b6115ec565b9050919050565b60006117ac8261177f565b9050919050565b60006117be826117a1565b9050919050565b6117ce816117b3565b82525050565b60006020820190506117e960008301846117c5565b92915050565b6117f88161155a565b82525050565b60808201600082015161181460008501826117ef565b50602082015161182760208501826117ef565b50604082015161183a60408501826117ef565b50606082015161184d60608501826117ef565b50505050565b600060808201905061186860008301846117fe565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118a88261155a565b91506118b38361155a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156118e8576118e761186e565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061193a6020836118f3565b915061194582611904565b602082019050919050565b600060208201905081810360008301526119698161192d565b9050919050565b600061197b8261155a565b91506119868361155a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156119bf576119be61186e565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611a048261155a565b9150611a0f8361155a565b925082611a1f57611a1e6119ca565b5b828204905092915050565b60008160001c9050919050565b6000819050919050565b6000611a54611a4f83611a2a565b611a37565b9050919050565b608082016000808301549050611a7081611a41565b611a7d60008601826117ef565b5060018301549050611a8e81611a41565b611a9b60208601826117ef565b5060028301549050611aac81611a41565b611ab960408601826117ef565b5060038301549050611aca81611a41565b611ad760608601826117ef565b5050505050565b600060c082019050611af3600083018661174b565b611b006020830185611a5b565b611b0d60a0830184611564565b949350505050565b6000611b208261155a565b9150611b2b8361155a565b925082821015611b3e57611b3d61186e565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611ba56026836118f3565b9150611bb082611b49565b604082019050919050565b60006020820190508181036000830152611bd481611b98565b9050919050565b6000604082019050611bf0600083018561174b565b611bfd6020830184611564565b9392505050565b6000606082019050611c19600083018661174b565b611c26602083018561174b565b611c336040830184611564565b949350505050565b600081519050611c4a816116f2565b92915050565b600060208284031215611c6657611c6561158e565b5b6000611c7484828501611c3b565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611cd9602a836118f3565b9150611ce482611c7d565b604082019050919050565b60006020820190508181036000830152611d0881611ccc565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611d6b6026836118f3565b9150611d7682611d0f565b604082019050919050565b60006020820190508181036000830152611d9a81611d5e565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611dd7601d836118f3565b9150611de282611da1565b602082019050919050565b60006020820190508181036000830152611e0681611dca565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611e41578082015181840152602081019050611e26565b83811115611e50576000848401525b50505050565b6000611e6182611e0d565b611e6b8185611e18565b9350611e7b818560208601611e23565b80840191505092915050565b6000611e938284611e56565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000611ec582611e9e565b611ecf81856118f3565b9350611edf818560208601611e23565b611ee881611ea9565b840191505092915050565b60006020820190508181036000830152611f0d8184611eba565b90509291505056fea264697066735822122093c729c3df1750104b9878ba8dc5f78f960a0bc5e86fc556e66e4511487bc26c64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80638c19ec8b116100c3578063c5d836d91161007c578063c5d836d91461035a578063d944cb7a14610378578063e2eb5c4714610396578063f2fde38b146103a0578063f33c9baa146103bc578063fc0e3d90146103da57610158565b80638c19ec8b146102ac5780638da5cb5b146102c8578063945c5287146102e6578063a8e2a38b14610302578063bf62bee614610320578063c284b8bc1461033e57610158565b80634e71d92d116101155780634e71d92d1461021f5780635e175713146102295780635f9b1bb5146102475780636ac49a8914610251578063715018a61461026f57806382e4eda41461027957610158565b80630419ba051461015d5780631cd8f0fa1461017b5780631e718d271461019757806322abbddf146101c757806349ba013b146101f75780634be6811714610215575b600080fd5b6101656103f8565b6040516101729190611573565b60405180910390f35b610195600480360381019061019091906115bf565b61043a565b005b6101b160048036038101906101ac91906115bf565b6104d3565b6040516101be9190611573565b60405180910390f35b6101e160048036038101906101dc919061164a565b6104ef565b6040516101ee9190611692565b60405180910390f35b6101ff61050f565b60405161020c9190611573565b60405180910390f35b61021d610565565b005b6102276105bd565b005b6102316106c2565b60405161023e9190611573565b60405180910390f35b61024f6106cc565b005b61025961070d565b6040516102669190611573565b60405180910390f35b610277610716565b005b610293600480360381019061028e919061164a565b61079e565b6040516102a394939291906116ad565b60405180910390f35b6102c660048036038101906102c1919061171e565b6107ce565b005b6102d061086f565b6040516102dd919061175a565b60405180910390f35b61030060048036038101906102fb919061164a565b610898565b005b61030a610958565b60405161031791906117d4565b60405180910390f35b610328610982565b6040516103359190611573565b60405180910390f35b610358600480360381019061035391906115bf565b61098c565b005b610362610afc565b60405161036f9190611573565b60405180910390f35b610380610b06565b60405161038d9190611573565b60405180910390f35b61039e610b8d565b005b6103ba60048036038101906103b5919061164a565b610db2565b005b6103c4610ea9565b6040516103d19190611692565b60405180910390f35b6103e2610ec0565b6040516103ef9190611853565b60405180910390f35b600080610403610f4c565b9050600061041082610f7d565b9050600061041c610f97565b9050610427826104d3565b81610432919061189d565b935050505090565b610442610fa1565b73ffffffffffffffffffffffffffffffffffffffff1661046061086f565b73ffffffffffffffffffffffffffffffffffffffff16146104b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ad90611950565b60405180910390fd5b670de0b6b3a7640000816104ca9190611970565b60018190555050565b60006104dd6106c2565b826104e891906119f9565b9050919050565b60076020528060005260406000206000915054906101000a900460ff1681565b6000806008600061051e610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806002015491505090565b61056d610ea9565b6105a3576040517fa550df7300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105ab610982565b4311156105bb576105ba6106cc565b5b565b60006105c7610b06565b036105fe576040517fd1d47f3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006008600061060c610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610650610fa9565b6000816002015490506000826002018190555061067c61066e610958565b610676610fa1565b836110ab565b7f822e01c025b1cd3ec96ecdebfee61e49dbcdd29762ad69de9c20bb2b0f16a5726106a5610fa1565b83836040516106b693929190611ade565b60405180910390a15050565b6000600554905090565b60006106d6610f4c565b905060006106e382610f7d565b90506106ee816104d3565b6004546106fb919061189d565b600481905550610709611131565b5050565b64e8d4a5100081565b61071e610fa1565b73ffffffffffffffffffffffffffffffffffffffff1661073c61086f565b73ffffffffffffffffffffffffffffffffffffffff1614610792576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078990611950565b60405180910390fd5b61079c600061113a565b565b60086020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b6107d6610fa1565b73ffffffffffffffffffffffffffffffffffffffff166107f461086f565b73ffffffffffffffffffffffffffffffffffffffff161461084a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084190611950565b60405180910390fd5b80600260006101000a81548160ff02191690831515021790555061086c611131565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6108a0610fa1565b73ffffffffffffffffffffffffffffffffffffffff166108be61086f565b73ffffffffffffffffffffffffffffffffffffffff1614610914576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090b90611950565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600354905090565b60006008600061099a610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506109de610ea9565b80156109f1575060006109ef6106c2565b115b156109ff576109fe610565565b5b6040518060800160405280838360000154610a1a919061189d565b815260200164e8d4a51000610a2d610f97565b85610a389190611970565b610a4291906119f9565b8360010154610a51919061189d565b8152602001826002015481526020014281525060086000610a70610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155905050610ade826111fe565b610af8610ae9610958565b610af1610fa1565b3085611215565b5050565b6000600154905090565b60008060086000610b15610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806001015464e8d4a51000610b64610f97565b8360000154610b739190611970565b610b7d91906119f9565b610b879190611b15565b91505090565b600060086000610b9b610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015403610c15576040517f4b0aa74e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c1d610ea9565b15610c2b57610c2a610565565b5b610c33610fa9565b600060086000610c41610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050600082600001549050610cdc60086000610c99610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461129e565b6000836000018190555060008282610cf4919061189d565b1115610d6157610d1e610d05610958565b610d0d610fa1565b8484610d19919061189d565b6110ab565b7f4922b0708c82a8389a5529e4d07c03dd67c4efb52f6a9706d406f987c21f976e610d47610fa1565b8483604051610d5893929190611ade565b60405180910390a15b6000821115610dad577f822e01c025b1cd3ec96ecdebfee61e49dbcdd29762ad69de9c20bb2b0f16a572610d93610fa1565b8483604051610da493929190611ade565b60405180910390a15b505050565b610dba610fa1565b73ffffffffffffffffffffffffffffffffffffffff16610dd861086f565b73ffffffffffffffffffffffffffffffffffffffff1614610e2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2590611950565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9490611bbb565b60405180910390fd5b610ea68161113a565b50565b6000600260009054906101000a900460ff16905090565b610ec8611532565b600060086000610ed6610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505091505090565b600080610f57610982565b43610f629190611b15565b9050610f6c610afc565b81610f779190611970565b91505090565b600064e8d4a5100082610f909190611970565b9050919050565b6000600454905090565b600033905090565b600060086000610fb7610fa1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610ffb610565565b6000816001015464e8d4a51000611010610f97565b846000015461101f9190611970565b61102991906119f9565b6110339190611b15565b9050808260010154611045919061189d565b826001018190555080826002015461105d919061189d565b82600201819055507f822e01c025b1cd3ec96ecdebfee61e49dbcdd29762ad69de9c20bb2b0f16a57261108e610fa1565b838360405161109f93929190611ade565b60405180910390a15050565b61112c8363a9059cbb60e01b84846040516024016110ca929190611bdb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506112b5565b505050565b43600381905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8060055461120c919061189d565b60058190555050565b611298846323b872dd60e01b85858560405160240161123693929190611c04565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506112b5565b50505050565b806005546112ac9190611b15565b60058190555050565b6000611317826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661137c9092919063ffffffff16565b905060008151111561137757808060200190518101906113379190611c50565b611376576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136d90611cef565b60405180910390fd5b5b505050565b606061138b8484600085611394565b90509392505050565b6060824710156113d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d090611d81565b60405180910390fd5b6113e2856114a8565b611421576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141890611ded565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161144a9190611e87565b60006040518083038185875af1925050503d8060008114611487576040519150601f19603f3d011682016040523d82523d6000602084013e61148c565b606091505b509150915061149c8282866114cb565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156114db5782905061152b565b6000835111156114ee5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115229190611ef3565b60405180910390fd5b9392505050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000819050919050565b61156d8161155a565b82525050565b60006020820190506115886000830184611564565b92915050565b600080fd5b61159c8161155a565b81146115a757600080fd5b50565b6000813590506115b981611593565b92915050565b6000602082840312156115d5576115d461158e565b5b60006115e3848285016115aa565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611617826115ec565b9050919050565b6116278161160c565b811461163257600080fd5b50565b6000813590506116448161161e565b92915050565b6000602082840312156116605761165f61158e565b5b600061166e84828501611635565b91505092915050565b60008115159050919050565b61168c81611677565b82525050565b60006020820190506116a76000830184611683565b92915050565b60006080820190506116c26000830187611564565b6116cf6020830186611564565b6116dc6040830185611564565b6116e96060830184611564565b95945050505050565b6116fb81611677565b811461170657600080fd5b50565b600081359050611718816116f2565b92915050565b6000602082840312156117345761173361158e565b5b600061174284828501611709565b91505092915050565b6117548161160c565b82525050565b600060208201905061176f600083018461174b565b92915050565b6000819050919050565b600061179a611795611790846115ec565b611775565b6115ec565b9050919050565b60006117ac8261177f565b9050919050565b60006117be826117a1565b9050919050565b6117ce816117b3565b82525050565b60006020820190506117e960008301846117c5565b92915050565b6117f88161155a565b82525050565b60808201600082015161181460008501826117ef565b50602082015161182760208501826117ef565b50604082015161183a60408501826117ef565b50606082015161184d60608501826117ef565b50505050565b600060808201905061186860008301846117fe565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118a88261155a565b91506118b38361155a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156118e8576118e761186e565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061193a6020836118f3565b915061194582611904565b602082019050919050565b600060208201905081810360008301526119698161192d565b9050919050565b600061197b8261155a565b91506119868361155a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156119bf576119be61186e565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611a048261155a565b9150611a0f8361155a565b925082611a1f57611a1e6119ca565b5b828204905092915050565b60008160001c9050919050565b6000819050919050565b6000611a54611a4f83611a2a565b611a37565b9050919050565b608082016000808301549050611a7081611a41565b611a7d60008601826117ef565b5060018301549050611a8e81611a41565b611a9b60208601826117ef565b5060028301549050611aac81611a41565b611ab960408601826117ef565b5060038301549050611aca81611a41565b611ad760608601826117ef565b5050505050565b600060c082019050611af3600083018661174b565b611b006020830185611a5b565b611b0d60a0830184611564565b949350505050565b6000611b208261155a565b9150611b2b8361155a565b925082821015611b3e57611b3d61186e565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611ba56026836118f3565b9150611bb082611b49565b604082019050919050565b60006020820190508181036000830152611bd481611b98565b9050919050565b6000604082019050611bf0600083018561174b565b611bfd6020830184611564565b9392505050565b6000606082019050611c19600083018661174b565b611c26602083018561174b565b611c336040830184611564565b949350505050565b600081519050611c4a816116f2565b92915050565b600060208284031215611c6657611c6561158e565b5b6000611c7484828501611c3b565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611cd9602a836118f3565b9150611ce482611c7d565b604082019050919050565b60006020820190508181036000830152611d0881611ccc565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611d6b6026836118f3565b9150611d7682611d0f565b604082019050919050565b60006020820190508181036000830152611d9a81611d5e565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611dd7601d836118f3565b9150611de282611da1565b602082019050919050565b60006020820190508181036000830152611e0681611dca565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611e41578082015181840152602081019050611e26565b83811115611e50576000848401525b50505050565b6000611e6182611e0d565b611e6b8185611e18565b9350611e7b818560208601611e23565b80840191505092915050565b6000611e938284611e56565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000611ec582611e9e565b611ecf81856118f3565b9350611edf818560208601611e23565b611ee881611ea9565b840191505092915050565b60006020820190508181036000830152611f0d8184611eba565b90509291505056fea264697066735822122093c729c3df1750104b9878ba8dc5f78f960a0bc5e86fc556e66e4511487bc26c64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/StakingChef.sol:StakingChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3343,
        "contract": "src/contracts/StakingChef.sol:StakingChef",
        "label": "_metricPerBlock",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3348,
        "contract": "src/contracts/StakingChef.sol:StakingChef",
        "label": "_rewardsActive",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 3350,
        "contract": "src/contracts/StakingChef.sol:StakingChef",
        "label": "_lastRewardBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3352,
        "contract": "src/contracts/StakingChef.sol:StakingChef",
        "label": "_lifetimeShareValue",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3354,
        "contract": "src/contracts/StakingChef.sol:StakingChef",
        "label": "_totalAllocShares",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3357,
        "contract": "src/contracts/StakingChef.sol:StakingChef",
        "label": "metric",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(MetricToken)3716"
      },
      {
        "astId": 3602,
        "contract": "src/contracts/StakingChef.sol:StakingChef",
        "label": "addressExistence",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5016,
        "contract": "src/contracts/StakingChef.sol:StakingChef",
        "label": "staker",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Staker)5403_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(MetricToken)3716": {
        "encoding": "inplace",
        "label": "contract MetricToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Staker)5403_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingChef.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)5403_storage"
      },
      "t_struct(Staker)5403_storage": {
        "encoding": "inplace",
        "label": "struct StakingChef.Staker",
        "members": [
          {
            "astId": 5396,
            "contract": "src/contracts/StakingChef.sol:StakingChef",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5398,
            "contract": "src/contracts/StakingChef.sol:StakingChef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5400,
            "contract": "src/contracts/StakingChef.sol:StakingChef",
            "label": "claimable",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5402,
            "contract": "src/contracts/StakingChef.sol:StakingChef",
            "label": "startDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}