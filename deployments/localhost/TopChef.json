{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metricTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "harvester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_METRIC_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accumulatedWithPrecision",
          "type": "uint256"
        }
      ],
      "name": "accumulatedMetricDividedByShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newShares",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "newAutoDistribute",
          "type": "bool"
        }
      ],
      "name": "addAllocationGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressExistence",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "areRewardsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllocationGroups",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "groupAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "autodistribute",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "rewardDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimable",
              "type": "uint256"
            }
          ],
          "internalType": "struct TopChef.AllocationGroup[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRewardBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLifeTimeShareValueEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetricPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetricToken",
      "outputs": [
        {
          "internalType": "contract MetricToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalAllocationShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "removeAllocationGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setLifetimeShareValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "metricAmount",
          "type": "uint256"
        }
      ],
      "name": "setMetricPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metricTokenAddress",
          "type": "address"
        }
      ],
      "name": "setMetricToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isOn",
          "type": "bool"
        }
      ],
      "name": "toggleRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateAccumulatedAllocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "groupAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "newAutoDistribute",
          "type": "bool"
        }
      ],
      "name": "updateAllocationGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "viewPendingClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "viewPendingHarvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1da2f6287c8b4235e37e6ed5e1938126bad06c0445d0507fe4af0bc1fc14d958",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2615509",
    "logsBloom": "0x
    "blockHash": "0xed9a469ae785ce17a1b5301da28cee02fe03fa99a4b430962a11ff29ee66c977",
    "transactionHash": "0x1da2f6287c8b4235e37e6ed5e1938126bad06c0445d0507fe4af0bc1fc14d958",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x1da2f6287c8b4235e37e6ed5e1938126bad06c0445d0507fe4af0bc1fc14d958",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xed9a469ae785ce17a1b5301da28cee02fe03fa99a4b430962a11ff29ee66c977"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "2615509",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "27a4b86f915f3fb0145fccc5539d8ef1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metricTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"harvester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_METRIC_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulatedWithPrecision\",\"type\":\"uint256\"}],\"name\":\"accumulatedMetricDividedByShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"newAutoDistribute\",\"type\":\"bool\"}],\"name\":\"addAllocationGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areRewardsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllocationGroups\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"groupAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autodistribute\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"internalType\":\"struct TopChef.AllocationGroup[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLifeTimeShareValueEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetricPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetricToken\",\"outputs\":[{\"internalType\":\"contract MetricToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAllocationShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"removeAllocationGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLifetimeShareValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"metricAmount\",\"type\":\"uint256\"}],\"name\":\"setMetricPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metricTokenAddress\",\"type\":\"address\"}],\"name\":\"setMetricToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isOn\",\"type\":\"bool\"}],\"name\":\"toggleRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAccumulatedAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"groupAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"newAutoDistribute\",\"type\":\"bool\"}],\"name\":\"updateAllocationGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"viewPendingClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"viewPendingHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/TopChef.sol\":\"TopChef\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"src/contracts/Chef.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./MetricToken.sol\\\";\\n\\n// POSSIBLE FUTURE ITERATIONS\\n// TODO implement claim(address)\\n// TODO implement staking function\\n// TODO implement payable function\\n// TODO implement withdrawl function\\n// TODO implement updatedAccumulatedAllocations\\n\\n// TODO WE ADD THESE TO MAIN CHEF or should each contract have it's own\\n// TODO we make below more loosely coupled\\n// TODO viewPendingHarvest\\n// TODO viewPendingClaims\\n\\nabstract contract Chef is Ownable {\\n    using SafeMath for uint256;\\n    uint256 private _metricPerBlock;\\n    uint256 public constant ACC_METRIC_PRECISION = 1e12;\\n\\n    bool private _rewardsActive;\\n    uint256 private _lastRewardBlock;\\n    uint256 private _lifetimeShareValue;\\n    uint256 private _totalAllocShares;\\n\\n    MetricToken private metric;\\n\\n    //------------------------------------------------------Setters\\n\\n    function toggleRewards(bool isOn) public onlyOwner {\\n        _rewardsActive = isOn;\\n        setLastRewardBlock(block.number);\\n    }\\n\\n    function setMetricPerBlock(uint256 metricAmount) public virtual onlyOwner {\\n        _metricPerBlock = metricAmount * 10**18;\\n    }\\n\\n    function setLastRewardBlock(uint256 blockNumber) internal virtual {\\n        _lastRewardBlock = blockNumber;\\n    }\\n\\n    function setMetricToken(address metricTokenAddress) public virtual onlyOwner {\\n        metric = MetricToken(metricTokenAddress);\\n    }\\n\\n    function setLifetimeShareValue() public virtual {\\n        uint256 accumulated = getAccumulated();\\n        uint256 accumulatedWithMetricPrecision = getAcculatedWithmetricPrecision(accumulated);\\n        _lifetimeShareValue = _lifetimeShareValue.add(accumulatedMetricDividedByShares(accumulatedWithMetricPrecision));\\n    }\\n\\n    function getLifeTimeShareValueEstimate() public view virtual returns (uint256) {\\n        uint256 accumulated = getAccumulated();\\n        uint256 accumulatedWithMetricPrecision = getAcculatedWithmetricPrecision(accumulated);\\n        uint256 lifetimesharevalue = getLifetimeShareValue();\\n        return lifetimesharevalue.add(accumulatedMetricDividedByShares(accumulatedWithMetricPrecision));\\n    }\\n\\n    function addTotalAllocShares(uint256 shares) internal virtual {\\n        _totalAllocShares = _totalAllocShares.add(shares);\\n    }\\n\\n    function addTotalAllocShares(uint256 oldShares, uint256 newShares) internal virtual {\\n        _totalAllocShares = _totalAllocShares.sub(oldShares).add(newShares);\\n    }\\n\\n    function removeAllocShares(uint256 oldShares) internal virtual {\\n        _totalAllocShares = _totalAllocShares.sub(oldShares);\\n    }\\n\\n    //------------------------------------------------------Getters\\n\\n    function getMetricPerBlock() public view virtual returns (uint256) {\\n        return _metricPerBlock;\\n    }\\n\\n    function getLastRewardBlock() public view virtual returns (uint256) {\\n        return _lastRewardBlock;\\n    }\\n\\n    function areRewardsActive() public view virtual returns (bool) {\\n        return _rewardsActive;\\n    }\\n\\n    function getAccumulated() internal view virtual returns (uint256) {\\n        uint256 blocksSince = block.number.sub(getLastRewardBlock());\\n        return blocksSince.mul(getMetricPerBlock());\\n    }\\n\\n    function getAcculatedWithmetricPrecision(uint256 accumulated) internal view virtual returns (uint256) {\\n        return accumulated.mul(ACC_METRIC_PRECISION);\\n    }\\n\\n    function getTotalAllocationShares() public view returns (uint256) {\\n        return _totalAllocShares;\\n    }\\n\\n    function getLifetimeShareValue() internal view returns (uint256) {\\n        return _lifetimeShareValue;\\n    }\\n\\n    function accumulatedMetricDividedByShares(uint256 accumulatedWithPrecision) public view returns (uint256) {\\n        return accumulatedWithPrecision.div(getTotalAllocationShares());\\n    }\\n\\n    function getMetricToken() public view returns (MetricToken) {\\n        return metric;\\n    }\\n\\n    //------------------------------------------------------Support Functions\\n\\n    mapping(address => bool) public addressExistence;\\n    modifier nonDuplicated(address _address) {\\n        require(addressExistence[_address] == false, \\\"nonDuplicated: duplicated\\\");\\n        addressExistence[_address] = true;\\n        _;\\n    }\\n\\n    event Harvest(address harvester, uint256 agIndex, uint256 amount);\\n    event Withdraw(address withdrawer, uint256 agIndex, uint256 amount);\\n}\\n\",\"keccak256\":\"0x3424cff0a738c2ea6f127db6adcc9f9a04c14186a76abc3725b57e9fc53edcc5\",\"license\":\"Unlicense\"},\"src/contracts/MetricToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// @custom:security-contact contracts@metricsdao.com\\ncontract MetricToken is ERC20 {\\n    constructor(address _vestingContractAddress) ERC20(\\\"METRIC\\\", \\\"METRIC\\\") {\\n        _mint(_vestingContractAddress, 1000000000 * 10**decimals());\\n    }\\n}\\n\",\"keccak256\":\"0x943f185ba3f8a4d102e968e52a7a7861e98e2b3cb4ef0c0bff3b39abb2e4280c\",\"license\":\"MIT\"},\"src/contracts/TopChef.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Chef.sol\\\";\\n\\ncontract TopChef is Chef {\\n    using SafeMath for uint256;\\n    AllocationGroup[] private _allocations;\\n\\n    constructor(address metricTokenAddress) {\\n        setMetricToken(metricTokenAddress);\\n        setMetricPerBlock(4);\\n        toggleRewards(false); // locking contract initially\\n    }\\n\\n    //------------------------------------------------------Manage Allocation Groups\\n\\n    function addAllocationGroup(\\n        address newAddress,\\n        uint256 newShares,\\n        bool newAutoDistribute\\n    ) external onlyOwner nonDuplicated(newAddress) {\\n        require(newShares > 0, \\\"shares should be greater than 0\\\");\\n        if (areRewardsActive() && getTotalAllocationShares() > 0) {\\n            updateAccumulatedAllocations();\\n        }\\n\\n        AllocationGroup memory group = AllocationGroup({\\n            groupAddress: newAddress,\\n            shares: newShares,\\n            autodistribute: newAutoDistribute,\\n            rewardDebt: newShares.mul(getLifetimeShareValue()).div(ACC_METRIC_PRECISION),\\n            claimable: 0\\n        });\\n\\n        _allocations.push(group);\\n        addTotalAllocShares(group.shares);\\n    }\\n\\n    // TODO do we actually need to do this?\\n    function updateAllocationGroup(\\n        address groupAddress,\\n        uint256 agIndex,\\n        uint256 shares,\\n        bool newAutoDistribute\\n    ) public onlyOwner {\\n        require(areRewardsActive(), \\\"Rewards are not active\\\");\\n        harvest(agIndex);\\n        addTotalAllocShares(_allocations[agIndex].shares, shares);\\n        _allocations[agIndex].groupAddress = groupAddress;\\n        _allocations[agIndex].shares = shares;\\n        _allocations[agIndex].autodistribute = newAutoDistribute;\\n    }\\n\\n    function removeAllocationGroup(uint256 agIndex) external onlyOwner {\\n        require(agIndex < _allocations.length, \\\"Index does not match allocation\\\");\\n        require(areRewardsActive(), \\\"Rewards are not active\\\");\\n        _allocations[agIndex].autodistribute = true;\\n        harvest(agIndex);\\n\\n        removeAllocShares(_allocations[agIndex].shares);\\n\\n        _allocations[agIndex] = _allocations[_allocations.length - 1];\\n        _allocations.pop();\\n    }\\n\\n    //------------------------------------------------------Getters\\n\\n    function getAllocationGroups() public view returns (AllocationGroup[] memory) {\\n        return _allocations;\\n    }\\n\\n    //------------------------------------------------------Distribution\\n\\n    function viewPendingHarvest(uint256 agIndex) public view returns (uint256) {\\n        AllocationGroup memory group = _allocations[agIndex];\\n\\n        return group.shares.mul(getLifeTimeShareValueEstimate()).div(ACC_METRIC_PRECISION).sub(group.rewardDebt);\\n    }\\n\\n    function viewPendingClaims(uint256 agIndex) public view returns (uint256) {\\n        AllocationGroup memory group = _allocations[agIndex];\\n\\n        return group.claimable;\\n    }\\n\\n    function updateAccumulatedAllocations() public {\\n        require(areRewardsActive(), \\\"Rewards are not active\\\");\\n        if (block.number <= getLastRewardBlock()) {\\n            return;\\n        }\\n\\n        // TODO confirm budget is correct with assertions\\n        // Not sure we can project emission rate over X years?\\n        // Not entirely sure how to handle this, but we can at least try to make it work.\\n        // ^^ will help with fuzz testing\\n\\n        setLifetimeShareValue();\\n        setLastRewardBlock(block.number);\\n    }\\n\\n    // TODO when we implement the emission rate, ensure this function is called before update the rate\\n    // if we don't, then a user's rewards pre-emission change will incorrectly reflect the new rate\\n    function harvestAll() external onlyOwner {\\n        for (uint8 i = 0; i < _allocations.length; i++) {\\n            harvest(i);\\n        }\\n    }\\n\\n    function harvest(uint256 agIndex) public {\\n        require(areRewardsActive(), \\\"Rewards are not active\\\");\\n        AllocationGroup storage group = _allocations[agIndex];\\n        // TODO do we want a backup in case a group looses access to their wallet\\n        require(group.groupAddress == _msgSender() || _msgSender() == owner(), \\\"Sender is not group or owner\\\");\\n\\n        updateAccumulatedAllocations();\\n\\n        uint256 claimable = group.shares.mul(getLifetimeShareValue()).div(ACC_METRIC_PRECISION).sub(group.rewardDebt);\\n\\n        group.rewardDebt = group.rewardDebt.add(claimable);\\n        if (claimable != 0) {\\n            if (group.autodistribute) {\\n                SafeERC20.safeTransfer(IERC20(getMetricToken()), group.groupAddress, claimable);\\n                group.claimable = 0;\\n            } else {\\n                group.claimable = group.claimable.add(claimable);\\n            }\\n        }\\n        emit Harvest(msg.sender, agIndex, claimable);\\n    }\\n\\n    function claim(uint256 agIndex) external {\\n        require(areRewardsActive(), \\\"Rewards are not active\\\");\\n        AllocationGroup storage group = _allocations[agIndex];\\n\\n        require(group.claimable != 0, \\\"No claimable rewards to withdraw\\\");\\n        // TODO do we want a backup in case a group looses access to their wallet\\n        require(group.groupAddress == _msgSender(), \\\"Sender does not represent group\\\");\\n        SafeERC20.safeTransfer(IERC20(getMetricToken()), group.groupAddress, group.claimable);\\n        group.claimable = 0;\\n        emit Withdraw(msg.sender, agIndex, group.claimable);\\n    }\\n\\n    //------------------------------------------------------Structs\\n\\n    struct AllocationGroup {\\n        address groupAddress;\\n        uint256 shares;\\n        bool autodistribute;\\n        uint256 rewardDebt; // keeps track of how much the user is owed or has been credited already\\n        uint256 claimable;\\n    }\\n}\\n\",\"keccak256\":\"0x94d2a42efb5b98a32730ced6e2cc009214dce6a9b4773099a5a2189dddefa9bd\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620032173803806200321783398181016040528101906200003791906200043a565b620000576200004b6200009360201b60201c565b6200009b60201b60201c565b62000068816200015f60201b60201c565b6200007a60046200023260201b60201c565b6200008c6000620002e060201b60201c565b5062000589565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200016f6200009360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620001956200039d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620001ee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001e590620004cd565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b620002426200009360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002686200039d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620002c1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002b890620004cd565b60405180910390fd5b670de0b6b3a764000081620002d7919062000528565b60018190555050565b620002f06200009360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620003166200039d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200036f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200036690620004cd565b60405180910390fd5b80600260006101000a81548160ff0219169083151502179055506200039a43620003c660201b60201c565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b8060038190555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200040282620003d5565b9050919050565b6200041481620003f5565b81146200042057600080fd5b50565b600081519050620004348162000409565b92915050565b600060208284031215620004535762000452620003d0565b5b6000620004638482850162000423565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000620004b56020836200046c565b9150620004c2826200047d565b602082019050919050565b60006020820190508181036000830152620004e881620004a6565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200053582620004ef565b91506200054283620004ef565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200057e576200057d620004f9565b5b828202905092915050565b612c7e80620005996000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c806377d22d1a116100de578063994cd56711610097578063c5d836d911610071578063c5d836d914610411578063ddc632621461042f578063f2fde38b1461044b578063f33c9baa146104675761018e565b8063994cd567146103a5578063a8e2a38b146103d5578063bf62bee6146103f35761018e565b806377d22d1a1461031d5780638b4a4ed5146103275780638c19ec8b146103455780638da5cb5b146103615780638ed955b91461037f578063945c5287146103895761018e565b80635aa01b041161014b5780635f9b1bb5116101255780635f9b1bb5146102cf5780636336694b146102d95780636ac49a89146102f5578063715018a6146103135761018e565b80635aa01b04146102655780635cae9a48146102815780635e175713146102b15761018e565b80630419ba05146101935780631cd8f0fa146101b15780631e718d27146101cd57806322abbddf146101fd578063259e78731461022d578063379607f514610249575b600080fd5b61019b610485565b6040516101a89190611eac565b60405180910390f35b6101cb60048036038101906101c69190611ef8565b6104ce565b005b6101e760048036038101906101e29190611ef8565b610567565b6040516101f49190611eac565b60405180910390f35b61021760048036038101906102129190611f83565b61058a565b6040516102249190611fcb565b60405180910390f35b61024760048036038101906102429190612012565b6105aa565b005b610263600480360381019061025e9190611ef8565b6108b9565b005b61027f600480360381019061027a9190612065565b610a8e565b005b61029b60048036038101906102969190611ef8565b610c5a565b6040516102a89190611eac565b60405180910390f35b6102b9610d28565b6040516102c69190611eac565b60405180910390f35b6102d7610d32565b005b6102f360048036038101906102ee9190611ef8565b610d72565b005b6102fd61107c565b60405161030a9190611eac565b60405180910390f35b61031b611085565b005b61032561110d565b005b61032f61117b565b60405161033c9190612210565b60405180910390f35b61035f600480360381019061035a9190612232565b611269565b005b61036961130b565b604051610376919061226e565b60405180910390f35b610387611334565b005b6103a3600480360381019061039e9190611f83565b6113e5565b005b6103bf60048036038101906103ba9190611ef8565b6114a5565b6040516103cc9190611eac565b60405180910390f35b6103dd6115b9565b6040516103ea91906122e8565b60405180910390f35b6103fb6115e3565b6040516104089190611eac565b60405180910390f35b6104196115ed565b6040516104269190611eac565b60405180910390f35b61044960048036038101906104449190611ef8565b6115f7565b005b61046560048036038101906104609190611f83565b61187c565b005b61046f611974565b60405161047c9190611fcb565b60405180910390f35b60008061049061198b565b9050600061049d826119ca565b905060006104a96119eb565b90506104c66104b783610567565b826119f590919063ffffffff16565b935050505090565b6104d6611a0b565b73ffffffffffffffffffffffffffffffffffffffff166104f461130b565b73ffffffffffffffffffffffffffffffffffffffff161461054a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054190612360565b60405180910390fd5b670de0b6b3a76400008161055e91906123af565b60018190555050565b6000610583610574610d28565b83611a1390919063ffffffff16565b9050919050565b60076020528060005260406000206000915054906101000a900460ff1681565b6105b2611a0b565b73ffffffffffffffffffffffffffffffffffffffff166105d061130b565b73ffffffffffffffffffffffffffffffffffffffff1614610626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061d90612360565b60405180910390fd5b8260001515600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146106ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b190612455565b60405180910390fd5b6001600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060008311610755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c906124c1565b60405180910390fd5b61075d611974565b80156107705750600061076e610d28565b115b1561077e5761077d61110d565b5b60006040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184151581526020016107e664e8d4a510006107d86107c96119eb565b89611a2990919063ffffffff16565b611a1390919063ffffffff16565b815260200160008152509050600881908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550606082015181600301556080820151816004015550506108b28160200151611a3f565b5050505050565b6108c1611974565b610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f79061252d565b60405180910390fd5b6000600882815481106109165761091561254d565b5b9060005260206000209060050201905060008160040154141561096e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610965906125c8565b60405180910390fd5b610976611a0b565b73ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a07576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fe90612634565b60405180910390fd5b610a41610a126115b9565b8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360040154611a5d565b600081600401819055507ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56833838360040154604051610a8293929190612654565b60405180910390a15050565b610a96611a0b565b73ffffffffffffffffffffffffffffffffffffffff16610ab461130b565b73ffffffffffffffffffffffffffffffffffffffff1614610b0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0190612360565b60405180910390fd5b610b12611974565b610b51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b489061252d565b60405180910390fd5b610b5a836115f7565b610b8960088481548110610b7157610b7061254d565b5b90600052602060002090600502016001015483611ae3565b8360088481548110610b9e57610b9d61254d565b5b906000526020600020906005020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160088481548110610c0257610c0161254d565b5b9060005260206000209060050201600101819055508060088481548110610c2c57610c2b61254d565b5b906000526020600020906005020160020160006101000a81548160ff02191690831515021790555050505050565b60008060088381548110610c7157610c7061254d565b5b90600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016003820154815260200160048201548152505090508060800151915050919050565b6000600554905090565b6000610d3c61198b565b90506000610d49826119ca565b9050610d68610d5782610567565b6004546119f590919063ffffffff16565b6004819055505050565b610d7a611a0b565b73ffffffffffffffffffffffffffffffffffffffff16610d9861130b565b73ffffffffffffffffffffffffffffffffffffffff1614610dee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de590612360565b60405180910390fd5b6008805490508110610e35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2c906126d7565b60405180910390fd5b610e3d611974565b610e7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e739061252d565b60405180910390fd5b600160088281548110610e9257610e9161254d565b5b906000526020600020906005020160020160006101000a81548160ff021916908315150217905550610ec3816115f7565b610ef160088281548110610eda57610ed961254d565b5b906000526020600020906005020160010154611b14565b60086001600880549050610f0591906126f7565b81548110610f1657610f1561254d565b5b906000526020600020906005020160088281548110610f3857610f3761254d565b5b90600052602060002090600502016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600182015481600101556002820160009054906101000a900460ff168160020160006101000a81548160ff0219169083151502179055506003820154816003015560048201548160040155905050600880548061100d5761100c61272b565b5b6001900381819060005260206000209060050201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006101000a81549060ff0219169055600382016000905560048201600090555050905550565b64e8d4a5100081565b61108d611a0b565b73ffffffffffffffffffffffffffffffffffffffff166110ab61130b565b73ffffffffffffffffffffffffffffffffffffffff1614611101576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f890612360565b60405180910390fd5b61110b6000611b32565b565b611115611974565b611154576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114b9061252d565b60405180910390fd5b61115c6115e3565b431161116757611179565b61116f610d32565b61117843611bf6565b5b565b60606008805480602002602001604051908101604052809291908181526020016000905b8282101561126057838290600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff16151515158152602001600382015481526020016004820154815250508152602001906001019061119f565b50505050905090565b611271611a0b565b73ffffffffffffffffffffffffffffffffffffffff1661128f61130b565b73ffffffffffffffffffffffffffffffffffffffff16146112e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112dc90612360565b60405180910390fd5b80600260006101000a81548160ff02191690831515021790555061130843611bf6565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61133c611a0b565b73ffffffffffffffffffffffffffffffffffffffff1661135a61130b565b73ffffffffffffffffffffffffffffffffffffffff16146113b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a790612360565b60405180910390fd5b60005b6008805490508160ff1610156113e2576113cf8160ff166115f7565b80806113da90612767565b9150506113b3565b50565b6113ed611a0b565b73ffffffffffffffffffffffffffffffffffffffff1661140b61130b565b73ffffffffffffffffffffffffffffffffffffffff1614611461576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145890612360565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600883815481106114bc576114bb61254d565b5b90600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016003820154815260200160048201548152505090506115b181606001516115a364e8d4a51000611595611582610485565b8660200151611a2990919063ffffffff16565b611a1390919063ffffffff16565b611c0090919063ffffffff16565b915050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600354905090565b6000600154905090565b6115ff611974565b61163e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116359061252d565b60405180910390fd5b6000600882815481106116545761165361254d565b5b9060005260206000209060050201905061166c611a0b565b73ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061170257506116cc61130b565b73ffffffffffffffffffffffffffffffffffffffff166116ea611a0b565b73ffffffffffffffffffffffffffffffffffffffff16145b611741576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611738906127dd565b60405180910390fd5b61174961110d565b6000611796826003015461178864e8d4a5100061177a6117676119eb565b8760010154611a2990919063ffffffff16565b611a1390919063ffffffff16565b611c0090919063ffffffff16565b90506117af8183600301546119f590919063ffffffff16565b82600301819055506000811461183c578160020160009054906101000a900460ff161561181b5761180c6117e16115b9565b8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611a5d565b6000826004018190555061183b565b6118328183600401546119f590919063ffffffff16565b82600401819055505b5b7f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae066092495433848360405161186f93929190612654565b60405180910390a1505050565b611884611a0b565b73ffffffffffffffffffffffffffffffffffffffff166118a261130b565b73ffffffffffffffffffffffffffffffffffffffff16146118f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ef90612360565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195f9061286f565b60405180910390fd5b61197181611b32565b50565b6000600260009054906101000a900460ff16905090565b6000806119a86119996115e3565b43611c0090919063ffffffff16565b90506119c46119b56115ed565b82611a2990919063ffffffff16565b91505090565b60006119e464e8d4a5100083611a2990919063ffffffff16565b9050919050565b6000600454905090565b60008183611a03919061288f565b905092915050565b600033905090565b60008183611a219190612914565b905092915050565b60008183611a3791906123af565b905092915050565b611a54816005546119f590919063ffffffff16565b60058190555050565b611ade8363a9059cbb60e01b8484604051602401611a7c929190612945565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611c16565b505050565b611b0a81611afc84600554611c0090919063ffffffff16565b6119f590919063ffffffff16565b6005819055505050565b611b2981600554611c0090919063ffffffff16565b60058190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8060038190555050565b60008183611c0e91906126f7565b905092915050565b6000611c78826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611cdd9092919063ffffffff16565b9050600081511115611cd85780806020019051810190611c989190612983565b611cd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cce90612a22565b60405180910390fd5b5b505050565b6060611cec8484600085611cf5565b90509392505050565b606082471015611d3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3190612ab4565b60405180910390fd5b611d4385611e09565b611d82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7990612b20565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611dab9190612bba565b60006040518083038185875af1925050503d8060008114611de8576040519150601f19603f3d011682016040523d82523d6000602084013e611ded565b606091505b5091509150611dfd828286611e2c565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611e3c57829050611e8c565b600083511115611e4f5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e839190612c26565b60405180910390fd5b9392505050565b6000819050919050565b611ea681611e93565b82525050565b6000602082019050611ec16000830184611e9d565b92915050565b600080fd5b611ed581611e93565b8114611ee057600080fd5b50565b600081359050611ef281611ecc565b92915050565b600060208284031215611f0e57611f0d611ec7565b5b6000611f1c84828501611ee3565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f5082611f25565b9050919050565b611f6081611f45565b8114611f6b57600080fd5b50565b600081359050611f7d81611f57565b92915050565b600060208284031215611f9957611f98611ec7565b5b6000611fa784828501611f6e565b91505092915050565b60008115159050919050565b611fc581611fb0565b82525050565b6000602082019050611fe06000830184611fbc565b92915050565b611fef81611fb0565b8114611ffa57600080fd5b50565b60008135905061200c81611fe6565b92915050565b60008060006060848603121561202b5761202a611ec7565b5b600061203986828701611f6e565b935050602061204a86828701611ee3565b925050604061205b86828701611ffd565b9150509250925092565b6000806000806080858703121561207f5761207e611ec7565b5b600061208d87828801611f6e565b945050602061209e87828801611ee3565b93505060406120af87828801611ee3565b92505060606120c087828801611ffd565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61210181611f45565b82525050565b61211081611e93565b82525050565b61211f81611fb0565b82525050565b60a08201600082015161213b60008501826120f8565b50602082015161214e6020850182612107565b5060408201516121616040850182612116565b5060608201516121746060850182612107565b5060808201516121876080850182612107565b50505050565b60006121998383612125565b60a08301905092915050565b6000602082019050919050565b60006121bd826120cc565b6121c781856120d7565b93506121d2836120e8565b8060005b838110156122035781516121ea888261218d565b97506121f5836121a5565b9250506001810190506121d6565b5085935050505092915050565b6000602082019050818103600083015261222a81846121b2565b905092915050565b60006020828403121561224857612247611ec7565b5b600061225684828501611ffd565b91505092915050565b61226881611f45565b82525050565b6000602082019050612283600083018461225f565b92915050565b6000819050919050565b60006122ae6122a96122a484611f25565b612289565b611f25565b9050919050565b60006122c082612293565b9050919050565b60006122d2826122b5565b9050919050565b6122e2816122c7565b82525050565b60006020820190506122fd60008301846122d9565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061234a602083612303565b915061235582612314565b602082019050919050565b600060208201905081810360008301526123798161233d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006123ba82611e93565b91506123c583611e93565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156123fe576123fd612380565b5b828202905092915050565b7f6e6f6e4475706c6963617465643a206475706c69636174656400000000000000600082015250565b600061243f601983612303565b915061244a82612409565b602082019050919050565b6000602082019050818103600083015261246e81612432565b9050919050565b7f7368617265732073686f756c642062652067726561746572207468616e203000600082015250565b60006124ab601f83612303565b91506124b682612475565b602082019050919050565b600060208201905081810360008301526124da8161249e565b9050919050565b7f5265776172647320617265206e6f742061637469766500000000000000000000600082015250565b6000612517601683612303565b9150612522826124e1565b602082019050919050565b600060208201905081810360008301526125468161250a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f20636c61696d61626c65207265776172647320746f207769746864726177600082015250565b60006125b2602083612303565b91506125bd8261257c565b602082019050919050565b600060208201905081810360008301526125e1816125a5565b9050919050565b7f53656e64657220646f6573206e6f7420726570726573656e742067726f757000600082015250565b600061261e601f83612303565b9150612629826125e8565b602082019050919050565b6000602082019050818103600083015261264d81612611565b9050919050565b6000606082019050612669600083018661225f565b6126766020830185611e9d565b6126836040830184611e9d565b949350505050565b7f496e64657820646f6573206e6f74206d6174636820616c6c6f636174696f6e00600082015250565b60006126c1601f83612303565b91506126cc8261268b565b602082019050919050565b600060208201905081810360008301526126f0816126b4565b9050919050565b600061270282611e93565b915061270d83611e93565b9250828210156127205761271f612380565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600060ff82169050919050565b60006127728261275a565b915060ff82141561278657612785612380565b5b600182019050919050565b7f53656e646572206973206e6f742067726f7570206f72206f776e657200000000600082015250565b60006127c7601c83612303565b91506127d282612791565b602082019050919050565b600060208201905081810360008301526127f6816127ba565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612859602683612303565b9150612864826127fd565b604082019050919050565b600060208201905081810360008301526128888161284c565b9050919050565b600061289a82611e93565b91506128a583611e93565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156128da576128d9612380565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061291f82611e93565b915061292a83611e93565b92508261293a576129396128e5565b5b828204905092915050565b600060408201905061295a600083018561225f565b6129676020830184611e9d565b9392505050565b60008151905061297d81611fe6565b92915050565b60006020828403121561299957612998611ec7565b5b60006129a78482850161296e565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612a0c602a83612303565b9150612a17826129b0565b604082019050919050565b60006020820190508181036000830152612a3b816129ff565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612a9e602683612303565b9150612aa982612a42565b604082019050919050565b60006020820190508181036000830152612acd81612a91565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612b0a601d83612303565b9150612b1582612ad4565b602082019050919050565b60006020820190508181036000830152612b3981612afd565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612b74578082015181840152602081019050612b59565b83811115612b83576000848401525b50505050565b6000612b9482612b40565b612b9e8185612b4b565b9350612bae818560208601612b56565b80840191505092915050565b6000612bc68284612b89565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000612bf882612bd1565b612c028185612303565b9350612c12818560208601612b56565b612c1b81612bdc565b840191505092915050565b60006020820190508181036000830152612c408184612bed565b90509291505056fea26469706673582212204d80607354713a992b2a595538284c70d8b70f233146a187f2d029b0cadde67864736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c806377d22d1a116100de578063994cd56711610097578063c5d836d911610071578063c5d836d914610411578063ddc632621461042f578063f2fde38b1461044b578063f33c9baa146104675761018e565b8063994cd567146103a5578063a8e2a38b146103d5578063bf62bee6146103f35761018e565b806377d22d1a1461031d5780638b4a4ed5146103275780638c19ec8b146103455780638da5cb5b146103615780638ed955b91461037f578063945c5287146103895761018e565b80635aa01b041161014b5780635f9b1bb5116101255780635f9b1bb5146102cf5780636336694b146102d95780636ac49a89146102f5578063715018a6146103135761018e565b80635aa01b04146102655780635cae9a48146102815780635e175713146102b15761018e565b80630419ba05146101935780631cd8f0fa146101b15780631e718d27146101cd57806322abbddf146101fd578063259e78731461022d578063379607f514610249575b600080fd5b61019b610485565b6040516101a89190611eac565b60405180910390f35b6101cb60048036038101906101c69190611ef8565b6104ce565b005b6101e760048036038101906101e29190611ef8565b610567565b6040516101f49190611eac565b60405180910390f35b61021760048036038101906102129190611f83565b61058a565b6040516102249190611fcb565b60405180910390f35b61024760048036038101906102429190612012565b6105aa565b005b610263600480360381019061025e9190611ef8565b6108b9565b005b61027f600480360381019061027a9190612065565b610a8e565b005b61029b60048036038101906102969190611ef8565b610c5a565b6040516102a89190611eac565b60405180910390f35b6102b9610d28565b6040516102c69190611eac565b60405180910390f35b6102d7610d32565b005b6102f360048036038101906102ee9190611ef8565b610d72565b005b6102fd61107c565b60405161030a9190611eac565b60405180910390f35b61031b611085565b005b61032561110d565b005b61032f61117b565b60405161033c9190612210565b60405180910390f35b61035f600480360381019061035a9190612232565b611269565b005b61036961130b565b604051610376919061226e565b60405180910390f35b610387611334565b005b6103a3600480360381019061039e9190611f83565b6113e5565b005b6103bf60048036038101906103ba9190611ef8565b6114a5565b6040516103cc9190611eac565b60405180910390f35b6103dd6115b9565b6040516103ea91906122e8565b60405180910390f35b6103fb6115e3565b6040516104089190611eac565b60405180910390f35b6104196115ed565b6040516104269190611eac565b60405180910390f35b61044960048036038101906104449190611ef8565b6115f7565b005b61046560048036038101906104609190611f83565b61187c565b005b61046f611974565b60405161047c9190611fcb565b60405180910390f35b60008061049061198b565b9050600061049d826119ca565b905060006104a96119eb565b90506104c66104b783610567565b826119f590919063ffffffff16565b935050505090565b6104d6611a0b565b73ffffffffffffffffffffffffffffffffffffffff166104f461130b565b73ffffffffffffffffffffffffffffffffffffffff161461054a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054190612360565b60405180910390fd5b670de0b6b3a76400008161055e91906123af565b60018190555050565b6000610583610574610d28565b83611a1390919063ffffffff16565b9050919050565b60076020528060005260406000206000915054906101000a900460ff1681565b6105b2611a0b565b73ffffffffffffffffffffffffffffffffffffffff166105d061130b565b73ffffffffffffffffffffffffffffffffffffffff1614610626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061d90612360565b60405180910390fd5b8260001515600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146106ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b190612455565b60405180910390fd5b6001600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060008311610755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c906124c1565b60405180910390fd5b61075d611974565b80156107705750600061076e610d28565b115b1561077e5761077d61110d565b5b60006040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184151581526020016107e664e8d4a510006107d86107c96119eb565b89611a2990919063ffffffff16565b611a1390919063ffffffff16565b815260200160008152509050600881908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff021916908315150217905550606082015181600301556080820151816004015550506108b28160200151611a3f565b5050505050565b6108c1611974565b610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f79061252d565b60405180910390fd5b6000600882815481106109165761091561254d565b5b9060005260206000209060050201905060008160040154141561096e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610965906125c8565b60405180910390fd5b610976611a0b565b73ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a07576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fe90612634565b60405180910390fd5b610a41610a126115b9565b8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360040154611a5d565b600081600401819055507ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56833838360040154604051610a8293929190612654565b60405180910390a15050565b610a96611a0b565b73ffffffffffffffffffffffffffffffffffffffff16610ab461130b565b73ffffffffffffffffffffffffffffffffffffffff1614610b0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0190612360565b60405180910390fd5b610b12611974565b610b51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b489061252d565b60405180910390fd5b610b5a836115f7565b610b8960088481548110610b7157610b7061254d565b5b90600052602060002090600502016001015483611ae3565b8360088481548110610b9e57610b9d61254d565b5b906000526020600020906005020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160088481548110610c0257610c0161254d565b5b9060005260206000209060050201600101819055508060088481548110610c2c57610c2b61254d565b5b906000526020600020906005020160020160006101000a81548160ff02191690831515021790555050505050565b60008060088381548110610c7157610c7061254d565b5b90600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016003820154815260200160048201548152505090508060800151915050919050565b6000600554905090565b6000610d3c61198b565b90506000610d49826119ca565b9050610d68610d5782610567565b6004546119f590919063ffffffff16565b6004819055505050565b610d7a611a0b565b73ffffffffffffffffffffffffffffffffffffffff16610d9861130b565b73ffffffffffffffffffffffffffffffffffffffff1614610dee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de590612360565b60405180910390fd5b6008805490508110610e35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2c906126d7565b60405180910390fd5b610e3d611974565b610e7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e739061252d565b60405180910390fd5b600160088281548110610e9257610e9161254d565b5b906000526020600020906005020160020160006101000a81548160ff021916908315150217905550610ec3816115f7565b610ef160088281548110610eda57610ed961254d565b5b906000526020600020906005020160010154611b14565b60086001600880549050610f0591906126f7565b81548110610f1657610f1561254d565b5b906000526020600020906005020160088281548110610f3857610f3761254d565b5b90600052602060002090600502016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600182015481600101556002820160009054906101000a900460ff168160020160006101000a81548160ff0219169083151502179055506003820154816003015560048201548160040155905050600880548061100d5761100c61272b565b5b6001900381819060005260206000209060050201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006101000a81549060ff0219169055600382016000905560048201600090555050905550565b64e8d4a5100081565b61108d611a0b565b73ffffffffffffffffffffffffffffffffffffffff166110ab61130b565b73ffffffffffffffffffffffffffffffffffffffff1614611101576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f890612360565b60405180910390fd5b61110b6000611b32565b565b611115611974565b611154576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114b9061252d565b60405180910390fd5b61115c6115e3565b431161116757611179565b61116f610d32565b61117843611bf6565b5b565b60606008805480602002602001604051908101604052809291908181526020016000905b8282101561126057838290600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff16151515158152602001600382015481526020016004820154815250508152602001906001019061119f565b50505050905090565b611271611a0b565b73ffffffffffffffffffffffffffffffffffffffff1661128f61130b565b73ffffffffffffffffffffffffffffffffffffffff16146112e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112dc90612360565b60405180910390fd5b80600260006101000a81548160ff02191690831515021790555061130843611bf6565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61133c611a0b565b73ffffffffffffffffffffffffffffffffffffffff1661135a61130b565b73ffffffffffffffffffffffffffffffffffffffff16146113b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a790612360565b60405180910390fd5b60005b6008805490508160ff1610156113e2576113cf8160ff166115f7565b80806113da90612767565b9150506113b3565b50565b6113ed611a0b565b73ffffffffffffffffffffffffffffffffffffffff1661140b61130b565b73ffffffffffffffffffffffffffffffffffffffff1614611461576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145890612360565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600883815481106114bc576114bb61254d565b5b90600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016003820154815260200160048201548152505090506115b181606001516115a364e8d4a51000611595611582610485565b8660200151611a2990919063ffffffff16565b611a1390919063ffffffff16565b611c0090919063ffffffff16565b915050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600354905090565b6000600154905090565b6115ff611974565b61163e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116359061252d565b60405180910390fd5b6000600882815481106116545761165361254d565b5b9060005260206000209060050201905061166c611a0b565b73ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061170257506116cc61130b565b73ffffffffffffffffffffffffffffffffffffffff166116ea611a0b565b73ffffffffffffffffffffffffffffffffffffffff16145b611741576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611738906127dd565b60405180910390fd5b61174961110d565b6000611796826003015461178864e8d4a5100061177a6117676119eb565b8760010154611a2990919063ffffffff16565b611a1390919063ffffffff16565b611c0090919063ffffffff16565b90506117af8183600301546119f590919063ffffffff16565b82600301819055506000811461183c578160020160009054906101000a900460ff161561181b5761180c6117e16115b9565b8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611a5d565b6000826004018190555061183b565b6118328183600401546119f590919063ffffffff16565b82600401819055505b5b7f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae066092495433848360405161186f93929190612654565b60405180910390a1505050565b611884611a0b565b73ffffffffffffffffffffffffffffffffffffffff166118a261130b565b73ffffffffffffffffffffffffffffffffffffffff16146118f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ef90612360565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195f9061286f565b60405180910390fd5b61197181611b32565b50565b6000600260009054906101000a900460ff16905090565b6000806119a86119996115e3565b43611c0090919063ffffffff16565b90506119c46119b56115ed565b82611a2990919063ffffffff16565b91505090565b60006119e464e8d4a5100083611a2990919063ffffffff16565b9050919050565b6000600454905090565b60008183611a03919061288f565b905092915050565b600033905090565b60008183611a219190612914565b905092915050565b60008183611a3791906123af565b905092915050565b611a54816005546119f590919063ffffffff16565b60058190555050565b611ade8363a9059cbb60e01b8484604051602401611a7c929190612945565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611c16565b505050565b611b0a81611afc84600554611c0090919063ffffffff16565b6119f590919063ffffffff16565b6005819055505050565b611b2981600554611c0090919063ffffffff16565b60058190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8060038190555050565b60008183611c0e91906126f7565b905092915050565b6000611c78826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611cdd9092919063ffffffff16565b9050600081511115611cd85780806020019051810190611c989190612983565b611cd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cce90612a22565b60405180910390fd5b5b505050565b6060611cec8484600085611cf5565b90509392505050565b606082471015611d3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3190612ab4565b60405180910390fd5b611d4385611e09565b611d82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7990612b20565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611dab9190612bba565b60006040518083038185875af1925050503d8060008114611de8576040519150601f19603f3d011682016040523d82523d6000602084013e611ded565b606091505b5091509150611dfd828286611e2c565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611e3c57829050611e8c565b600083511115611e4f5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e839190612c26565b60405180910390fd5b9392505050565b6000819050919050565b611ea681611e93565b82525050565b6000602082019050611ec16000830184611e9d565b92915050565b600080fd5b611ed581611e93565b8114611ee057600080fd5b50565b600081359050611ef281611ecc565b92915050565b600060208284031215611f0e57611f0d611ec7565b5b6000611f1c84828501611ee3565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f5082611f25565b9050919050565b611f6081611f45565b8114611f6b57600080fd5b50565b600081359050611f7d81611f57565b92915050565b600060208284031215611f9957611f98611ec7565b5b6000611fa784828501611f6e565b91505092915050565b60008115159050919050565b611fc581611fb0565b82525050565b6000602082019050611fe06000830184611fbc565b92915050565b611fef81611fb0565b8114611ffa57600080fd5b50565b60008135905061200c81611fe6565b92915050565b60008060006060848603121561202b5761202a611ec7565b5b600061203986828701611f6e565b935050602061204a86828701611ee3565b925050604061205b86828701611ffd565b9150509250925092565b6000806000806080858703121561207f5761207e611ec7565b5b600061208d87828801611f6e565b945050602061209e87828801611ee3565b93505060406120af87828801611ee3565b92505060606120c087828801611ffd565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61210181611f45565b82525050565b61211081611e93565b82525050565b61211f81611fb0565b82525050565b60a08201600082015161213b60008501826120f8565b50602082015161214e6020850182612107565b5060408201516121616040850182612116565b5060608201516121746060850182612107565b5060808201516121876080850182612107565b50505050565b60006121998383612125565b60a08301905092915050565b6000602082019050919050565b60006121bd826120cc565b6121c781856120d7565b93506121d2836120e8565b8060005b838110156122035781516121ea888261218d565b97506121f5836121a5565b9250506001810190506121d6565b5085935050505092915050565b6000602082019050818103600083015261222a81846121b2565b905092915050565b60006020828403121561224857612247611ec7565b5b600061225684828501611ffd565b91505092915050565b61226881611f45565b82525050565b6000602082019050612283600083018461225f565b92915050565b6000819050919050565b60006122ae6122a96122a484611f25565b612289565b611f25565b9050919050565b60006122c082612293565b9050919050565b60006122d2826122b5565b9050919050565b6122e2816122c7565b82525050565b60006020820190506122fd60008301846122d9565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061234a602083612303565b915061235582612314565b602082019050919050565b600060208201905081810360008301526123798161233d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006123ba82611e93565b91506123c583611e93565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156123fe576123fd612380565b5b828202905092915050565b7f6e6f6e4475706c6963617465643a206475706c69636174656400000000000000600082015250565b600061243f601983612303565b915061244a82612409565b602082019050919050565b6000602082019050818103600083015261246e81612432565b9050919050565b7f7368617265732073686f756c642062652067726561746572207468616e203000600082015250565b60006124ab601f83612303565b91506124b682612475565b602082019050919050565b600060208201905081810360008301526124da8161249e565b9050919050565b7f5265776172647320617265206e6f742061637469766500000000000000000000600082015250565b6000612517601683612303565b9150612522826124e1565b602082019050919050565b600060208201905081810360008301526125468161250a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f20636c61696d61626c65207265776172647320746f207769746864726177600082015250565b60006125b2602083612303565b91506125bd8261257c565b602082019050919050565b600060208201905081810360008301526125e1816125a5565b9050919050565b7f53656e64657220646f6573206e6f7420726570726573656e742067726f757000600082015250565b600061261e601f83612303565b9150612629826125e8565b602082019050919050565b6000602082019050818103600083015261264d81612611565b9050919050565b6000606082019050612669600083018661225f565b6126766020830185611e9d565b6126836040830184611e9d565b949350505050565b7f496e64657820646f6573206e6f74206d6174636820616c6c6f636174696f6e00600082015250565b60006126c1601f83612303565b91506126cc8261268b565b602082019050919050565b600060208201905081810360008301526126f0816126b4565b9050919050565b600061270282611e93565b915061270d83611e93565b9250828210156127205761271f612380565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600060ff82169050919050565b60006127728261275a565b915060ff82141561278657612785612380565b5b600182019050919050565b7f53656e646572206973206e6f742067726f7570206f72206f776e657200000000600082015250565b60006127c7601c83612303565b91506127d282612791565b602082019050919050565b600060208201905081810360008301526127f6816127ba565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612859602683612303565b9150612864826127fd565b604082019050919050565b600060208201905081810360008301526128888161284c565b9050919050565b600061289a82611e93565b91506128a583611e93565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156128da576128d9612380565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061291f82611e93565b915061292a83611e93565b92508261293a576129396128e5565b5b828204905092915050565b600060408201905061295a600083018561225f565b6129676020830184611e9d565b9392505050565b60008151905061297d81611fe6565b92915050565b60006020828403121561299957612998611ec7565b5b60006129a78482850161296e565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612a0c602a83612303565b9150612a17826129b0565b604082019050919050565b60006020820190508181036000830152612a3b816129ff565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612a9e602683612303565b9150612aa982612a42565b604082019050919050565b60006020820190508181036000830152612acd81612a91565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612b0a601d83612303565b9150612b1582612ad4565b602082019050919050565b60006020820190508181036000830152612b3981612afd565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015612b74578082015181840152602081019050612b59565b83811115612b83576000848401525b50505050565b6000612b9482612b40565b612b9e8185612b4b565b9350612bae818560208601612b56565b80840191505092915050565b6000612bc68284612b89565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000612bf882612bd1565b612c028185612303565b9350612c12818560208601612b56565b612c1b81612bdc565b840191505092915050565b60006020820190508181036000830152612c408184612bed565b90509291505056fea26469706673582212204d80607354713a992b2a595538284c70d8b70f233146a187f2d029b0cadde67864736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1660,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_metricPerBlock",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1665,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_rewardsActive",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1667,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_lastRewardBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1669,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_lifetimeShareValue",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1671,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_totalAllocShares",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1674,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "metric",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(MetricToken)1994"
      },
      {
        "astId": 1929,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "addressExistence",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2008,
        "contract": "src/contracts/TopChef.sol:TopChef",
        "label": "_allocations",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(AllocationGroup)2486_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(AllocationGroup)2486_storage)dyn_storage": {
        "base": "t_struct(AllocationGroup)2486_storage",
        "encoding": "dynamic_array",
        "label": "struct TopChef.AllocationGroup[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(MetricToken)1994": {
        "encoding": "inplace",
        "label": "contract MetricToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(AllocationGroup)2486_storage": {
        "encoding": "inplace",
        "label": "struct TopChef.AllocationGroup",
        "members": [
          {
            "astId": 2477,
            "contract": "src/contracts/TopChef.sol:TopChef",
            "label": "groupAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2479,
            "contract": "src/contracts/TopChef.sol:TopChef",
            "label": "shares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2481,
            "contract": "src/contracts/TopChef.sol:TopChef",
            "label": "autodistribute",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2483,
            "contract": "src/contracts/TopChef.sol:TopChef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2485,
            "contract": "src/contracts/TopChef.sol:TopChef",
            "label": "claimable",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}