{
  "address": "0x322813Fd9A801c5507c9de605d63CEA4f2CE6c44",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotTheApi",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheStateController",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "authors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAuthor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalVotes",
              "type": "uint256"
            },
            {
              "internalType": "enum STATE",
              "name": "questionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct QuestionData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getAuthorOfQuestion",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMostRecentQuestion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getQuestionData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "totalVotes",
              "type": "uint256"
            },
            {
              "internalType": "enum STATE",
              "name": "questionState",
              "type": "uint8"
            }
          ],
          "internalType": "struct QuestionData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "mintQuestion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionApi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "questionData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalVotes",
          "type": "uint256"
        },
        {
          "internalType": "enum STATE",
          "name": "questionState",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newApi",
          "type": "address"
        }
      ],
      "name": "setQuestionApi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStateController",
          "type": "address"
        }
      ],
      "name": "setStateController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "enum STATE",
          "name": "newState",
          "type": "uint8"
        }
      ],
      "name": "updateState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa53f9686b0f9b417c65cde790a2a1e0707aaa31d9c697f80ecc133a5f3912ebf",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x322813Fd9A801c5507c9de605d63CEA4f2CE6c44",
    "transactionIndex": 0,
    "gasUsed": "1500259",
    "logsBloom": "0x
    "blockHash": "0x3bfd6248a2a69782d420932a07a672f2743f84937b2bf4fa2cf19093cbc62a80",
    "transactionHash": "0xa53f9686b0f9b417c65cde790a2a1e0707aaa31d9c697f80ecc133a5f3912ebf",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 215,
        "transactionHash": "0xa53f9686b0f9b417c65cde790a2a1e0707aaa31d9c697f80ecc133a5f3912ebf",
        "address": "0x322813Fd9A801c5507c9de605d63CEA4f2CE6c44",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3bfd6248a2a69782d420932a07a672f2743f84937b2bf4fa2cf19093cbc62a80"
      }
    ],
    "blockNumber": 215,
    "cumulativeGasUsed": "1500259",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4a2696ec6ec05bd8e211447d338ac135",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotTheApi\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheStateController\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAuthor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"enum STATE\",\"name\":\"questionState\",\"type\":\"uint8\"}],\"internalType\":\"struct QuestionData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getAuthorOfQuestion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMostRecentQuestion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getQuestionData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"enum STATE\",\"name\":\"questionState\",\"type\":\"uint8\"}],\"internalType\":\"struct QuestionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"mintQuestion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionApi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questionData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"enum STATE\",\"name\":\"questionState\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newApi\",\"type\":\"address\"}],\"name\":\"setQuestionApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStateController\",\"type\":\"address\"}],\"name\":\"setStateController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"enum STATE\",\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"updateState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"contracts@metricsdao.xyz\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setQuestionApi(address)\":{\"params\":{\"_newApi\":\"The new address of the question API.\"}},\"setStateController(address)\":{\"params\":{\"_newStateController\":\"The new address of the QuestionStateController.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setQuestionApi(address)\":{\"notice\":\"Sets the address of the question API.\"},\"setStateController(address)\":{\"notice\":\"Sets the address of the QuestionStateController.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/BountyQuestion.sol\":\"BountyQuestion\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"src/contracts/Protocol/BountyQuestion.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\nimport \\\"./modifiers/OnlyStateController.sol\\\";\\nimport \\\"./Structs/QuestionData.sol\\\";\\nimport \\\"./interfaces/IBountyQuestion.sol\\\";\\n\\n/// @custom:security-contact contracts@metricsdao.xyz\\ncontract BountyQuestion is IBountyQuestion, Ownable, OnlyApi, OnlyStateController {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _questionIdCounter;\\n\\n    // This maps the author to the list of question IDs they have created\\n    mapping(address => uint256[]) public authors;\\n\\n    mapping(uint256 => QuestionData) public questionData;\\n\\n    constructor() {\\n        _questionIdCounter.increment();\\n    }\\n\\n    function mintQuestion(address author, string calldata uri) public onlyApi returns (uint256) {\\n        uint256 questionId = _questionIdCounter.current();\\n        _questionIdCounter.increment();\\n\\n        questionData[questionId].author = author;\\n        questionData[questionId].questionId = questionId;\\n        questionData[questionId].uri = uri;\\n\\n        authors[author].push(questionId);\\n        return questionId;\\n    }\\n\\n    function updateState(uint256 questionId, STATE newState) public onlyStateController {\\n        QuestionData storage question = questionData[questionId];\\n        question.questionState = newState;\\n    }\\n\\n    function getAuthor(address user) public view returns (QuestionData[] memory) {\\n        uint256[] memory created = authors[user];\\n\\n        QuestionData[] memory ret = new QuestionData[](created.length);\\n\\n        for (uint256 i = 0; i < created.length; i++) {\\n            ret[i] = questionData[created[i]];\\n        }\\n        return ret;\\n    }\\n\\n    function getAuthorOfQuestion(uint256 questionId) public view returns (address) {\\n        return questionData[questionId].author;\\n    }\\n\\n    function getMostRecentQuestion() public view returns (uint256) {\\n        return _questionIdCounter.current();\\n    }\\n\\n    function getQuestionData(uint256 questionId) public view returns (QuestionData memory) {\\n        return questionData[questionId];\\n    }\\n}\\n\",\"keccak256\":\"0x747e0ad3f8d6dc91784a5971e071aae0a89e51aee57021c17db16816a73a422f\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/QuestionStateEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum STATE {\\n    UNINIT,\\n    VOTING,\\n    PUBLISHED,\\n    DISQUALIFIED,\\n    COMPLETED\\n}\\n\",\"keccak256\":\"0x4a2d21883586044bf77a96e2d19266d75b55b2ca8940780115f35cc581c32902\",\"license\":\"MIT\"},\"src/contracts/Protocol/Structs/QuestionData.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Enums/QuestionStateEnum.sol\\\";\\n\\nstruct QuestionData {\\n    uint256 questionId;\\n    address author;\\n    string uri;\\n    // TODO this is only used for our bulk read functions and is not actively tracked, it shouldn't be here.\\n    uint256 totalVotes;\\n    STATE questionState;\\n}\\n\",\"keccak256\":\"0xf71721d270e9ec079299d4f4c4a18f7cc24f95803c846ddb28937082a93775e2\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IBountyQuestion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Structs/QuestionData.sol\\\";\\n\\ninterface IBountyQuestion {\\n    function getQuestionData(uint256 questionId) external view returns (QuestionData memory);\\n\\n    function getMostRecentQuestion() external view returns (uint256);\\n\\n    function updateState(uint256 questionId, STATE newState) external;\\n}\\n\",\"keccak256\":\"0x7fbcc765c545a0ab30f9e3ce66aee3616352f28076b56662de71a0e525448268\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyStateController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyStateController is Ownable {\\n    address public stateController;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the QuestionStateController.\\n     * @param _newStateController The new address of the QuestionStateController.\\n     */\\n    function setStateController(address _newStateController) external onlyOwner {\\n        stateController = _newStateController;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyStateController() {\\n        if (_msgSender() != stateController) revert NotTheStateController();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheStateController();\\n}\\n\",\"keccak256\":\"0x6a61c96a95b38f2fb05225b7550fb68556c5ac74e7f7a2714dff98992f107c8c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261004660201b60201c565b61004e60201b60201c565b610041600361011260201b610e7e1760201c565b610128565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001816000016000828254019250508190555050565b61195a80620001386000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063dab6dbce11610066578063dab6dbce14610278578063f2fde38b146102a8578063f74bfd42146102c4578063ffbafdfe146102f4576100f5565b80638da5cb5b14610204578063b1ee039614610222578063bf632e671461023e578063c0875dfd1461025c576100f5565b8063710bc3cd116100d3578063710bc3cd1461017c578063715018a6146101ac57806374bedfc9146101b657806377974616146101d4576100f5565b80630ab30093146100fa5780631401e0a81461012a5780636baef4971461015e575b600080fd5b610114600480360381019061010f91906110d0565b610310565b604051610121919061136d565b60405180910390f35b610144600480360381019061013f91906113bb565b6105b4565b60405161015595949392919061145f565b60405180910390f35b61016661069f565b60405161017391906114b9565b60405180910390f35b610196600480360381019061019191906113bb565b6106c5565b6040516101a391906114b9565b60405180910390f35b6101b4610705565b005b6101be61078d565b6040516101cb91906114d4565b60405180910390f35b6101ee60048036038101906101e991906114ef565b61079e565b6040516101fb91906114d4565b60405180910390f35b61020c6107cf565b60405161021991906114b9565b60405180910390f35b61023c600480360381019061023791906110d0565b6107f8565b005b6102466108b8565b60405161025391906114b9565b60405180910390f35b610276600480360381019061027191906110d0565b6108de565b005b610292600480360381019061028d9190611594565b61099e565b60405161029f91906114d4565b60405180910390f35b6102c260048036038101906102bd91906110d0565b610b4d565b005b6102de60048036038101906102d991906113bb565b610c44565b6040516102eb919061166a565b60405180910390f35b61030e600480360381019061030991906116b1565b610da8565b005b60606000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561039d57602002820191906000526020600020905b815481526020019060010190808311610389575b505050505090506000815167ffffffffffffffff8111156103c1576103c06116f1565b5b6040519080825280602002602001820160405280156103fa57816020015b6103e7610f6e565b8152602001906001900390816103df5790505b50905060005b82518110156105a957600560008483815181106104205761041f611720565b5b602002602001015181526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546104b19061177e565b80601f01602080910402602001604051908101604052809291908181526020018280546104dd9061177e565b801561052a5780601f106104ff5761010080835404028352916020019161052a565b820191906000526020600020905b81548152906001019060200180831161050d57829003601f168201915b50505050508152602001600382015481526020016004820160009054906101000a900460ff166004811115610562576105616111ea565b5b6004811115610574576105736111ea565b5b8152505082828151811061058b5761058a611720565b5b602002602001018190525080806105a1906117de565b915050610400565b508092505050919050565b60056020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020180546106039061177e565b80601f016020809104026020016040519081016040528092919081815260200182805461062f9061177e565b801561067c5780601f106106515761010080835404028352916020019161067c565b820191906000526020600020905b81548152906001019060200180831161065f57829003601f168201915b5050505050908060030154908060040160009054906101000a900460ff16905085565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006005600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61070d610e94565b73ffffffffffffffffffffffffffffffffffffffff1661072b6107cf565b73ffffffffffffffffffffffffffffffffffffffff1614610781576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077890611872565b60405180910390fd5b61078b6000610e9c565b565b60006107996003610f60565b905090565b600460205281600052604060002081815481106107ba57600080fd5b90600052602060002001600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610800610e94565b73ffffffffffffffffffffffffffffffffffffffff1661081e6107cf565b73ffffffffffffffffffffffffffffffffffffffff1614610874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b90611872565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108e6610e94565b73ffffffffffffffffffffffffffffffffffffffff166109046107cf565b73ffffffffffffffffffffffffffffffffffffffff161461095a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095190611872565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166109e1610e94565b73ffffffffffffffffffffffffffffffffffffffff1614610a2e576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a3a6003610f60565b9050610a466003610e7e565b846005600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060056000838152602001908152602001600020600001819055508383600560008481526020019081526020016000206002019190610adb929190610fc5565b50600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055809150509392505050565b610b55610e94565b73ffffffffffffffffffffffffffffffffffffffff16610b736107cf565b73ffffffffffffffffffffffffffffffffffffffff1614610bc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc090611872565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2f90611904565b60405180910390fd5b610c4181610e9c565b50565b610c4c610f6e565b600560008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610cda9061177e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d069061177e565b8015610d535780601f10610d2857610100808354040283529160200191610d53565b820191906000526020600020905b815481529060010190602001808311610d3657829003601f168201915b50505050508152602001600382015481526020016004820160009054906101000a900460ff166004811115610d8b57610d8a6111ea565b5b6004811115610d9d57610d9c6111ea565b5b815250509050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610de9610e94565b73ffffffffffffffffffffffffffffffffffffffff1614610e36576040517f1ac786d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560008481526020019081526020016000209050818160040160006101000a81548160ff02191690836004811115610e7457610e736111ea565b5b0217905550505050565b6001816000016000828254019250508190555050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001549050919050565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160006004811115610fbf57610fbe6111ea565b5b81525090565b828054610fd19061177e565b90600052602060002090601f016020900481019282610ff3576000855561103a565b82601f1061100c57803560ff191683800117855561103a565b8280016001018555821561103a579182015b8281111561103957823582559160200191906001019061101e565b5b509050611047919061104b565b5090565b5b8082111561106457600081600090555060010161104c565b5090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061109d82611072565b9050919050565b6110ad81611092565b81146110b857600080fd5b50565b6000813590506110ca816110a4565b92915050565b6000602082840312156110e6576110e5611068565b5b60006110f4848285016110bb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61113c81611129565b82525050565b61114b81611092565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561118b578082015181840152602081019050611170565b8381111561119a576000848401525b50505050565b6000601f19601f8301169050919050565b60006111bc82611151565b6111c6818561115c565b93506111d681856020860161116d565b6111df816111a0565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061122a576112296111ea565b5b50565b600081905061123b82611219565b919050565b600061124b8261122d565b9050919050565b61125b81611240565b82525050565b600060a0830160008301516112796000860182611133565b50602083015161128c6020860182611142565b50604083015184820360408601526112a482826111b1565b91505060608301516112b96060860182611133565b5060808301516112cc6080860182611252565b508091505092915050565b60006112e38383611261565b905092915050565b6000602082019050919050565b6000611303826110fd565b61130d8185611108565b93508360208202850161131f85611119565b8060005b8581101561135b578484038952815161133c85826112d7565b9450611347836112eb565b925060208a01995050600181019050611323565b50829750879550505050505092915050565b6000602082019050818103600083015261138781846112f8565b905092915050565b61139881611129565b81146113a357600080fd5b50565b6000813590506113b58161138f565b92915050565b6000602082840312156113d1576113d0611068565b5b60006113df848285016113a6565b91505092915050565b6113f181611129565b82525050565b61140081611092565b82525050565b600082825260208201905092915050565b600061142282611151565b61142c8185611406565b935061143c81856020860161116d565b611445816111a0565b840191505092915050565b61145981611240565b82525050565b600060a08201905061147460008301886113e8565b61148160208301876113f7565b81810360408301526114938186611417565b90506114a260608301856113e8565b6114af6080830184611450565b9695505050505050565b60006020820190506114ce60008301846113f7565b92915050565b60006020820190506114e960008301846113e8565b92915050565b6000806040838503121561150657611505611068565b5b6000611514858286016110bb565b9250506020611525858286016113a6565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f8401126115545761155361152f565b5b8235905067ffffffffffffffff81111561157157611570611534565b5b60208301915083600182028301111561158d5761158c611539565b5b9250929050565b6000806000604084860312156115ad576115ac611068565b5b60006115bb868287016110bb565b935050602084013567ffffffffffffffff8111156115dc576115db61106d565b5b6115e88682870161153e565b92509250509250925092565b600060a08301600083015161160c6000860182611133565b50602083015161161f6020860182611142565b506040830151848203604086015261163782826111b1565b915050606083015161164c6060860182611133565b50608083015161165f6080860182611252565b508091505092915050565b6000602082019050818103600083015261168481846115f4565b905092915050565b6005811061169957600080fd5b50565b6000813590506116ab8161168c565b92915050565b600080604083850312156116c8576116c7611068565b5b60006116d6858286016113a6565b92505060206116e78582860161169c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061179657607f821691505b6020821081036117a9576117a861174f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006117e982611129565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361181b5761181a6117af565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061185c602083611406565b915061186782611826565b602082019050919050565b6000602082019050818103600083015261188b8161184f565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006118ee602683611406565b91506118f982611892565b604082019050919050565b6000602082019050818103600083015261191d816118e1565b905091905056fea2646970667358221220f7c3969c8adbf18a7d61f61a761e66ae5bd173c6375589f95d9d047a16cd69e264736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063dab6dbce11610066578063dab6dbce14610278578063f2fde38b146102a8578063f74bfd42146102c4578063ffbafdfe146102f4576100f5565b80638da5cb5b14610204578063b1ee039614610222578063bf632e671461023e578063c0875dfd1461025c576100f5565b8063710bc3cd116100d3578063710bc3cd1461017c578063715018a6146101ac57806374bedfc9146101b657806377974616146101d4576100f5565b80630ab30093146100fa5780631401e0a81461012a5780636baef4971461015e575b600080fd5b610114600480360381019061010f91906110d0565b610310565b604051610121919061136d565b60405180910390f35b610144600480360381019061013f91906113bb565b6105b4565b60405161015595949392919061145f565b60405180910390f35b61016661069f565b60405161017391906114b9565b60405180910390f35b610196600480360381019061019191906113bb565b6106c5565b6040516101a391906114b9565b60405180910390f35b6101b4610705565b005b6101be61078d565b6040516101cb91906114d4565b60405180910390f35b6101ee60048036038101906101e991906114ef565b61079e565b6040516101fb91906114d4565b60405180910390f35b61020c6107cf565b60405161021991906114b9565b60405180910390f35b61023c600480360381019061023791906110d0565b6107f8565b005b6102466108b8565b60405161025391906114b9565b60405180910390f35b610276600480360381019061027191906110d0565b6108de565b005b610292600480360381019061028d9190611594565b61099e565b60405161029f91906114d4565b60405180910390f35b6102c260048036038101906102bd91906110d0565b610b4d565b005b6102de60048036038101906102d991906113bb565b610c44565b6040516102eb919061166a565b60405180910390f35b61030e600480360381019061030991906116b1565b610da8565b005b60606000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561039d57602002820191906000526020600020905b815481526020019060010190808311610389575b505050505090506000815167ffffffffffffffff8111156103c1576103c06116f1565b5b6040519080825280602002602001820160405280156103fa57816020015b6103e7610f6e565b8152602001906001900390816103df5790505b50905060005b82518110156105a957600560008483815181106104205761041f611720565b5b602002602001015181526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546104b19061177e565b80601f01602080910402602001604051908101604052809291908181526020018280546104dd9061177e565b801561052a5780601f106104ff5761010080835404028352916020019161052a565b820191906000526020600020905b81548152906001019060200180831161050d57829003601f168201915b50505050508152602001600382015481526020016004820160009054906101000a900460ff166004811115610562576105616111ea565b5b6004811115610574576105736111ea565b5b8152505082828151811061058b5761058a611720565b5b602002602001018190525080806105a1906117de565b915050610400565b508092505050919050565b60056020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020180546106039061177e565b80601f016020809104026020016040519081016040528092919081815260200182805461062f9061177e565b801561067c5780601f106106515761010080835404028352916020019161067c565b820191906000526020600020905b81548152906001019060200180831161065f57829003601f168201915b5050505050908060030154908060040160009054906101000a900460ff16905085565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006005600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61070d610e94565b73ffffffffffffffffffffffffffffffffffffffff1661072b6107cf565b73ffffffffffffffffffffffffffffffffffffffff1614610781576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077890611872565b60405180910390fd5b61078b6000610e9c565b565b60006107996003610f60565b905090565b600460205281600052604060002081815481106107ba57600080fd5b90600052602060002001600091509150505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610800610e94565b73ffffffffffffffffffffffffffffffffffffffff1661081e6107cf565b73ffffffffffffffffffffffffffffffffffffffff1614610874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b90611872565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108e6610e94565b73ffffffffffffffffffffffffffffffffffffffff166109046107cf565b73ffffffffffffffffffffffffffffffffffffffff161461095a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095190611872565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166109e1610e94565b73ffffffffffffffffffffffffffffffffffffffff1614610a2e576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a3a6003610f60565b9050610a466003610e7e565b846005600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060056000838152602001908152602001600020600001819055508383600560008481526020019081526020016000206002019190610adb929190610fc5565b50600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055809150509392505050565b610b55610e94565b73ffffffffffffffffffffffffffffffffffffffff16610b736107cf565b73ffffffffffffffffffffffffffffffffffffffff1614610bc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc090611872565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2f90611904565b60405180910390fd5b610c4181610e9c565b50565b610c4c610f6e565b600560008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610cda9061177e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d069061177e565b8015610d535780601f10610d2857610100808354040283529160200191610d53565b820191906000526020600020905b815481529060010190602001808311610d3657829003601f168201915b50505050508152602001600382015481526020016004820160009054906101000a900460ff166004811115610d8b57610d8a6111ea565b5b6004811115610d9d57610d9c6111ea565b5b815250509050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610de9610e94565b73ffffffffffffffffffffffffffffffffffffffff1614610e36576040517f1ac786d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560008481526020019081526020016000209050818160040160006101000a81548160ff02191690836004811115610e7457610e736111ea565b5b0217905550505050565b6001816000016000828254019250508190555050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001549050919050565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160006004811115610fbf57610fbe6111ea565b5b81525090565b828054610fd19061177e565b90600052602060002090601f016020900481019282610ff3576000855561103a565b82601f1061100c57803560ff191683800117855561103a565b8280016001018555821561103a579182015b8281111561103957823582559160200191906001019061101e565b5b509050611047919061104b565b5090565b5b8082111561106457600081600090555060010161104c565b5090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061109d82611072565b9050919050565b6110ad81611092565b81146110b857600080fd5b50565b6000813590506110ca816110a4565b92915050565b6000602082840312156110e6576110e5611068565b5b60006110f4848285016110bb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61113c81611129565b82525050565b61114b81611092565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561118b578082015181840152602081019050611170565b8381111561119a576000848401525b50505050565b6000601f19601f8301169050919050565b60006111bc82611151565b6111c6818561115c565b93506111d681856020860161116d565b6111df816111a0565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005811061122a576112296111ea565b5b50565b600081905061123b82611219565b919050565b600061124b8261122d565b9050919050565b61125b81611240565b82525050565b600060a0830160008301516112796000860182611133565b50602083015161128c6020860182611142565b50604083015184820360408601526112a482826111b1565b91505060608301516112b96060860182611133565b5060808301516112cc6080860182611252565b508091505092915050565b60006112e38383611261565b905092915050565b6000602082019050919050565b6000611303826110fd565b61130d8185611108565b93508360208202850161131f85611119565b8060005b8581101561135b578484038952815161133c85826112d7565b9450611347836112eb565b925060208a01995050600181019050611323565b50829750879550505050505092915050565b6000602082019050818103600083015261138781846112f8565b905092915050565b61139881611129565b81146113a357600080fd5b50565b6000813590506113b58161138f565b92915050565b6000602082840312156113d1576113d0611068565b5b60006113df848285016113a6565b91505092915050565b6113f181611129565b82525050565b61140081611092565b82525050565b600082825260208201905092915050565b600061142282611151565b61142c8185611406565b935061143c81856020860161116d565b611445816111a0565b840191505092915050565b61145981611240565b82525050565b600060a08201905061147460008301886113e8565b61148160208301876113f7565b81810360408301526114938186611417565b90506114a260608301856113e8565b6114af6080830184611450565b9695505050505050565b60006020820190506114ce60008301846113f7565b92915050565b60006020820190506114e960008301846113e8565b92915050565b6000806040838503121561150657611505611068565b5b6000611514858286016110bb565b9250506020611525858286016113a6565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f8401126115545761155361152f565b5b8235905067ffffffffffffffff81111561157157611570611534565b5b60208301915083600182028301111561158d5761158c611539565b5b9250929050565b6000806000604084860312156115ad576115ac611068565b5b60006115bb868287016110bb565b935050602084013567ffffffffffffffff8111156115dc576115db61106d565b5b6115e88682870161153e565b92509250509250925092565b600060a08301600083015161160c6000860182611133565b50602083015161161f6020860182611142565b506040830151848203604086015261163782826111b1565b915050606083015161164c6060860182611133565b50608083015161165f6080860182611252565b508091505092915050565b6000602082019050818103600083015261168481846115f4565b905092915050565b6005811061169957600080fd5b50565b6000813590506116ab8161168c565b92915050565b600080604083850312156116c8576116c7611068565b5b60006116d6858286016113a6565b92505060206116e78582860161169c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061179657607f821691505b6020821081036117a9576117a861174f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006117e982611129565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361181b5761181a6117af565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061185c602083611406565b915061186782611826565b602082019050919050565b6000602082019050818103600083015261188b8161184f565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006118ee602683611406565b91506118f982611892565b604082019050919050565b6000602082019050818103600083015261191d816118e1565b905091905056fea2646970667358221220f7c3969c8adbf18a7d61f61a761e66ae5bd173c6375589f95d9d047a16cd69e264736f6c634300080d0033",
  "devdoc": {
    "custom:security-contact": "contracts@metricsdao.xyz",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setQuestionApi(address)": {
        "params": {
          "_newApi": "The new address of the question API."
        }
      },
      "setStateController(address)": {
        "params": {
          "_newStateController": "The new address of the QuestionStateController."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setQuestionApi(address)": {
        "notice": "Sets the address of the question API."
      },
      "setStateController(address)": {
        "notice": "Sets the address of the QuestionStateController."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3595,
        "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
        "label": "questionApi",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3665,
        "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
        "label": "stateController",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1229,
        "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
        "label": "_questionIdCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Counter)942_storage"
      },
      {
        "astId": 1234,
        "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
        "label": "authors",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1239,
        "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
        "label": "questionData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(QuestionData)2562_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_enum(STATE)1440": {
        "encoding": "inplace",
        "label": "enum STATE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(QuestionData)2562_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct QuestionData)",
        "numberOfBytes": "32",
        "value": "t_struct(QuestionData)2562_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)942_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 941,
            "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(QuestionData)2562_storage": {
        "encoding": "inplace",
        "label": "struct QuestionData",
        "members": [
          {
            "astId": 2552,
            "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
            "label": "questionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2554,
            "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
            "label": "author",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2556,
            "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
            "label": "uri",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2558,
            "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
            "label": "totalVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2561,
            "contract": "src/contracts/Protocol/BountyQuestion.sol:BountyQuestion",
            "label": "questionState",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(STATE)1440"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}