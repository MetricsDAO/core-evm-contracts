{
  "address": "0x7a2088a1bFc9d81c55368AE168C2C02570cB814F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metricTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "questionStateControllerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasuryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadySlashed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotUnvoteOwnQuestion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimNotReleased",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoMetricDeposited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheCostController",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheDepositor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionHasInvalidStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionNotInReview",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionNotInVoting",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuestionNotPublished",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserHasNotUnvoted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "Slashed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimController",
      "outputs": [
        {
          "internalType": "contract IClaimController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "costController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositsByWithdrawers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "enum STAGE",
          "name": "stage",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAmountFromProperties",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getLockedMetricByQuestion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLockedPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMetricTotalLockedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "enum STAGE",
          "name": "stage",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserFromProperties",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "enum STAGE",
          "name": "stage",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getVaultById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "enum STATUS",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct Vault.lockAttributes",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getVaultsByWithdrawer",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "enum STAGE",
          "name": "stage",
          "type": "uint8"
        }
      ],
      "name": "lockMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum STAGE",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedMetric",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum STATUS",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedMetricByQuestion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metric",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionStateController",
      "outputs": [
        {
          "internalType": "contract IQuestionStateController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bountyQuestion",
          "type": "address"
        }
      ],
      "name": "setBountyQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimController",
          "type": "address"
        }
      ],
      "name": "setClaimController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newCostController",
          "type": "address"
        }
      ],
      "name": "setCostController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_metric",
          "type": "address"
        }
      ],
      "name": "setMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_questionStateController",
          "type": "address"
        }
      ],
      "name": "setQuestionStateController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum STATUS",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalLockedInVaults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "enum STAGE",
          "name": "stage",
          "type": "uint8"
        }
      ],
      "name": "withdrawMetric",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe0ec7fb5ecff8b533c6e50f37a99eb0d6ccf2725558755cc4e5dc568bb7d575d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x7a2088a1bFc9d81c55368AE168C2C02570cB814F",
    "transactionIndex": 0,
    "gasUsed": "2918770",
    "logsBloom": "0x
    "blockHash": "0xe72bce29b26ab6253bc3c630581a8a0a6dd79073df8822833c2900e1c6a8928e",
    "transactionHash": "0xe0ec7fb5ecff8b533c6e50f37a99eb0d6ccf2725558755cc4e5dc568bb7d575d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 221,
        "transactionHash": "0xe0ec7fb5ecff8b533c6e50f37a99eb0d6ccf2725558755cc4e5dc568bb7d575d",
        "address": "0x7a2088a1bFc9d81c55368AE168C2C02570cB814F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe72bce29b26ab6253bc3c630581a8a0a6dd79073df8822833c2900e1c6a8928e"
      }
    ],
    "blockNumber": 221,
    "cumulativeGasUsed": "2918770",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
    "0x4A679253410272dd5232B3Ff7cF5dbB88f295319",
    "0xD3603df4BC1A9df587155bc03eeb166874d6077C"
  ],
  "numDeployments": 1,
  "solcInputHash": "4a2696ec6ec05bd8e211447d338ac135",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metricTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"questionStateControllerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadySlashed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotUnvoteOwnQuestion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimNotReleased\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoMetricDeposited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheCostController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheDepositor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionHasInvalidStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionNotInReview\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionNotInVoting\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuestionNotPublished\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserHasNotUnvoted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimController\",\"outputs\":[{\"internalType\":\"contract IClaimController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositsByWithdrawers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"enum STAGE\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAmountFromProperties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getLockedMetricByQuestion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLockedPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetricTotalLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"enum STAGE\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserFromProperties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"enum STAGE\",\"name\":\"stage\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getVaultById\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum STATUS\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Vault.lockAttributes\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getVaultsByWithdrawer\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"enum STAGE\",\"name\":\"stage\",\"type\":\"uint8\"}],\"name\":\"lockMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum STAGE\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedMetric\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum STATUS\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedMetricByQuestion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metric\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionStateController\",\"outputs\":[{\"internalType\":\"contract IQuestionStateController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bountyQuestion\",\"type\":\"address\"}],\"name\":\"setBountyQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimController\",\"type\":\"address\"}],\"name\":\"setClaimController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCostController\",\"type\":\"address\"}],\"name\":\"setCostController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metric\",\"type\":\"address\"}],\"name\":\"setMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_questionStateController\",\"type\":\"address\"}],\"name\":\"setQuestionStateController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum STATUS\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLockedInVaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"enum STAGE\",\"name\":\"stage\",\"type\":\"uint8\"}],\"name\":\"withdrawMetric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"metricTokenAddress\":\"The Metric token address\",\"questionStateControllerAddress\":\"The QuestionStateController address.\",\"treasuryAddress\":\"The treasury address.\"}},\"getMetricTotalLockedBalance()\":{\"returns\":{\"_0\":\"The total amount of Metric locked in the vault.\"}},\"getVaultById(uint256,uint8,address)\":{\"params\":{\"questionId\":\"The question id.\",\"stage\":\"The stage of the question.\",\"user\":\"The address of the user.\"},\"returns\":{\"_0\":\"A struct containing the attributes of the question (withdrawer, amount, status).\"}},\"getVaultsByWithdrawer(address)\":{\"params\":{\"user\":\"The address of the user.\"},\"returns\":{\"_0\":\"The questions that the user has created.\"}},\"lockMetric(address,uint256,uint256,uint8)\":{\"params\":{\"amount\":\"The amount of METRIC to lock\",\"questionId\":\"The question id'\",\"stage\":\"The stage for which METRIC is locked\",\"user\":\"The address of the user locking the METRIC\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCostController(address)\":{\"params\":{\"_newCostController\":\"The new address of the ActionCostController.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawMetric(uint256,uint8)\":{\"params\":{\"questionId\":\"The question id\",\"stage\":\"The stage for which the user is withdrawing metric from a question.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadySlashed()\":[{\"notice\":\"Throw if the same question is slashed twice.\"}],\"CannotUnvoteOwnQuestion()\":[{\"notice\":\"Throw if creator of question tries to unvote\"}],\"ClaimNotReleased()\":[{\"notice\":\"Throw if user tries to withdraw Metric from a claim that is not released.\"}],\"InvalidAddress()\":[{\"notice\":\"Throw if address is equal to address(0).\"}],\"InvalidStage()\":[{\"notice\":\"Throw if user tries to lock METRIC for a stage that does not require locking.\"}],\"NoMetricDeposited()\":[{\"notice\":\"Throw if user tries to withdraw Metric without having first deposited.\"}],\"NotTheDepositor()\":[{\"notice\":\"Throw if user tries to withdraw Metric from a question it does not own.\"}],\"QuestionHasInvalidStatus()\":[{\"notice\":\"Throw if user tries to lock Metric for a question that has a different state than UNINT.\"}],\"QuestionNotInReview()\":[{\"notice\":\"Throw if user tries to withdraw Metric from a question that is not in the review state.\"}],\"QuestionNotInVoting()\":[{\"notice\":\"Throw if user tries to claim Metric for unvoting on a question that is not in the VOTING state.\"}],\"QuestionNotPublished()\":[{\"notice\":\"Throw if user tries to claim Metric for a question that has not been published (yet).\"}],\"UserHasNotUnvoted()\":[{\"notice\":\"Throw if user tries to claim Metric for a question that was not unvoted\"}]},\"events\":{\"Slashed(address,uint256)\":{\"notice\":\"Event emitted when a question is slashed.\"},\"Withdraw(address,uint256)\":{\"notice\":\"Event emitted when Metric is withdrawn.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor sets the question Metric token, QuestionStateController and the treasury.\"},\"depositsByWithdrawers(address,uint256)\":{\"notice\":\"Keeps track of the quantity of deposits per user.\"},\"getMetricTotalLockedBalance()\":{\"notice\":\"Gets the total amount of Metric locked in the vault.\"},\"getVaultById(uint256,uint8,address)\":{\"notice\":\"Gets the information about the vault attributes of a question.\"},\"getVaultsByWithdrawer(address)\":{\"notice\":\"Gets the questions that a user has created.\"},\"lockMetric(address,uint256,uint256,uint8)\":{\"notice\":\"Locks METRIC for creating a question\"},\"lockedMetric(uint256,uint8,address)\":{\"notice\":\"Keeps track of the quantity of withdrawals per user.\"},\"lockedMetricByQuestion(uint256)\":{\"notice\":\"Keeps track of the amount of METRIC locked per question\"},\"setCostController(address)\":{\"notice\":\"Sets the address of the ActionCostController.\"},\"setMetric(address)\":{\"notice\":\"Allows owner to update the Metric token address.\"},\"setQuestionStateController(address)\":{\"notice\":\"Allows owner to update the QuestionStateController.\"},\"setTreasury(address)\":{\"notice\":\"Allows owner to update the treasury address.\"},\"totalLockedInVaults(address)\":{\"notice\":\"Keeps track of total amount in vault for a given user.\"},\"treasury()\":{\"notice\":\"Address to the MetricsDAO treasury.\"},\"withdrawMetric(uint256,uint8)\":{\"notice\":\"Allows a user to withdraw METRIC locked for a question, after the question is published.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/Vault.sol\":\"Vault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"src/contracts/Protocol/BountyQuestion.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\nimport \\\"./modifiers/OnlyStateController.sol\\\";\\nimport \\\"./Structs/QuestionData.sol\\\";\\nimport \\\"./interfaces/IBountyQuestion.sol\\\";\\n\\n/// @custom:security-contact contracts@metricsdao.xyz\\ncontract BountyQuestion is IBountyQuestion, Ownable, OnlyApi, OnlyStateController {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _questionIdCounter;\\n\\n    // This maps the author to the list of question IDs they have created\\n    mapping(address => uint256[]) public authors;\\n\\n    mapping(uint256 => QuestionData) public questionData;\\n\\n    constructor() {\\n        _questionIdCounter.increment();\\n    }\\n\\n    function mintQuestion(address author, string calldata uri) public onlyApi returns (uint256) {\\n        uint256 questionId = _questionIdCounter.current();\\n        _questionIdCounter.increment();\\n\\n        questionData[questionId].author = author;\\n        questionData[questionId].questionId = questionId;\\n        questionData[questionId].uri = uri;\\n\\n        authors[author].push(questionId);\\n        return questionId;\\n    }\\n\\n    function updateState(uint256 questionId, STATE newState) public onlyStateController {\\n        QuestionData storage question = questionData[questionId];\\n        question.questionState = newState;\\n    }\\n\\n    function getAuthor(address user) public view returns (QuestionData[] memory) {\\n        uint256[] memory created = authors[user];\\n\\n        QuestionData[] memory ret = new QuestionData[](created.length);\\n\\n        for (uint256 i = 0; i < created.length; i++) {\\n            ret[i] = questionData[created[i]];\\n        }\\n        return ret;\\n    }\\n\\n    function getAuthorOfQuestion(uint256 questionId) public view returns (address) {\\n        return questionData[questionId].author;\\n    }\\n\\n    function getMostRecentQuestion() public view returns (uint256) {\\n        return _questionIdCounter.current();\\n    }\\n\\n    function getQuestionData(uint256 questionId) public view returns (QuestionData memory) {\\n        return questionData[questionId];\\n    }\\n}\\n\",\"keccak256\":\"0x747e0ad3f8d6dc91784a5971e071aae0a89e51aee57021c17db16816a73a422f\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/ClaimEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum CLAIM_STATE {\\n    UNINT,\\n    CLAIMED,\\n    RELEASED,\\n    ANSWERED\\n}\\n\",\"keccak256\":\"0xea71b984aaf40147b5540a4db0f867086eaf9c4c45acd47e4f4e3149b649b1e6\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/QuestionStateEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum STATE {\\n    UNINIT,\\n    VOTING,\\n    PUBLISHED,\\n    DISQUALIFIED,\\n    COMPLETED\\n}\\n\",\"keccak256\":\"0x4a2d21883586044bf77a96e2d19266d75b55b2ca8940780115f35cc581c32902\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/VaultEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum STAGE {\\n    CREATE_AND_VOTE,\\n    UNVOTE,\\n    CLAIM_AND_ANSWER,\\n    RELEASE_CLAIM,\\n    REVIEW\\n}\\n\\nenum STATUS {\\n    UNINT,\\n    DEPOSITED,\\n    WITHDRAWN,\\n    SLASHED\\n}\\n\",\"keccak256\":\"0x1d96c2cfb960bcdad5245263ab395222413b31c448bed38e1de19ce6f46244c8\",\"license\":\"MIT\"},\"src/contracts/Protocol/QuestionStateController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IQuestionStateController.sol\\\";\\nimport \\\"./interfaces/IBountyQuestion.sol\\\";\\n\\n// Enums\\nimport \\\"./Enums/QuestionStateEnum.sol\\\";\\n\\n// Structs\\nimport \\\"./Structs/QuestionData.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\ncontract QuestionStateController is IQuestionStateController, Ownable, OnlyApi {\\n    // Mapping for all questions that are upvoted by the user?\\n    mapping(address => mapping(uint256 => bool)) public hasVoted;\\n\\n    /// @notice For a given address and a given question, tracks the index of their vote in the votes[]\\n    mapping(address => mapping(uint256 => uint256)) public questionIndex; // TODO userVoteIndex\\n\\n    mapping(uint256 => Votes) public votes;\\n\\n    IBountyQuestion private _bountyQuestion;\\n\\n    // TODO do we want user to lose their metric if a question is closed? they voted on something bad\\n\\n    constructor(address bountyQuestion) {\\n        _bountyQuestion = IBountyQuestion(bountyQuestion);\\n    }\\n\\n    /**\\n     * @notice Initializes a question to draft.\\n     * @param questionId The id of the question\\n     */\\n    function initializeQuestion(uint256 questionId) public onlyApi {\\n        _bountyQuestion.updateState(questionId, STATE.VOTING);\\n\\n        votes[questionId].totalVotes = 1;\\n    }\\n\\n    function publish(uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // if some voting barrier is passed, we can publish the question\\n        _bountyQuestion.updateState(questionId, STATE.PUBLISHED);\\n    }\\n\\n    function voteFor(address _user, uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        if (hasVoted[_user][questionId]) revert HasAlreadyVotedForQuestion();\\n\\n        // Effects\\n        hasVoted[_user][questionId] = true;\\n\\n        votes[questionId].totalVotes++;\\n        votes[questionId].voters.push(_user);\\n\\n        questionIndex[_user][questionId] = votes[questionId].voters.length - 1;\\n\\n        // Interactions\\n    }\\n\\n    function unvoteFor(address _user, uint256 questionId) public onlyApi onlyState(STATE.VOTING, questionId) {\\n        // Checks\\n        if (!hasVoted[_user][questionId]) revert HasNotVotedForQuestion();\\n\\n        // Effects\\n        votes[questionId].totalVotes--;\\n\\n        uint256 index = questionIndex[_user][questionId];\\n        delete votes[questionId].voters[index];\\n\\n        hasVoted[_user][questionId] = false;\\n\\n        // Interactions\\n    }\\n\\n    function setDisqualifiedState(uint256 questionId) public onlyApi {\\n        _bountyQuestion.updateState(questionId, STATE.DISQUALIFIED);\\n    }\\n\\n    // TODO batch voting and batch operations and look into arrays as parameters security risk\\n\\n    //------------------------------------------------------ View Functions\\n\\n    function getState(uint256 questionId) public view returns (STATE currentState) {\\n        return _bountyQuestion.getQuestionData(questionId).questionState;\\n    }\\n\\n    function getVoters(uint256 questionId) public view returns (address[] memory voters) {\\n        return votes[questionId].voters;\\n    }\\n\\n    function getTotalVotes(uint256 questionId) public view returns (uint256) {\\n        return votes[questionId].totalVotes;\\n    }\\n\\n    function getHasUserVoted(address user, uint256 questionId) external view returns (bool) {\\n        return hasVoted[user][questionId];\\n    }\\n\\n    function getQuestions(\\n        STATE state,\\n        uint256 offset,\\n        uint256 limit\\n    ) public view returns (QuestionData[] memory questions) {\\n        uint256 highestQuestion = _bountyQuestion.getMostRecentQuestion();\\n        if (limit > highestQuestion) limit = highestQuestion;\\n        if (offset > highestQuestion) offset = highestQuestion;\\n\\n        questions = new QuestionData[](limit);\\n\\n        uint256 found = 0;\\n        QuestionData memory cur;\\n\\n        for (uint256 i = 0; i < highestQuestion; i++) {\\n            cur = _bountyQuestion.getQuestionData(i);\\n            if (cur.questionState == state) {\\n                questions[found] = cur;\\n                found++;\\n                if (found == limit) break;\\n            }\\n        }\\n\\n        return questions;\\n    }\\n\\n    function getQuestionsByState(\\n        STATE currentState,\\n        uint256 currentQuestionId,\\n        uint256 offset\\n    ) public view returns (QuestionData[] memory found) {\\n        uint256 j = 0;\\n        uint256 limit;\\n        uint256 sizeOfArray;\\n        currentQuestionId -= 1;\\n        if (currentQuestionId > offset) {\\n            limit = currentQuestionId - offset;\\n            sizeOfArray = (currentQuestionId - offset) + 1;\\n        } else {\\n            limit = 1;\\n            sizeOfArray = currentQuestionId;\\n        }\\n        found = new QuestionData[](sizeOfArray);\\n        for (uint256 i = currentQuestionId; i >= limit; i--) {\\n            if (_bountyQuestion.getQuestionData(i).questionState == currentState) {\\n                found[j] = _bountyQuestion.getQuestionData(i);\\n                found[j].totalVotes = votes[i].totalVotes;\\n                j++;\\n            }\\n        }\\n        return found;\\n    }\\n\\n    //------------------------------------------------------ OWNER FUNCTIONS\\n\\n    /**\\n     * @notice Allows the owner to set the BountyQuestion contract address.\\n     * @param newQuestion The address of the new BountyQuestion contract.\\n     */\\n    function setQuestionProxy(address newQuestion) public onlyOwner {\\n        if (newQuestion == address(0)) revert InvalidAddress();\\n        _bountyQuestion = IBountyQuestion(newQuestion);\\n    }\\n\\n    //------------------------------------------------------ Errors\\n    error HasNotVotedForQuestion();\\n    error HasAlreadyVotedForQuestion();\\n    error InvalidStateTransition();\\n    error InvalidAddress();\\n\\n    //------------------------------------------------------ Structs\\n    modifier onlyState(STATE required, uint256 questionId) {\\n        if (required != getState(questionId)) revert InvalidStateTransition();\\n        _;\\n    }\\n\\n    struct Votes {\\n        address[] voters;\\n        uint256 totalVotes;\\n    }\\n}\\n\",\"keccak256\":\"0x41be4bbe794b77a3f9cc9443ae9434b02be964770aa63609d54ddfe6470fc8b5\",\"license\":\"MIT\"},\"src/contracts/Protocol/Structs/AnswerStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"../Enums/ClaimEnum.sol\\\";\\n\\nstruct Answer {\\n    CLAIM_STATE state;\\n    address author;\\n    string answerURL;\\n    uint256 finalGrade;\\n    string scoringMetaDataURI;\\n}\\n\",\"keccak256\":\"0xf6e0212f6a848def738435df319971ab89a8690dd8b6e40d3100285ada4adf0b\",\"license\":\"MIT\"},\"src/contracts/Protocol/Structs/QuestionData.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Enums/QuestionStateEnum.sol\\\";\\n\\nstruct QuestionData {\\n    uint256 questionId;\\n    address author;\\n    string uri;\\n    // TODO this is only used for our bulk read functions and is not actively tracked, it shouldn't be here.\\n    uint256 totalVotes;\\n    STATE questionState;\\n}\\n\",\"keccak256\":\"0xf71721d270e9ec079299d4f4c4a18f7cc24f95803c846ddb28937082a93775e2\",\"license\":\"MIT\"},\"src/contracts/Protocol/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./QuestionStateController.sol\\\";\\nimport \\\"./BountyQuestion.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IQuestionStateController.sol\\\";\\nimport \\\"./interfaces/IClaimController.sol\\\";\\n\\n// Enums\\nimport \\\"./Enums/VaultEnum.sol\\\";\\nimport \\\"./Enums/QuestionStateEnum.sol\\\";\\nimport \\\"./Enums/ClaimEnum.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyCostController.sol\\\";\\n\\ncontract Vault is Ownable, OnlyCostController {\\n    IERC20 public metric;\\n    IQuestionStateController public questionStateController;\\n    IClaimController public claimController;\\n    BountyQuestion private _question;\\n\\n    STATUS public status;\\n\\n    /// @notice Address to the MetricsDAO treasury.\\n    address public treasury;\\n\\n    /// @notice Keeps track of the quantity of deposits per user.\\n    mapping(address => uint256[]) public depositsByWithdrawers;\\n\\n    /// @notice Keeps track of the amount of METRIC locked per question\\n    mapping(uint256 => uint256) public lockedMetricByQuestion;\\n\\n    /// @notice Keeps track of total amount in vault for a given user.\\n    mapping(address => uint256) public totalLockedInVaults;\\n\\n    /// @notice Keeps track of the quantity of withdrawals per user.\\n    mapping(uint256 => mapping(STAGE => mapping(address => lockAttributes))) public lockedMetric;\\n\\n    //------------------------------------------------------ ERRORS\\n\\n    /// @notice Throw if user tries to withdraw Metric from a question it does not own.\\n    error NotTheDepositor();\\n    /// @notice Throw if user tries to withdraw Metric without having first deposited.\\n    error NoMetricDeposited();\\n    /// @notice Throw if user tries to lock Metric for a question that has a different state than UNINT.\\n    error QuestionHasInvalidStatus();\\n    /// @notice Throw if user tries to claim Metric for unvoting on a question that is not in the VOTING state.\\n    error QuestionNotInVoting();\\n    /// @notice Throw if user tries to claim Metric for a question that has not been published (yet).\\n    error QuestionNotPublished();\\n    /// @notice Throw if user tries to claim Metric for a question that was not unvoted\\n    error UserHasNotUnvoted();\\n    /// @notice Throw if user tries to withdraw Metric from a question that is not in the review state.\\n    error QuestionNotInReview();\\n    /// @notice Throw if user tries to withdraw Metric from a claim that is not released.\\n    error ClaimNotReleased();\\n    /// @notice Throw if creator of question tries to unvote\\n    error CannotUnvoteOwnQuestion();\\n    /// @notice Throw if the same question is slashed twice.\\n    error AlreadySlashed();\\n    /// @notice Throw if address is equal to address(0).\\n    error InvalidAddress();\\n    /// @notice Throw if user tries to lock METRIC for a stage that does not require locking.\\n    error InvalidStage();\\n\\n    //------------------------------------------------------ STRUCTS\\n\\n    struct lockAttributes {\\n        address user;\\n        uint256 amount;\\n        STATUS status;\\n    }\\n\\n    //------------------------------------------------------ EVENTS\\n\\n    /// @notice Event emitted when Metric is withdrawn.\\n    event Withdraw(address indexed user, uint256 indexed amount);\\n    /// @notice Event emitted when a question is slashed.\\n    event Slashed(address indexed user, uint256 indexed questionId);\\n\\n    //------------------------------------------------------ CONSTRUCTOR\\n\\n    /**\\n     * @notice Constructor sets the question Metric token, QuestionStateController and the treasury.\\n     * @param metricTokenAddress The Metric token address\\n     * @param questionStateControllerAddress The QuestionStateController address.\\n     * @param treasuryAddress The treasury address.\\n     */\\n    constructor(\\n        address metricTokenAddress,\\n        address questionStateControllerAddress,\\n        address treasuryAddress\\n    ) {\\n        metric = IERC20(metricTokenAddress);\\n        questionStateController = IQuestionStateController(questionStateControllerAddress);\\n        treasury = treasuryAddress;\\n    }\\n\\n    //------------------------------------------------------ FUNCTIONS\\n\\n    /**\\n     * @notice Locks METRIC for creating a question\\n     * @param user The address of the user locking the METRIC\\n     * @param amount The amount of METRIC to lock\\n     * @param questionId The question id'\\n     * @param stage The stage for which METRIC is locked\\n     */\\n    function lockMetric(\\n        address user,\\n        uint256 amount,\\n        uint256 questionId,\\n        STAGE stage\\n    ) external onlyCostController {\\n        // Checks if METRIC is locked for a valid stage.\\n        if (uint8(stage) >= 5) revert InvalidStage();\\n        // Checks if there has not been a deposit yet\\n        if (lockedMetric[questionId][stage][user].status != STATUS.UNINT) revert QuestionHasInvalidStatus();\\n\\n        depositAccounting(user, amount, questionId, stage);\\n    }\\n\\n    /**\\n     * @notice Allows a user to withdraw METRIC locked for a question, after the question is published.\\n     * @param questionId The question id\\n     * @param stage The stage for which the user is withdrawing metric from a question.\\n     */\\n    function withdrawMetric(uint256 questionId, STAGE stage) external {\\n        // Checks if Metric is withdrawn for a valid stage.\\n        if (uint8(stage) >= 5) revert InvalidStage();\\n\\n        if (stage == STAGE.CREATE_AND_VOTE) {\\n            // Checks that the question is published\\n            if (questionStateController.getState(questionId) != STATE.PUBLISHED) revert QuestionNotPublished();\\n\\n            // Accounting & changes\\n            withdrawalAccounting(questionId, STAGE.CREATE_AND_VOTE);\\n        } else if (stage == STAGE.UNVOTE) {\\n            // Check that user has a voting index, has not voted and the question state is VOTING.\\n            if (_question.getAuthorOfQuestion(questionId) == _msgSender()) revert CannotUnvoteOwnQuestion();\\n            if (questionStateController.getHasUserVoted(_msgSender(), questionId) == true) revert UserHasNotUnvoted();\\n            if (questionStateController.getState(questionId) != STATE.VOTING) revert QuestionNotInVoting();\\n\\n            // Accounting & changes\\n            withdrawalAccounting(questionId, STAGE.CREATE_AND_VOTE);\\n\\n            lockedMetric[questionId][STAGE.CREATE_AND_VOTE][_msgSender()].status = STATUS.UNINT;\\n        } else if (stage == STAGE.CLAIM_AND_ANSWER) {\\n            if (questionStateController.getState(questionId) != STATE.COMPLETED) revert QuestionNotInReview();\\n\\n            withdrawalAccounting(questionId, STAGE.CLAIM_AND_ANSWER);\\n        } else if (stage == STAGE.RELEASE_CLAIM) {\\n            if (questionStateController.getState(questionId) != STATE.PUBLISHED) revert QuestionNotPublished();\\n            if (claimController.getQuestionClaimState(questionId, _msgSender()) != CLAIM_STATE.RELEASED) revert ClaimNotReleased();\\n\\n            withdrawalAccounting(questionId, STAGE.CLAIM_AND_ANSWER);\\n\\n            lockedMetric[questionId][STAGE.CLAIM_AND_ANSWER][_msgSender()].status = STATUS.UNINT;\\n        } else {\\n            // if (reviewPeriod == active) revert ReviewPeriodActive();\\n        }\\n    }\\n\\n    function depositAccounting(\\n        address user,\\n        uint256 amount,\\n        uint256 questionId,\\n        STAGE stage\\n    ) internal {\\n        // Accounting & changes\\n        lockedMetric[questionId][stage][user].user = user;\\n        lockedMetric[questionId][stage][user].amount += amount;\\n\\n        lockedMetricByQuestion[questionId] += amount;\\n\\n        lockedMetric[questionId][stage][user].status = STATUS.DEPOSITED;\\n\\n        totalLockedInVaults[user] += amount;\\n        depositsByWithdrawers[user].push(questionId);\\n\\n        // Transfers Metric from the user to the vault.\\n        metric.transferFrom(user, address(this), amount);\\n    }\\n\\n    function withdrawalAccounting(uint256 questionId, STAGE stage) internal {\\n        if (_msgSender() != lockedMetric[questionId][stage][_msgSender()].user) revert NotTheDepositor();\\n        if (lockedMetric[questionId][stage][_msgSender()].status != STATUS.DEPOSITED) revert NoMetricDeposited();\\n\\n        uint256 toWithdraw = lockedMetric[questionId][stage][_msgSender()].amount;\\n\\n        lockedMetric[questionId][stage][_msgSender()].status = STATUS.WITHDRAWN;\\n        lockedMetric[questionId][stage][_msgSender()].amount = 0;\\n\\n        lockedMetricByQuestion[questionId] -= toWithdraw;\\n        totalLockedInVaults[_msgSender()] -= toWithdraw;\\n\\n        // Transfers Metric from the vault to the user.\\n        metric.transfer(_msgSender(), toWithdraw);\\n\\n        emit Withdraw(_msgSender(), toWithdraw);\\n    }\\n\\n    /**\\n     * @notice Allows onlyOwner to slash a question -- halfing the METRIC locked for the question.\\n     * @param questionId The question id\\n     */\\n    // function slashMetric(uint256 questionId) external onlyOwner {\\n    //     // Check that the question has not been slashed yet.\\n    //     if (lockedMetric[questionId][0].status == STATUS.SLASHED) revert AlreadySlashed();\\n\\n    //     lockedMetric[questionId][0].status = STATUS.SLASHED;\\n\\n    //     // Send half of the Metric to the treasury\\n    //     metric.transfer(treasury, lockedMetricByQuestion[questionId] / 2);\\n\\n    //     // Return the other half of the Metric to the user\\n    //     metric.transfer(lockedMetric[questionId][0].user, lockedMetric[questionId][0].amount / 2);\\n\\n    //     emit Slashed(lockedMetric[questionId][0].user, questionId);\\n    // }\\n\\n    /**\\n     * @notice Gets the questions that a user has created.\\n     * @param user The address of the user.\\n     * @return The questions that the user has created.\\n     */\\n    function getVaultsByWithdrawer(address user) external view returns (uint256[] memory) {\\n        return depositsByWithdrawers[user];\\n    }\\n\\n    /**\\n     * @notice Gets the information about the vault attributes of a question.\\n     * @param questionId The question id.\\n     * @param stage The stage of the question.\\n     * @param user The address of the user.\\n     * @return A struct containing the attributes of the question (withdrawer, amount, status).\\n     */\\n    function getVaultById(\\n        uint256 questionId,\\n        STAGE stage,\\n        address user\\n    ) external view returns (lockAttributes memory) {\\n        return lockedMetric[questionId][stage][user];\\n    }\\n\\n    function getLockedMetricByQuestion(uint256 questionId) public view returns (uint256) {\\n        return lockedMetricByQuestion[questionId];\\n    }\\n\\n    function getUserFromProperties(\\n        uint256 questionId,\\n        STAGE stage,\\n        address user\\n    ) public view returns (address) {\\n        return lockedMetric[questionId][stage][user].user;\\n    }\\n\\n    function getAmountFromProperties(\\n        uint256 questionId,\\n        STAGE stage,\\n        address user\\n    ) public view returns (uint256) {\\n        return lockedMetric[questionId][stage][user].amount;\\n    }\\n\\n    function getLockedPerUser(address _user) public view returns (uint256) {\\n        return totalLockedInVaults[_user];\\n    }\\n\\n    /**\\n     * @notice Gets the total amount of Metric locked in the vault.\\n     * @return The total amount of Metric locked in the vault.\\n     */\\n    function getMetricTotalLockedBalance() external view returns (uint256) {\\n        return metric.balanceOf(address(this));\\n    }\\n\\n    //------------------------------------------------------ OWNER FUNCTIONS\\n\\n    /**\\n     * @notice Allows owner to update the QuestionStateController.\\n     */\\n    function setQuestionStateController(address _questionStateController) public onlyOwner {\\n        if (_questionStateController == address(0)) revert InvalidAddress();\\n        questionStateController = IQuestionStateController(_questionStateController);\\n    }\\n\\n    function setClaimController(address _claimController) public onlyOwner {\\n        if (_claimController == address(0)) revert InvalidAddress();\\n        claimController = IClaimController(_claimController);\\n    }\\n\\n    /**\\n     * @notice Allows owner to update the treasury address.\\n     */\\n    function setTreasury(address _treasury) public onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n    function setBountyQuestion(address _bountyQuestion) public onlyOwner {\\n        _question = BountyQuestion(_bountyQuestion);\\n    }\\n\\n    /**\\n     * @notice Allows owner to update the Metric token address.\\n     */\\n    function setMetric(address _metric) public onlyOwner {\\n        if (_metric == address(0)) revert InvalidAddress();\\n        metric = IERC20(_metric);\\n    }\\n}\\n\",\"keccak256\":\"0xb1f0b9a915ca38ce1d839ffee161daf98633819ae94017d4d5f965818926b2be\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IBountyQuestion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Structs/QuestionData.sol\\\";\\n\\ninterface IBountyQuestion {\\n    function getQuestionData(uint256 questionId) external view returns (QuestionData memory);\\n\\n    function getMostRecentQuestion() external view returns (uint256);\\n\\n    function updateState(uint256 questionId, STATE newState) external;\\n}\\n\",\"keccak256\":\"0x7fbcc765c545a0ab30f9e3ce66aee3616352f28076b56662de71a0e525448268\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IClaimController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Structs/AnswerStruct.sol\\\";\\n\\ninterface IClaimController {\\n    function initializeQuestion(uint256 questionId, uint256 claimLimit) external;\\n\\n    function claim(address user, uint256 questionId) external;\\n\\n    function releaseClaim(address user, uint256 questionId) external;\\n\\n    function answer(\\n        address user,\\n        uint256 questionId,\\n        string calldata answerURL\\n    ) external;\\n\\n    function getClaimDataForUser(uint256 questionId, address user) external view returns (Answer memory _answer);\\n\\n    function getQuestionClaimState(uint256 questionId, address user) external view returns (CLAIM_STATE claimState);\\n}\\n\",\"keccak256\":\"0xbda3cf7828fa61e227c75ad6d1a2758b33c328a094bf058013751b1a5370a68f\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IQuestionStateController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Enums/QuestionStateEnum.sol\\\";\\n\\ninterface IQuestionStateController {\\n    function initializeQuestion(uint256 questionId) external;\\n\\n    function voteFor(address _user, uint256 questionId) external;\\n\\n    function unvoteFor(address _user, uint256 questionId) external;\\n\\n    function publish(uint256 question) external;\\n\\n    function getState(uint256 quesitonId) external view returns (STATE currentState);\\n\\n    function getHasUserVoted(address user, uint256 questionId) external view returns (bool);\\n\\n    function setDisqualifiedState(uint256 questionId) external;\\n}\\n\",\"keccak256\":\"0x6dc6645a93ddc84005da520f6e1a0f9633a7dfc8cb58b56bcca268c796248558\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyCostController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyCostController is Ownable {\\n    address public costController;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the ActionCostController.\\n     * @param _newCostController The new address of the ActionCostController.\\n     */\\n    function setCostController(address _newCostController) external onlyOwner {\\n        costController = _newCostController;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyCostController() {\\n        if (_msgSender() != costController) revert NotTheCostController();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheCostController();\\n}\\n\",\"keccak256\":\"0x4c3f6b61445fe478b6b3248f1ac2a6f483111c1b0dd89c722c3351f1ece35a86\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyStateController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyStateController is Ownable {\\n    address public stateController;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the QuestionStateController.\\n     * @param _newStateController The new address of the QuestionStateController.\\n     */\\n    function setStateController(address _newStateController) external onlyOwner {\\n        stateController = _newStateController;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyStateController() {\\n        if (_msgSender() != stateController) revert NotTheStateController();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheStateController();\\n}\\n\",\"keccak256\":\"0x6a61c96a95b38f2fb05225b7550fb68556c5ac74e7f7a2714dff98992f107c8c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620034ef380380620034ef833981810160405281019062000037919062000259565b620000576200004b6200012360201b60201c565b6200012b60201b60201c565b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620002b5565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022182620001f4565b9050919050565b620002338162000214565b81146200023f57600080fd5b50565b600081519050620002538162000228565b92915050565b600080600060608486031215620002755762000274620001ef565b5b6000620002858682870162000242565b9350506020620002988682870162000242565b9250506040620002ab8682870162000242565b9150509250925092565b61322a80620002c56000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806377f72a01116100f9578063b548fcae11610097578063ec8f677711610071578063ec8f677714610531578063f0f442601461054d578063f0f6420114610569578063f2fde38b14610585576101c4565b8063b548fcae146104d7578063cb551976146104f5578063daddff3314610513576101c4565b80638da5cb5b116100d35780638da5cb5b1461043d57806396cec7f01461045b578063aa9ce2e61461048b578063b2cb2d6f146104bb576101c4565b806377f72a01146103bf5780638213d50b146103ef5780638ce586821461041f576101c4565b80634a94181f116101665780635adbf5ff116101405780635adbf5ff1461033757806361d027b314610367578063715018a61461038557806371546b811461038f576101c4565b80634a94181f146102cd57806355254819146102e95780635ab0161e14610305576101c4565b8063200d2ed2116101a2578063200d2ed214610233578063434047d9146102515780634341bde21461028157806347365f5c146102b1576101c4565b8063063e9e3a146101c957806311de9a6c146101f95780631919bcd614610217575b600080fd5b6101e360048036038101906101de9190612895565b6105a1565b6040516101f091906128d1565b60405180910390f35b6102016105b9565b60405161020e919061296b565b60405180910390f35b610231600480360381019061022c91906129c4565b6105df565b005b61023b61069f565b6040516102489190612a68565b60405180910390f35b61026b60048036038101906102669190612895565b6106b2565b60405161027891906128d1565b60405180910390f35b61029b60048036038101906102969190612aa8565b6106cf565b6040516102a89190612b6a565b60405180910390f35b6102cb60048036038101906102c691906129c4565b61080b565b005b6102e760048036038101906102e291906129c4565b610931565b005b61030360048036038101906102fe9190612b85565b6109f1565b005b61031f600480360381019061031a9190612aa8565b611377565b60405161032e93929190612bd4565b60405180910390f35b610351600480360381019061034c91906129c4565b6113e8565b60405161035e91906128d1565b60405180910390f35b61036f611400565b60405161037c9190612c0b565b60405180910390f35b61038d611426565b005b6103a960048036038101906103a491906129c4565b6114ae565b6040516103b69190612cd5565b60405180910390f35b6103d960048036038101906103d491906129c4565b611545565b6040516103e691906128d1565b60405180910390f35b61040960048036038101906104049190612aa8565b61158e565b6040516104169190612c0b565b60405180910390f35b610427611642565b60405161043491906128d1565b60405180910390f35b6104456116e5565b6040516104529190612c0b565b60405180910390f35b61047560048036038101906104709190612aa8565b61170e565b60405161048291906128d1565b60405180910390f35b6104a560048036038101906104a09190612cf7565b6117a2565b6040516104b291906128d1565b60405180910390f35b6104d560048036038101906104d09190612d37565b6117d3565b005b6104df6119b5565b6040516104ec9190612c0b565b60405180910390f35b6104fd6119db565b60405161050a9190612dbf565b60405180910390f35b61051b611a01565b6040516105289190612dfb565b60405180910390f35b61054b600480360381019061054691906129c4565b611a27565b005b610567600480360381019061056291906129c4565b611b4d565b005b610583600480360381019061057e91906129c4565b611c0d565b005b61059f600480360381019061059a91906129c4565b611d33565b005b60086020528060005260406000206000915090505481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105e7611e2a565b73ffffffffffffffffffffffffffffffffffffffff166106056116e5565b73ffffffffffffffffffffffffffffffffffffffff161461065b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065290612e73565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600560149054906101000a900460ff1681565b600060086000838152602001908152602001600020549050919050565b6106d7612811565b600a600085815260200190815260200160002060008460048111156106ff576106fe6129f1565b5b6004811115610711576107106129f1565b5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff1660038111156107ec576107eb6129f1565b5b60038111156107fe576107fd6129f1565b5b8152505090509392505050565b610813611e2a565b73ffffffffffffffffffffffffffffffffffffffff166108316116e5565b73ffffffffffffffffffffffffffffffffffffffff1614610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087e90612e73565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108ed576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610939611e2a565b73ffffffffffffffffffffffffffffffffffffffff166109576116e5565b73ffffffffffffffffffffffffffffffffffffffff16146109ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a490612e73565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6005816004811115610a0657610a056129f1565b5b60ff1610610a40576040517fe82a532900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006004811115610a5457610a536129f1565b5b816004811115610a6757610a666129f1565b5b03610b755760026004811115610a8057610a7f6129f1565b5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28846040518263ffffffff1660e01b8152600401610adb91906128d1565b602060405180830381865afa158015610af8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1c9190612eb8565b6004811115610b2e57610b2d6129f1565b5b14610b65576040517f9aded0d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b70826000611e32565b611373565b60016004811115610b8957610b886129f1565b5b816004811115610b9c57610b9b6129f1565b5b03610f4b57610ba9611e2a565b73ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663710bc3cd846040518263ffffffff1660e01b8152600401610c1a91906128d1565b602060405180830381865afa158015610c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5b9190612efa565b73ffffffffffffffffffffffffffffffffffffffff1603610ca8576040517fb75800ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e0a7e67610cf2611e2a565b856040518363ffffffff1660e01b8152600401610d10929190612f27565b602060405180830381865afa158015610d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d519190612f88565b151503610d8a576040517fad0aedd200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016004811115610d9e57610d9d6129f1565b5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28846040518263ffffffff1660e01b8152600401610df991906128d1565b602060405180830381865afa158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a9190612eb8565b6004811115610e4c57610e4b6129f1565b5b14610e83576040517ffbddb1d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e8e826000611e32565b6000600a60008481526020019081526020016000206000806004811115610eb857610eb76129f1565b5b6004811115610eca57610ec96129f1565b5b81526020019081526020016000206000610ee2611e2a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff02191690836003811115610f4157610f406129f1565b5b0217905550611372565b60026004811115610f5f57610f5e6129f1565b5b816004811115610f7257610f716129f1565b5b0361107f57600480811115610f8a57610f896129f1565b5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28846040518263ffffffff1660e01b8152600401610fe591906128d1565b602060405180830381865afa158015611002573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110269190612eb8565b6004811115611038576110376129f1565b5b1461106f576040517feb16fc3e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61107a826002611e32565b611371565b60036004811115611093576110926129f1565b5b8160048111156110a6576110a56129f1565b5b0361136f57600260048111156110bf576110be6129f1565b5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28846040518263ffffffff1660e01b815260040161111a91906128d1565b602060405180830381865afa158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115b9190612eb8565b600481111561116d5761116c6129f1565b5b146111a4576040517f9aded0d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260038111156111b8576111b76129f1565b5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b92e274a846111ff611e2a565b6040518363ffffffff1660e01b815260040161121c929190612fb5565b602060405180830381865afa158015611239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125d9190613003565b600381111561126f5761126e6129f1565b5b146112a6576040517f3bc914d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112b1826002611e32565b6000600a60008481526020019081526020016000206000600260048111156112dc576112db6129f1565b5b60048111156112ee576112ed6129f1565b5b81526020019081526020016000206000611306611e2a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff02191690836003811115611365576113646129f1565b5b0217905550611370565b5b5b5b5b5050565b600a60205282600052604060002060205281600052604060002060205280600052604060002060009250925050508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16905083565b60096020528060005260406000206000915090505481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61142e611e2a565b73ffffffffffffffffffffffffffffffffffffffff1661144c6116e5565b73ffffffffffffffffffffffffffffffffffffffff16146114a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149990612e73565b60405180910390fd5b6114ac60006123a7565b565b6060600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561153957602002820191906000526020600020905b815481526020019060010190808311611525575b50505050509050919050565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600a600085815260200190815260200160002060008460048111156115b8576115b76129f1565b5b60048111156115ca576115c96129f1565b5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690509392505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161169f9190612c0b565b602060405180830381865afa1580156116bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e09190613045565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600a60008581526020019081526020016000206000846004811115611738576117376129f1565b5b600481111561174a576117496129f1565b5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490509392505050565b600760205281600052604060002081815481106117be57600080fd5b90600052602060002001600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611814611e2a565b73ffffffffffffffffffffffffffffffffffffffff1614611861576040517f1ac379d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6005816004811115611876576118756129f1565b5b60ff16106118b0576040517fe82a532900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060038111156118c4576118c36129f1565b5b600a600084815260200190815260200160002060008360048111156118ec576118eb6129f1565b5b60048111156118fe576118fd6129f1565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16600381111561196c5761196b6129f1565b5b146119a3576040517fbe9ad66900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6119af8484848461246b565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611a2f611e2a565b73ffffffffffffffffffffffffffffffffffffffff16611a4d6116e5565b73ffffffffffffffffffffffffffffffffffffffff1614611aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9a90612e73565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b09576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611b55611e2a565b73ffffffffffffffffffffffffffffffffffffffff16611b736116e5565b73ffffffffffffffffffffffffffffffffffffffff1614611bc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc090612e73565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611c15611e2a565b73ffffffffffffffffffffffffffffffffffffffff16611c336116e5565b73ffffffffffffffffffffffffffffffffffffffff1614611c89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8090612e73565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611cef576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611d3b611e2a565b73ffffffffffffffffffffffffffffffffffffffff16611d596116e5565b73ffffffffffffffffffffffffffffffffffffffff1614611daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da690612e73565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611e1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e15906130e4565b60405180910390fd5b611e27816123a7565b50565b600033905090565b600a60008381526020019081526020016000206000826004811115611e5a57611e596129f1565b5b6004811115611e6c57611e6b6129f1565b5b81526020019081526020016000206000611e84611e2a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611f00611e2a565b73ffffffffffffffffffffffffffffffffffffffff1614611f4d576040517f7ff62b7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016003811115611f6157611f606129f1565b5b600a60008481526020019081526020016000206000836004811115611f8957611f886129f1565b5b6004811115611f9b57611f9a6129f1565b5b81526020019081526020016000206000611fb3611e2a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1660038111156120105761200f6129f1565b5b14612047576040517f7109e46600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a60008481526020019081526020016000206000836004811115612071576120706129f1565b5b6004811115612083576120826129f1565b5b8152602001908152602001600020600061209b611e2a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506002600a60008581526020019081526020016000206000846004811115612105576121046129f1565b5b6004811115612117576121166129f1565b5b8152602001908152602001600020600061212f611e2a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff0219169083600381111561218e5761218d6129f1565b5b02179055506000600a600085815260200190815260200160002060008460048111156121bd576121bc6129f1565b5b60048111156121cf576121ce6129f1565b5b815260200190815260200160002060006121e7611e2a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508060086000858152602001908152602001600020600082825461224b9190613133565b92505081905550806009600061225f611e2a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122a89190613133565b92505081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6122f5611e2a565b836040518363ffffffff1660e01b8152600401612313929190612f27565b6020604051808303816000875af1158015612332573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123569190612f88565b5080612360611e2a565b73ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436460405160405180910390a3505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b83600a60008481526020019081526020016000206000836004811115612494576124936129f1565b5b60048111156124a6576124a56129f1565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600a6000848152602001908152602001600020600083600481111561255b5761255a6129f1565b5b600481111561256d5761256c6129f1565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546125ca9190613167565b92505081905550826008600084815260200190815260200160002060008282546125f49190613167565b925050819055506001600a60008481526020019081526020016000206000836004811115612625576126246129f1565b5b6004811115612637576126366129f1565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908360038111156126a7576126a66129f1565b5b021790555082600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126fb9190613167565b92505081905550600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8530866040518463ffffffff1660e01b81526004016127c7939291906131bd565b6020604051808303816000875af11580156127e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280a9190612f88565b5050505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160006003811115612854576128536129f1565b5b81525090565b600080fd5b6000819050919050565b6128728161285f565b811461287d57600080fd5b50565b60008135905061288f81612869565b92915050565b6000602082840312156128ab576128aa61285a565b5b60006128b984828501612880565b91505092915050565b6128cb8161285f565b82525050565b60006020820190506128e660008301846128c2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061293161292c612927846128ec565b61290c565b6128ec565b9050919050565b600061294382612916565b9050919050565b600061295582612938565b9050919050565b6129658161294a565b82525050565b6000602082019050612980600083018461295c565b92915050565b6000612991826128ec565b9050919050565b6129a181612986565b81146129ac57600080fd5b50565b6000813590506129be81612998565b92915050565b6000602082840312156129da576129d961285a565b5b60006129e8848285016129af565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110612a3157612a306129f1565b5b50565b6000819050612a4282612a20565b919050565b6000612a5282612a34565b9050919050565b612a6281612a47565b82525050565b6000602082019050612a7d6000830184612a59565b92915050565b60058110612a9057600080fd5b50565b600081359050612aa281612a83565b92915050565b600080600060608486031215612ac157612ac061285a565b5b6000612acf86828701612880565b9350506020612ae086828701612a93565b9250506040612af1868287016129af565b9150509250925092565b612b0481612986565b82525050565b612b138161285f565b82525050565b612b2281612a47565b82525050565b606082016000820151612b3e6000850182612afb565b506020820151612b516020850182612b0a565b506040820151612b646040850182612b19565b50505050565b6000606082019050612b7f6000830184612b28565b92915050565b60008060408385031215612b9c57612b9b61285a565b5b6000612baa85828601612880565b9250506020612bbb85828601612a93565b9150509250929050565b612bce81612986565b82525050565b6000606082019050612be96000830186612bc5565b612bf660208301856128c2565b612c036040830184612a59565b949350505050565b6000602082019050612c206000830184612bc5565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612c5e8383612b0a565b60208301905092915050565b6000602082019050919050565b6000612c8282612c26565b612c8c8185612c31565b9350612c9783612c42565b8060005b83811015612cc8578151612caf8882612c52565b9750612cba83612c6a565b925050600181019050612c9b565b5085935050505092915050565b60006020820190508181036000830152612cef8184612c77565b905092915050565b60008060408385031215612d0e57612d0d61285a565b5b6000612d1c858286016129af565b9250506020612d2d85828601612880565b9150509250929050565b60008060008060808587031215612d5157612d5061285a565b5b6000612d5f878288016129af565b9450506020612d7087828801612880565b9350506040612d8187828801612880565b9250506060612d9287828801612a93565b91505092959194509250565b6000612da982612938565b9050919050565b612db981612d9e565b82525050565b6000602082019050612dd46000830184612db0565b92915050565b6000612de582612938565b9050919050565b612df581612dda565b82525050565b6000602082019050612e106000830184612dec565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612e5d602083612e16565b9150612e6882612e27565b602082019050919050565b60006020820190508181036000830152612e8c81612e50565b9050919050565b60058110612ea057600080fd5b50565b600081519050612eb281612e93565b92915050565b600060208284031215612ece57612ecd61285a565b5b6000612edc84828501612ea3565b91505092915050565b600081519050612ef481612998565b92915050565b600060208284031215612f1057612f0f61285a565b5b6000612f1e84828501612ee5565b91505092915050565b6000604082019050612f3c6000830185612bc5565b612f4960208301846128c2565b9392505050565b60008115159050919050565b612f6581612f50565b8114612f7057600080fd5b50565b600081519050612f8281612f5c565b92915050565b600060208284031215612f9e57612f9d61285a565b5b6000612fac84828501612f73565b91505092915050565b6000604082019050612fca60008301856128c2565b612fd76020830184612bc5565b9392505050565b60048110612feb57600080fd5b50565b600081519050612ffd81612fde565b92915050565b6000602082840312156130195761301861285a565b5b600061302784828501612fee565b91505092915050565b60008151905061303f81612869565b92915050565b60006020828403121561305b5761305a61285a565b5b600061306984828501613030565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006130ce602683612e16565b91506130d982613072565b604082019050919050565b600060208201905081810360008301526130fd816130c1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061313e8261285f565b91506131498361285f565b92508282101561315c5761315b613104565b5b828203905092915050565b60006131728261285f565b915061317d8361285f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156131b2576131b1613104565b5b828201905092915050565b60006060820190506131d26000830186612bc5565b6131df6020830185612bc5565b6131ec60408301846128c2565b94935050505056fea2646970667358221220185daf55cd82c21c748d5bad926a3736170484f3960ec33ef3f7a8334d0fdde864736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c806377f72a01116100f9578063b548fcae11610097578063ec8f677711610071578063ec8f677714610531578063f0f442601461054d578063f0f6420114610569578063f2fde38b14610585576101c4565b8063b548fcae146104d7578063cb551976146104f5578063daddff3314610513576101c4565b80638da5cb5b116100d35780638da5cb5b1461043d57806396cec7f01461045b578063aa9ce2e61461048b578063b2cb2d6f146104bb576101c4565b806377f72a01146103bf5780638213d50b146103ef5780638ce586821461041f576101c4565b80634a94181f116101665780635adbf5ff116101405780635adbf5ff1461033757806361d027b314610367578063715018a61461038557806371546b811461038f576101c4565b80634a94181f146102cd57806355254819146102e95780635ab0161e14610305576101c4565b8063200d2ed2116101a2578063200d2ed214610233578063434047d9146102515780634341bde21461028157806347365f5c146102b1576101c4565b8063063e9e3a146101c957806311de9a6c146101f95780631919bcd614610217575b600080fd5b6101e360048036038101906101de9190612895565b6105a1565b6040516101f091906128d1565b60405180910390f35b6102016105b9565b60405161020e919061296b565b60405180910390f35b610231600480360381019061022c91906129c4565b6105df565b005b61023b61069f565b6040516102489190612a68565b60405180910390f35b61026b60048036038101906102669190612895565b6106b2565b60405161027891906128d1565b60405180910390f35b61029b60048036038101906102969190612aa8565b6106cf565b6040516102a89190612b6a565b60405180910390f35b6102cb60048036038101906102c691906129c4565b61080b565b005b6102e760048036038101906102e291906129c4565b610931565b005b61030360048036038101906102fe9190612b85565b6109f1565b005b61031f600480360381019061031a9190612aa8565b611377565b60405161032e93929190612bd4565b60405180910390f35b610351600480360381019061034c91906129c4565b6113e8565b60405161035e91906128d1565b60405180910390f35b61036f611400565b60405161037c9190612c0b565b60405180910390f35b61038d611426565b005b6103a960048036038101906103a491906129c4565b6114ae565b6040516103b69190612cd5565b60405180910390f35b6103d960048036038101906103d491906129c4565b611545565b6040516103e691906128d1565b60405180910390f35b61040960048036038101906104049190612aa8565b61158e565b6040516104169190612c0b565b60405180910390f35b610427611642565b60405161043491906128d1565b60405180910390f35b6104456116e5565b6040516104529190612c0b565b60405180910390f35b61047560048036038101906104709190612aa8565b61170e565b60405161048291906128d1565b60405180910390f35b6104a560048036038101906104a09190612cf7565b6117a2565b6040516104b291906128d1565b60405180910390f35b6104d560048036038101906104d09190612d37565b6117d3565b005b6104df6119b5565b6040516104ec9190612c0b565b60405180910390f35b6104fd6119db565b60405161050a9190612dbf565b60405180910390f35b61051b611a01565b6040516105289190612dfb565b60405180910390f35b61054b600480360381019061054691906129c4565b611a27565b005b610567600480360381019061056291906129c4565b611b4d565b005b610583600480360381019061057e91906129c4565b611c0d565b005b61059f600480360381019061059a91906129c4565b611d33565b005b60086020528060005260406000206000915090505481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105e7611e2a565b73ffffffffffffffffffffffffffffffffffffffff166106056116e5565b73ffffffffffffffffffffffffffffffffffffffff161461065b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065290612e73565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600560149054906101000a900460ff1681565b600060086000838152602001908152602001600020549050919050565b6106d7612811565b600a600085815260200190815260200160002060008460048111156106ff576106fe6129f1565b5b6004811115610711576107106129f1565b5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff1660038111156107ec576107eb6129f1565b5b60038111156107fe576107fd6129f1565b5b8152505090509392505050565b610813611e2a565b73ffffffffffffffffffffffffffffffffffffffff166108316116e5565b73ffffffffffffffffffffffffffffffffffffffff1614610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087e90612e73565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108ed576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610939611e2a565b73ffffffffffffffffffffffffffffffffffffffff166109576116e5565b73ffffffffffffffffffffffffffffffffffffffff16146109ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a490612e73565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6005816004811115610a0657610a056129f1565b5b60ff1610610a40576040517fe82a532900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006004811115610a5457610a536129f1565b5b816004811115610a6757610a666129f1565b5b03610b755760026004811115610a8057610a7f6129f1565b5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28846040518263ffffffff1660e01b8152600401610adb91906128d1565b602060405180830381865afa158015610af8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1c9190612eb8565b6004811115610b2e57610b2d6129f1565b5b14610b65576040517f9aded0d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b70826000611e32565b611373565b60016004811115610b8957610b886129f1565b5b816004811115610b9c57610b9b6129f1565b5b03610f4b57610ba9611e2a565b73ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663710bc3cd846040518263ffffffff1660e01b8152600401610c1a91906128d1565b602060405180830381865afa158015610c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5b9190612efa565b73ffffffffffffffffffffffffffffffffffffffff1603610ca8576040517fb75800ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60011515600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e0a7e67610cf2611e2a565b856040518363ffffffff1660e01b8152600401610d10929190612f27565b602060405180830381865afa158015610d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d519190612f88565b151503610d8a576040517fad0aedd200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016004811115610d9e57610d9d6129f1565b5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28846040518263ffffffff1660e01b8152600401610df991906128d1565b602060405180830381865afa158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a9190612eb8565b6004811115610e4c57610e4b6129f1565b5b14610e83576040517ffbddb1d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e8e826000611e32565b6000600a60008481526020019081526020016000206000806004811115610eb857610eb76129f1565b5b6004811115610eca57610ec96129f1565b5b81526020019081526020016000206000610ee2611e2a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff02191690836003811115610f4157610f406129f1565b5b0217905550611372565b60026004811115610f5f57610f5e6129f1565b5b816004811115610f7257610f716129f1565b5b0361107f57600480811115610f8a57610f896129f1565b5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28846040518263ffffffff1660e01b8152600401610fe591906128d1565b602060405180830381865afa158015611002573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110269190612eb8565b6004811115611038576110376129f1565b5b1461106f576040517feb16fc3e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61107a826002611e32565b611371565b60036004811115611093576110926129f1565b5b8160048111156110a6576110a56129f1565b5b0361136f57600260048111156110bf576110be6129f1565b5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344c9af28846040518263ffffffff1660e01b815260040161111a91906128d1565b602060405180830381865afa158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115b9190612eb8565b600481111561116d5761116c6129f1565b5b146111a4576040517f9aded0d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260038111156111b8576111b76129f1565b5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b92e274a846111ff611e2a565b6040518363ffffffff1660e01b815260040161121c929190612fb5565b602060405180830381865afa158015611239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125d9190613003565b600381111561126f5761126e6129f1565b5b146112a6576040517f3bc914d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112b1826002611e32565b6000600a60008481526020019081526020016000206000600260048111156112dc576112db6129f1565b5b60048111156112ee576112ed6129f1565b5b81526020019081526020016000206000611306611e2a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff02191690836003811115611365576113646129f1565b5b0217905550611370565b5b5b5b5b5050565b600a60205282600052604060002060205281600052604060002060205280600052604060002060009250925050508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16905083565b60096020528060005260406000206000915090505481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61142e611e2a565b73ffffffffffffffffffffffffffffffffffffffff1661144c6116e5565b73ffffffffffffffffffffffffffffffffffffffff16146114a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149990612e73565b60405180910390fd5b6114ac60006123a7565b565b6060600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561153957602002820191906000526020600020905b815481526020019060010190808311611525575b50505050509050919050565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600a600085815260200190815260200160002060008460048111156115b8576115b76129f1565b5b60048111156115ca576115c96129f1565b5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690509392505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161169f9190612c0b565b602060405180830381865afa1580156116bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e09190613045565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600a60008581526020019081526020016000206000846004811115611738576117376129f1565b5b600481111561174a576117496129f1565b5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490509392505050565b600760205281600052604060002081815481106117be57600080fd5b90600052602060002001600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611814611e2a565b73ffffffffffffffffffffffffffffffffffffffff1614611861576040517f1ac379d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6005816004811115611876576118756129f1565b5b60ff16106118b0576040517fe82a532900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060038111156118c4576118c36129f1565b5b600a600084815260200190815260200160002060008360048111156118ec576118eb6129f1565b5b60048111156118fe576118fd6129f1565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16600381111561196c5761196b6129f1565b5b146119a3576040517fbe9ad66900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6119af8484848461246b565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611a2f611e2a565b73ffffffffffffffffffffffffffffffffffffffff16611a4d6116e5565b73ffffffffffffffffffffffffffffffffffffffff1614611aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9a90612e73565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b09576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611b55611e2a565b73ffffffffffffffffffffffffffffffffffffffff16611b736116e5565b73ffffffffffffffffffffffffffffffffffffffff1614611bc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc090612e73565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611c15611e2a565b73ffffffffffffffffffffffffffffffffffffffff16611c336116e5565b73ffffffffffffffffffffffffffffffffffffffff1614611c89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8090612e73565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611cef576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611d3b611e2a565b73ffffffffffffffffffffffffffffffffffffffff16611d596116e5565b73ffffffffffffffffffffffffffffffffffffffff1614611daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da690612e73565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611e1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e15906130e4565b60405180910390fd5b611e27816123a7565b50565b600033905090565b600a60008381526020019081526020016000206000826004811115611e5a57611e596129f1565b5b6004811115611e6c57611e6b6129f1565b5b81526020019081526020016000206000611e84611e2a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611f00611e2a565b73ffffffffffffffffffffffffffffffffffffffff1614611f4d576040517f7ff62b7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016003811115611f6157611f606129f1565b5b600a60008481526020019081526020016000206000836004811115611f8957611f886129f1565b5b6004811115611f9b57611f9a6129f1565b5b81526020019081526020016000206000611fb3611e2a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1660038111156120105761200f6129f1565b5b14612047576040517f7109e46600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a60008481526020019081526020016000206000836004811115612071576120706129f1565b5b6004811115612083576120826129f1565b5b8152602001908152602001600020600061209b611e2a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506002600a60008581526020019081526020016000206000846004811115612105576121046129f1565b5b6004811115612117576121166129f1565b5b8152602001908152602001600020600061212f611e2a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff0219169083600381111561218e5761218d6129f1565b5b02179055506000600a600085815260200190815260200160002060008460048111156121bd576121bc6129f1565b5b60048111156121cf576121ce6129f1565b5b815260200190815260200160002060006121e7611e2a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508060086000858152602001908152602001600020600082825461224b9190613133565b92505081905550806009600061225f611e2a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122a89190613133565b92505081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6122f5611e2a565b836040518363ffffffff1660e01b8152600401612313929190612f27565b6020604051808303816000875af1158015612332573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123569190612f88565b5080612360611e2a565b73ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436460405160405180910390a3505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b83600a60008481526020019081526020016000206000836004811115612494576124936129f1565b5b60048111156124a6576124a56129f1565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600a6000848152602001908152602001600020600083600481111561255b5761255a6129f1565b5b600481111561256d5761256c6129f1565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546125ca9190613167565b92505081905550826008600084815260200190815260200160002060008282546125f49190613167565b925050819055506001600a60008481526020019081526020016000206000836004811115612625576126246129f1565b5b6004811115612637576126366129f1565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff021916908360038111156126a7576126a66129f1565b5b021790555082600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126fb9190613167565b92505081905550600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8530866040518463ffffffff1660e01b81526004016127c7939291906131bd565b6020604051808303816000875af11580156127e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280a9190612f88565b5050505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160006003811115612854576128536129f1565b5b81525090565b600080fd5b6000819050919050565b6128728161285f565b811461287d57600080fd5b50565b60008135905061288f81612869565b92915050565b6000602082840312156128ab576128aa61285a565b5b60006128b984828501612880565b91505092915050565b6128cb8161285f565b82525050565b60006020820190506128e660008301846128c2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061293161292c612927846128ec565b61290c565b6128ec565b9050919050565b600061294382612916565b9050919050565b600061295582612938565b9050919050565b6129658161294a565b82525050565b6000602082019050612980600083018461295c565b92915050565b6000612991826128ec565b9050919050565b6129a181612986565b81146129ac57600080fd5b50565b6000813590506129be81612998565b92915050565b6000602082840312156129da576129d961285a565b5b60006129e8848285016129af565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110612a3157612a306129f1565b5b50565b6000819050612a4282612a20565b919050565b6000612a5282612a34565b9050919050565b612a6281612a47565b82525050565b6000602082019050612a7d6000830184612a59565b92915050565b60058110612a9057600080fd5b50565b600081359050612aa281612a83565b92915050565b600080600060608486031215612ac157612ac061285a565b5b6000612acf86828701612880565b9350506020612ae086828701612a93565b9250506040612af1868287016129af565b9150509250925092565b612b0481612986565b82525050565b612b138161285f565b82525050565b612b2281612a47565b82525050565b606082016000820151612b3e6000850182612afb565b506020820151612b516020850182612b0a565b506040820151612b646040850182612b19565b50505050565b6000606082019050612b7f6000830184612b28565b92915050565b60008060408385031215612b9c57612b9b61285a565b5b6000612baa85828601612880565b9250506020612bbb85828601612a93565b9150509250929050565b612bce81612986565b82525050565b6000606082019050612be96000830186612bc5565b612bf660208301856128c2565b612c036040830184612a59565b949350505050565b6000602082019050612c206000830184612bc5565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612c5e8383612b0a565b60208301905092915050565b6000602082019050919050565b6000612c8282612c26565b612c8c8185612c31565b9350612c9783612c42565b8060005b83811015612cc8578151612caf8882612c52565b9750612cba83612c6a565b925050600181019050612c9b565b5085935050505092915050565b60006020820190508181036000830152612cef8184612c77565b905092915050565b60008060408385031215612d0e57612d0d61285a565b5b6000612d1c858286016129af565b9250506020612d2d85828601612880565b9150509250929050565b60008060008060808587031215612d5157612d5061285a565b5b6000612d5f878288016129af565b9450506020612d7087828801612880565b9350506040612d8187828801612880565b9250506060612d9287828801612a93565b91505092959194509250565b6000612da982612938565b9050919050565b612db981612d9e565b82525050565b6000602082019050612dd46000830184612db0565b92915050565b6000612de582612938565b9050919050565b612df581612dda565b82525050565b6000602082019050612e106000830184612dec565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612e5d602083612e16565b9150612e6882612e27565b602082019050919050565b60006020820190508181036000830152612e8c81612e50565b9050919050565b60058110612ea057600080fd5b50565b600081519050612eb281612e93565b92915050565b600060208284031215612ece57612ecd61285a565b5b6000612edc84828501612ea3565b91505092915050565b600081519050612ef481612998565b92915050565b600060208284031215612f1057612f0f61285a565b5b6000612f1e84828501612ee5565b91505092915050565b6000604082019050612f3c6000830185612bc5565b612f4960208301846128c2565b9392505050565b60008115159050919050565b612f6581612f50565b8114612f7057600080fd5b50565b600081519050612f8281612f5c565b92915050565b600060208284031215612f9e57612f9d61285a565b5b6000612fac84828501612f73565b91505092915050565b6000604082019050612fca60008301856128c2565b612fd76020830184612bc5565b9392505050565b60048110612feb57600080fd5b50565b600081519050612ffd81612fde565b92915050565b6000602082840312156130195761301861285a565b5b600061302784828501612fee565b91505092915050565b60008151905061303f81612869565b92915050565b60006020828403121561305b5761305a61285a565b5b600061306984828501613030565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006130ce602683612e16565b91506130d982613072565b604082019050919050565b600060208201905081810360008301526130fd816130c1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061313e8261285f565b91506131498361285f565b92508282101561315c5761315b613104565b5b828203905092915050565b60006131728261285f565b915061317d8361285f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156131b2576131b1613104565b5b828201905092915050565b60006060820190506131d26000830186612bc5565b6131df6020830185612bc5565b6131ec60408301846128c2565b94935050505056fea2646970667358221220185daf55cd82c21c748d5bad926a3736170484f3960ec33ef3f7a8334d0fdde864736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "metricTokenAddress": "The Metric token address",
          "questionStateControllerAddress": "The QuestionStateController address.",
          "treasuryAddress": "The treasury address."
        }
      },
      "getMetricTotalLockedBalance()": {
        "returns": {
          "_0": "The total amount of Metric locked in the vault."
        }
      },
      "getVaultById(uint256,uint8,address)": {
        "params": {
          "questionId": "The question id.",
          "stage": "The stage of the question.",
          "user": "The address of the user."
        },
        "returns": {
          "_0": "A struct containing the attributes of the question (withdrawer, amount, status)."
        }
      },
      "getVaultsByWithdrawer(address)": {
        "params": {
          "user": "The address of the user."
        },
        "returns": {
          "_0": "The questions that the user has created."
        }
      },
      "lockMetric(address,uint256,uint256,uint8)": {
        "params": {
          "amount": "The amount of METRIC to lock",
          "questionId": "The question id'",
          "stage": "The stage for which METRIC is locked",
          "user": "The address of the user locking the METRIC"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCostController(address)": {
        "params": {
          "_newCostController": "The new address of the ActionCostController."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawMetric(uint256,uint8)": {
        "params": {
          "questionId": "The question id",
          "stage": "The stage for which the user is withdrawing metric from a question."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AlreadySlashed()": [
        {
          "notice": "Throw if the same question is slashed twice."
        }
      ],
      "CannotUnvoteOwnQuestion()": [
        {
          "notice": "Throw if creator of question tries to unvote"
        }
      ],
      "ClaimNotReleased()": [
        {
          "notice": "Throw if user tries to withdraw Metric from a claim that is not released."
        }
      ],
      "InvalidAddress()": [
        {
          "notice": "Throw if address is equal to address(0)."
        }
      ],
      "InvalidStage()": [
        {
          "notice": "Throw if user tries to lock METRIC for a stage that does not require locking."
        }
      ],
      "NoMetricDeposited()": [
        {
          "notice": "Throw if user tries to withdraw Metric without having first deposited."
        }
      ],
      "NotTheDepositor()": [
        {
          "notice": "Throw if user tries to withdraw Metric from a question it does not own."
        }
      ],
      "QuestionHasInvalidStatus()": [
        {
          "notice": "Throw if user tries to lock Metric for a question that has a different state than UNINT."
        }
      ],
      "QuestionNotInReview()": [
        {
          "notice": "Throw if user tries to withdraw Metric from a question that is not in the review state."
        }
      ],
      "QuestionNotInVoting()": [
        {
          "notice": "Throw if user tries to claim Metric for unvoting on a question that is not in the VOTING state."
        }
      ],
      "QuestionNotPublished()": [
        {
          "notice": "Throw if user tries to claim Metric for a question that has not been published (yet)."
        }
      ],
      "UserHasNotUnvoted()": [
        {
          "notice": "Throw if user tries to claim Metric for a question that was not unvoted"
        }
      ]
    },
    "events": {
      "Slashed(address,uint256)": {
        "notice": "Event emitted when a question is slashed."
      },
      "Withdraw(address,uint256)": {
        "notice": "Event emitted when Metric is withdrawn."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor sets the question Metric token, QuestionStateController and the treasury."
      },
      "depositsByWithdrawers(address,uint256)": {
        "notice": "Keeps track of the quantity of deposits per user."
      },
      "getMetricTotalLockedBalance()": {
        "notice": "Gets the total amount of Metric locked in the vault."
      },
      "getVaultById(uint256,uint8,address)": {
        "notice": "Gets the information about the vault attributes of a question."
      },
      "getVaultsByWithdrawer(address)": {
        "notice": "Gets the questions that a user has created."
      },
      "lockMetric(address,uint256,uint256,uint8)": {
        "notice": "Locks METRIC for creating a question"
      },
      "lockedMetric(uint256,uint8,address)": {
        "notice": "Keeps track of the quantity of withdrawals per user."
      },
      "lockedMetricByQuestion(uint256)": {
        "notice": "Keeps track of the amount of METRIC locked per question"
      },
      "setCostController(address)": {
        "notice": "Sets the address of the ActionCostController."
      },
      "setMetric(address)": {
        "notice": "Allows owner to update the Metric token address."
      },
      "setQuestionStateController(address)": {
        "notice": "Allows owner to update the QuestionStateController."
      },
      "setTreasury(address)": {
        "notice": "Allows owner to update the treasury address."
      },
      "totalLockedInVaults(address)": {
        "notice": "Keeps track of total amount in vault for a given user."
      },
      "treasury()": {
        "notice": "Address to the MetricsDAO treasury."
      },
      "withdrawMetric(uint256,uint8)": {
        "notice": "Allows a user to withdraw METRIC locked for a question, after the question is published."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3630,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "costController",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2581,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "metric",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)773"
      },
      {
        "astId": 2584,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "questionStateController",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IQuestionStateController)3488"
      },
      {
        "astId": 2587,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "claimController",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IClaimController)3438"
      },
      {
        "astId": 2590,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "_question",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(BountyQuestion)1419"
      },
      {
        "astId": 2593,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "status",
        "offset": 20,
        "slot": "5",
        "type": "t_enum(STATUS)1453"
      },
      {
        "astId": 2596,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "treasury",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2602,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "depositsByWithdrawers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 2607,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "lockedMetricByQuestion",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2612,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "totalLockedInVaults",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2623,
        "contract": "src/contracts/Protocol/Vault.sol:Vault",
        "label": "lockedMetric",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(STAGE)1448,t_mapping(t_address,t_struct(lockAttributes)2667_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(BountyQuestion)1419": {
        "encoding": "inplace",
        "label": "contract BountyQuestion",
        "numberOfBytes": "20"
      },
      "t_contract(IClaimController)3438": {
        "encoding": "inplace",
        "label": "contract IClaimController",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)773": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IQuestionStateController)3488": {
        "encoding": "inplace",
        "label": "contract IQuestionStateController",
        "numberOfBytes": "20"
      },
      "t_enum(STAGE)1448": {
        "encoding": "inplace",
        "label": "enum STAGE",
        "numberOfBytes": "1"
      },
      "t_enum(STATUS)1453": {
        "encoding": "inplace",
        "label": "enum STATUS",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_struct(lockAttributes)2667_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.lockAttributes)",
        "numberOfBytes": "32",
        "value": "t_struct(lockAttributes)2667_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(STAGE)1448,t_mapping(t_address,t_struct(lockAttributes)2667_storage))": {
        "encoding": "mapping",
        "key": "t_enum(STAGE)1448",
        "label": "mapping(enum STAGE => mapping(address => struct Vault.lockAttributes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(lockAttributes)2667_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(STAGE)1448,t_mapping(t_address,t_struct(lockAttributes)2667_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum STAGE => mapping(address => struct Vault.lockAttributes)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(STAGE)1448,t_mapping(t_address,t_struct(lockAttributes)2667_storage))"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(lockAttributes)2667_storage": {
        "encoding": "inplace",
        "label": "struct Vault.lockAttributes",
        "members": [
          {
            "astId": 2661,
            "contract": "src/contracts/Protocol/Vault.sol:Vault",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2663,
            "contract": "src/contracts/Protocol/Vault.sol:Vault",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2666,
            "contract": "src/contracts/Protocol/Vault.sol:Vault",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(STATUS)1453"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}