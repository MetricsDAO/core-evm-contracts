{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimLimitReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeedClaimToAnswer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoClaimToRelease",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheApi",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "answerURL",
          "type": "string"
        }
      ],
      "name": "answer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "answers",
      "outputs": [
        {
          "internalType": "enum CLAIM_STATE",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "answerURL",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "finalGrade",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "scoringMetaDataURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claims",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getClaimDataForUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum CLAIM_STATE",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "answerURL",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "finalGrade",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "scoringMetaDataURI",
              "type": "string"
            }
          ],
          "internalType": "struct Answer",
          "name": "_answer",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getClaimLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "getClaims",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_claims",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getQuestionClaimState",
      "outputs": [
        {
          "internalType": "enum CLAIM_STATE",
          "name": "claimState",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimLimit",
          "type": "uint256"
        }
      ],
      "name": "initializeQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionApi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        }
      ],
      "name": "releaseClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newApi",
          "type": "address"
        }
      ],
      "name": "setQuestionApi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x22ce72bfa5b6b9bbe3f3d3f23c636de0a4c213e07d0976e1c2a76fb8e384eabd",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "1766286",
    "logsBloom": "0x
    "blockHash": "0xb18da9d2f7df710a2a1fbfa9ef7a640558b6d7322d7e7b5ac0e92969d5c5fce8",
    "transactionHash": "0x22ce72bfa5b6b9bbe3f3d3f23c636de0a4c213e07d0976e1c2a76fb8e384eabd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11,
        "transactionHash": "0x22ce72bfa5b6b9bbe3f3d3f23c636de0a4c213e07d0976e1c2a76fb8e384eabd",
        "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb18da9d2f7df710a2a1fbfa9ef7a640558b6d7322d7e7b5ac0e92969d5c5fce8"
      }
    ],
    "blockNumber": 11,
    "cumulativeGasUsed": "1766286",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "287f6c3732ce0c40e91a2add091a5090",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimLimitReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeedClaimToAnswer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoClaimToRelease\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheApi\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"answerURL\",\"type\":\"string\"}],\"name\":\"answer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"answers\",\"outputs\":[{\"internalType\":\"enum CLAIM_STATE\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"answerURL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"finalGrade\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"scoringMetaDataURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimDataForUser\",\"outputs\":[{\"components\":[{\"internalType\":\"enum CLAIM_STATE\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"answerURL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"finalGrade\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"scoringMetaDataURI\",\"type\":\"string\"}],\"internalType\":\"struct Answer\",\"name\":\"_answer\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getClaimLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"getClaims\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_claims\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getQuestionClaimState\",\"outputs\":[{\"internalType\":\"enum CLAIM_STATE\",\"name\":\"claimState\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimLimit\",\"type\":\"uint256\"}],\"name\":\"initializeQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionApi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"}],\"name\":\"releaseClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newApi\",\"type\":\"address\"}],\"name\":\"setQuestionApi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initializeQuestion(uint256,uint256)\":{\"params\":{\"claimLimit\":\"The limit for the amount of people that can claim the question\",\"questionId\":\"The id of the question\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setQuestionApi(address)\":{\"params\":{\"_newApi\":\"The new address of the question API.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed()\":[{\"notice\":\"Throw if analyst tries to claim a question multiple times\"}],\"ClaimLimitReached()\":[{\"notice\":\"Throw if user tries to claim a question that is past its limit\"}],\"NeedClaimToAnswer()\":[{\"notice\":\"Throw if a analyst tries to answer a question that it has not claimed\"}],\"NoClaimToRelease()\":[{\"notice\":\"Throw if analyst tries to release a claim it did not claim\"}]},\"kind\":\"user\",\"methods\":{\"answers(uint256,address)\":{\"notice\":\"maps answers to the question they belong to\"},\"claimCounts(uint256)\":{\"notice\":\"Keeps track of claim counts per question\"},\"claimLimits(uint256)\":{\"notice\":\"Keeps track of claim limits per question\"},\"claims(uint256,uint256)\":{\"notice\":\"maps all claimers to a question\"},\"initializeQuestion(uint256,uint256)\":{\"notice\":\"Initializes a question to receive claims\"},\"setQuestionApi(address)\":{\"notice\":\"Sets the address of the question API.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Protocol/ClaimController.sol\":\"ClaimController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/contracts/Protocol/ClaimController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IClaimController.sol\\\";\\n\\n// Enums\\nimport \\\"./Enums/ClaimEnum.sol\\\";\\n\\n// Structs\\nimport \\\"./Structs/AnswerStruct.sol\\\";\\n\\n// Modifiers\\nimport \\\"./modifiers/OnlyAPI.sol\\\";\\n\\ncontract ClaimController is Ownable, IClaimController, OnlyApi {\\n    /// @notice Keeps track of claim limits per question\\n    mapping(uint256 => uint256) public claimLimits;\\n\\n    /// @notice Keeps track of claim counts per question\\n    mapping(uint256 => uint256) public claimCounts;\\n\\n    /// @notice maps answers to the question they belong to\\n    mapping(uint256 => mapping(address => Answer)) public answers;\\n\\n    /// @notice maps all claimers to a question\\n    mapping(uint256 => address[]) public claims;\\n\\n    //------------------------------------------------------ ERRORS\\n\\n    /// @notice Throw if user tries to claim a question that is past its limit\\n    error ClaimLimitReached();\\n\\n    /// @notice Throw if a analyst tries to answer a question that it has not claimed\\n    error NeedClaimToAnswer();\\n\\n    /// @notice Throw if analyst tries to claim a question multiple times\\n    error AlreadyClaimed();\\n\\n    /// @notice Throw if analyst tries to release a claim it did not claim\\n    error NoClaimToRelease();\\n\\n    // ------------------------------------------------------ FUNCTIONS\\n\\n    /**\\n     * @notice Initializes a question to receive claims\\n     * @param questionId The id of the question\\n     * @param claimLimit The limit for the amount of people that can claim the question\\n     */\\n    function initializeQuestion(uint256 questionId, uint256 claimLimit) public onlyApi {\\n        claimLimits[questionId] = claimLimit;\\n    }\\n\\n    function claim(address user, uint256 questionId) public onlyApi {\\n        if (claimCounts[questionId] >= claimLimits[questionId]) revert ClaimLimitReached();\\n        if (answers[questionId][user].author == user) revert AlreadyClaimed();\\n\\n        ++claimCounts[questionId];\\n        Answer memory _answer = Answer({state: CLAIM_STATE.CLAIMED, author: user, answerURL: \\\"\\\", scoringMetaDataURI: \\\"\\\", finalGrade: 0});\\n        answers[questionId][user] = _answer;\\n    }\\n\\n    function releaseClaim(address user, uint256 questionId) public onlyApi {\\n        if (answers[questionId][user].author != user) revert NoClaimToRelease();\\n\\n        answers[questionId][user].state = CLAIM_STATE.RELEASED;\\n        answers[questionId][user].author = address(0);\\n\\n        --claimCounts[questionId];\\n    }\\n\\n    function answer(\\n        address user,\\n        uint256 questionId,\\n        string calldata answerURL\\n    ) public onlyOwner {\\n        if (answers[questionId][user].state != CLAIM_STATE.CLAIMED) revert NeedClaimToAnswer();\\n        answers[questionId][user].answerURL = answerURL;\\n    }\\n\\n    function getClaims(uint256 questionId) public view returns (address[] memory _claims) {\\n        return claims[questionId];\\n    }\\n\\n    function getClaimLimit(uint256 questionId) public view returns (uint256) {\\n        return claimLimits[questionId];\\n    }\\n\\n    function getClaimDataForUser(uint256 questionId, address user) public view returns (Answer memory _answer) {\\n        return answers[questionId][user];\\n    }\\n\\n    function getQuestionClaimState(uint256 questionId, address user) public view returns (CLAIM_STATE claimState) {\\n        return answers[questionId][user].state;\\n    }\\n}\\n\",\"keccak256\":\"0x676dd9d5a5afd3901c5e812d490cea1fd11c7dc2c6ac8107ab3fa0389e34eb53\",\"license\":\"MIT\"},\"src/contracts/Protocol/Enums/ClaimEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum CLAIM_STATE {\\n    UNINT,\\n    CLAIMED,\\n    RELEASED,\\n    ANSWERED\\n}\\n\",\"keccak256\":\"0xea71b984aaf40147b5540a4db0f867086eaf9c4c45acd47e4f4e3149b649b1e6\",\"license\":\"MIT\"},\"src/contracts/Protocol/Structs/AnswerStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"../Enums/ClaimEnum.sol\\\";\\n\\nstruct Answer {\\n    CLAIM_STATE state;\\n    address author;\\n    string answerURL;\\n    uint256 finalGrade;\\n    string scoringMetaDataURI;\\n}\\n\",\"keccak256\":\"0xf6e0212f6a848def738435df319971ab89a8690dd8b6e40d3100285ada4adf0b\",\"license\":\"MIT\"},\"src/contracts/Protocol/interfaces/IClaimController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../Structs/AnswerStruct.sol\\\";\\n\\ninterface IClaimController {\\n    function initializeQuestion(uint256 questionId, uint256 claimLimit) external;\\n\\n    function claim(address user, uint256 questionId) external;\\n\\n    function releaseClaim(address user, uint256 questionId) external;\\n\\n    function answer(\\n        address user,\\n        uint256 questionId,\\n        string calldata answerURL\\n    ) external;\\n\\n    function getClaimDataForUser(uint256 questionId, address user) external view returns (Answer memory _answer);\\n\\n    function getQuestionClaimState(uint256 questionId, address user) external view returns (CLAIM_STATE claimState);\\n}\\n\",\"keccak256\":\"0xbda3cf7828fa61e227c75ad6d1a2758b33c328a094bf058013751b1a5370a68f\",\"license\":\"MIT\"},\"src/contracts/Protocol/modifiers/OnlyAPI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract OnlyApi is Ownable {\\n    address public questionApi;\\n\\n    // ------------------------------- Setter\\n    /**\\n     * @notice Sets the address of the question API.\\n     * @param _newApi The new address of the question API.\\n     */\\n    function setQuestionApi(address _newApi) external onlyOwner {\\n        questionApi = _newApi;\\n    }\\n\\n    // ------------------------ Modifiers\\n    modifier onlyApi() {\\n        if (_msgSender() != questionApi) revert NotTheApi();\\n        _;\\n    }\\n\\n    // ------------------------ Errors\\n    error NotTheApi();\\n}\\n\",\"keccak256\":\"0x0681de2966fa03720603c0e7361f8ee5d887b9526d074ba9c14dbf3b80978934\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611e998061010d6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063bdb686de11610071578063bdb686de146102ce578063c0875dfd146102fe578063de9951a61461031a578063f2fde38b14610336578063f894160e146103525761010b565b80638da5cb5b14610234578063a461272b14610252578063aad3ec9614610282578063b92e274a1461029e5761010b565b8063701776f7116100de578063701776f7146101aa578063715018a6146101c65780637dfca71c146101d0578063888af91d146102045761010b565b8063469724e1146101105780634e2f46291461012c5780636baef4971461015c5780636e3c4dd71461017a575b600080fd5b61012a600480360381019061012591906116ab565b610382565b005b610146600480360381019061014191906116eb565b610622565b6040516101539190611727565b60405180910390f35b61016461063a565b6040516101719190611751565b60405180910390f35b610194600480360381019061018f91906116eb565b610660565b6040516101a19190611727565b60405180910390f35b6101c460048036038101906101bf919061176c565b610678565b005b6101ce610722565b005b6101ea60048036038101906101e591906117ac565b6107aa565b6040516101fb9594939291906118fc565b60405180910390f35b61021e600480360381019061021991906116eb565b61092a565b60405161022b9190611a1b565b60405180910390f35b61023c6109cb565b6040516102499190611751565b60405180910390f35b61026c600480360381019061026791906116eb565b6109f4565b6040516102799190611727565b60405180910390f35b61029c600480360381019061029791906116ab565b610a11565b005b6102b860048036038101906102b391906117ac565b610d84565b6040516102c59190611a3d565b60405180910390f35b6102e860048036038101906102e391906117ac565b610def565b6040516102f59190611b3d565b60405180910390f35b61031860048036038101906103139190611b5f565b611019565b005b610334600480360381019061032f9190611bf1565b6110d9565b005b610350600480360381019061034b9190611b5f565b61127c565b005b61036c6004803603810190610367919061176c565b611373565b6040516103799190611751565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166103c36113c1565b73ffffffffffffffffffffffffffffffffffffffff1614610410576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104e8576040517f70d169c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026004600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083600381111561055f5761055e6117ec565b5b021790555060006004600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360008281526020019081526020016000206000815461061790611c94565b919050819055505050565b60036020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166106b96113c1565b73ffffffffffffffffffffffffffffffffffffffff1614610706576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060026000848152602001908152602001600020819055505050565b61072a6113c1565b73ffffffffffffffffffffffffffffffffffffffff166107486109cb565b73ffffffffffffffffffffffffffffffffffffffff161461079e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079590611d09565b60405180910390fd5b6107a860006113c9565b565b6004602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461081390611d58565b80601f016020809104026020016040519081016040528092919081815260200182805461083f90611d58565b801561088c5780601f106108615761010080835404028352916020019161088c565b820191906000526020600020905b81548152906001019060200180831161086f57829003601f168201915b5050505050908060020154908060030180546108a790611d58565b80601f01602080910402602001604051908101604052809291908181526020018280546108d390611d58565b80156109205780601f106108f557610100808354040283529160200191610920565b820191906000526020600020905b81548152906001019060200180831161090357829003601f168201915b5050505050905085565b6060600560008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156109bf57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610975575b50505050509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060026000838152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610a526113c1565b73ffffffffffffffffffffffffffffffffffffffff1614610a9f576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600082815260200190815260200160002054600360008381526020019081526020016000205410610afe576040517f9907008b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610bd6576040517f646cf55800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600082815260200190815260200160002060008154610bf690611d89565b9190508190555060006040518060a0016040528060016003811115610c1e57610c1d6117ec565b5b81526020018473ffffffffffffffffffffffffffffffffffffffff16815260200160405180602001604052806000815250815260200160008152602001604051806020016040528060008152508152509050806004600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690836003811115610cec57610ceb6117ec565b5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816001019080519060200190610d5492919061148d565b50606082015181600201556080820151816003019080519060200190610d7b92919061148d565b50905050505050565b60006004600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16905092915050565b610df7611513565b6004600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820160009054906101000a900460ff166003811115610e7757610e766117ec565b5b6003811115610e8957610e886117ec565b5b81526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610ef390611d58565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1f90611d58565b8015610f6c5780601f10610f4157610100808354040283529160200191610f6c565b820191906000526020600020905b815481529060010190602001808311610f4f57829003601f168201915b5050505050815260200160028201548152602001600382018054610f8f90611d58565b80601f0160208091040260200160405190810160405280929190818152602001828054610fbb90611d58565b80156110085780601f10610fdd57610100808354040283529160200191611008565b820191906000526020600020905b815481529060010190602001808311610feb57829003601f168201915b505050505081525050905092915050565b6110216113c1565b73ffffffffffffffffffffffffffffffffffffffff1661103f6109cb565b73ffffffffffffffffffffffffffffffffffffffff1614611095576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108c90611d09565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6110e16113c1565b73ffffffffffffffffffffffffffffffffffffffff166110ff6109cb565b73ffffffffffffffffffffffffffffffffffffffff1614611155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114c90611d09565b60405180910390fd5b60016003811115611169576111686117ec565b5b6004600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660038111156111dc576111db6117ec565b5b14611213576040517f54a0346a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81816004600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101919061127592919061156a565b5050505050565b6112846113c1565b73ffffffffffffffffffffffffffffffffffffffff166112a26109cb565b73ffffffffffffffffffffffffffffffffffffffff16146112f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ef90611d09565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611367576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135e90611e43565b60405180910390fd5b611370816113c9565b50565b6005602052816000526040600020818154811061138f57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805461149990611d58565b90600052602060002090601f0160209004810192826114bb5760008555611502565b82601f106114d457805160ff1916838001178555611502565b82800160010185558215611502579182015b828111156115015782518255916020019190600101906114e6565b5b50905061150f91906115f0565b5090565b6040518060a0016040528060006003811115611532576115316117ec565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001606081525090565b82805461157690611d58565b90600052602060002090601f01602090048101928261159857600085556115df565b82601f106115b157803560ff19168380011785556115df565b828001600101855582156115df579182015b828111156115de5782358255916020019190600101906115c3565b5b5090506115ec91906115f0565b5090565b5b808211156116095760008160009055506001016115f1565b5090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061164282611617565b9050919050565b61165281611637565b811461165d57600080fd5b50565b60008135905061166f81611649565b92915050565b6000819050919050565b61168881611675565b811461169357600080fd5b50565b6000813590506116a58161167f565b92915050565b600080604083850312156116c2576116c161160d565b5b60006116d085828601611660565b92505060206116e185828601611696565b9150509250929050565b6000602082840312156117015761170061160d565b5b600061170f84828501611696565b91505092915050565b61172181611675565b82525050565b600060208201905061173c6000830184611718565b92915050565b61174b81611637565b82525050565b60006020820190506117666000830184611742565b92915050565b600080604083850312156117835761178261160d565b5b600061179185828601611696565b92505060206117a285828601611696565b9150509250929050565b600080604083850312156117c3576117c261160d565b5b60006117d185828601611696565b92505060206117e285828601611660565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061182c5761182b6117ec565b5b50565b600081905061183d8261181b565b919050565b600061184d8261182f565b9050919050565b61185d81611842565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561189d578082015181840152602081019050611882565b838111156118ac576000848401525b50505050565b6000601f19601f8301169050919050565b60006118ce82611863565b6118d8818561186e565b93506118e881856020860161187f565b6118f1816118b2565b840191505092915050565b600060a0820190506119116000830188611854565b61191e6020830187611742565b818103604083015261193081866118c3565b905061193f6060830185611718565b818103608083015261195181846118c3565b90509695505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61199281611637565b82525050565b60006119a48383611989565b60208301905092915050565b6000602082019050919050565b60006119c88261195d565b6119d28185611968565b93506119dd83611979565b8060005b83811015611a0e5781516119f58882611998565b9750611a00836119b0565b9250506001810190506119e1565b5085935050505092915050565b60006020820190508181036000830152611a3581846119bd565b905092915050565b6000602082019050611a526000830184611854565b92915050565b611a6181611842565b82525050565b600082825260208201905092915050565b6000611a8382611863565b611a8d8185611a67565b9350611a9d81856020860161187f565b611aa6816118b2565b840191505092915050565b611aba81611675565b82525050565b600060a083016000830151611ad86000860182611a58565b506020830151611aeb6020860182611989565b5060408301518482036040860152611b038282611a78565b9150506060830151611b186060860182611ab1565b5060808301518482036080860152611b308282611a78565b9150508091505092915050565b60006020820190508181036000830152611b578184611ac0565b905092915050565b600060208284031215611b7557611b7461160d565b5b6000611b8384828501611660565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611bb157611bb0611b8c565b5b8235905067ffffffffffffffff811115611bce57611bcd611b91565b5b602083019150836001820283011115611bea57611be9611b96565b5b9250929050565b60008060008060608587031215611c0b57611c0a61160d565b5b6000611c1987828801611660565b9450506020611c2a87828801611696565b935050604085013567ffffffffffffffff811115611c4b57611c4a611612565b5b611c5787828801611b9b565b925092505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c9f82611675565b915060008203611cb257611cb1611c65565b5b600182039050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611cf360208361186e565b9150611cfe82611cbd565b602082019050919050565b60006020820190508181036000830152611d2281611ce6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d7057607f821691505b602082108103611d8357611d82611d29565b5b50919050565b6000611d9482611675565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611dc657611dc5611c65565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611e2d60268361186e565b9150611e3882611dd1565b604082019050919050565b60006020820190508181036000830152611e5c81611e20565b905091905056fea2646970667358221220a7544e9c820f6f898203e9f17f4a62c10299bdc4d2d3d328bad603b9ef63b79064736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063bdb686de11610071578063bdb686de146102ce578063c0875dfd146102fe578063de9951a61461031a578063f2fde38b14610336578063f894160e146103525761010b565b80638da5cb5b14610234578063a461272b14610252578063aad3ec9614610282578063b92e274a1461029e5761010b565b8063701776f7116100de578063701776f7146101aa578063715018a6146101c65780637dfca71c146101d0578063888af91d146102045761010b565b8063469724e1146101105780634e2f46291461012c5780636baef4971461015c5780636e3c4dd71461017a575b600080fd5b61012a600480360381019061012591906116ab565b610382565b005b610146600480360381019061014191906116eb565b610622565b6040516101539190611727565b60405180910390f35b61016461063a565b6040516101719190611751565b60405180910390f35b610194600480360381019061018f91906116eb565b610660565b6040516101a19190611727565b60405180910390f35b6101c460048036038101906101bf919061176c565b610678565b005b6101ce610722565b005b6101ea60048036038101906101e591906117ac565b6107aa565b6040516101fb9594939291906118fc565b60405180910390f35b61021e600480360381019061021991906116eb565b61092a565b60405161022b9190611a1b565b60405180910390f35b61023c6109cb565b6040516102499190611751565b60405180910390f35b61026c600480360381019061026791906116eb565b6109f4565b6040516102799190611727565b60405180910390f35b61029c600480360381019061029791906116ab565b610a11565b005b6102b860048036038101906102b391906117ac565b610d84565b6040516102c59190611a3d565b60405180910390f35b6102e860048036038101906102e391906117ac565b610def565b6040516102f59190611b3d565b60405180910390f35b61031860048036038101906103139190611b5f565b611019565b005b610334600480360381019061032f9190611bf1565b6110d9565b005b610350600480360381019061034b9190611b5f565b61127c565b005b61036c6004803603810190610367919061176c565b611373565b6040516103799190611751565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166103c36113c1565b73ffffffffffffffffffffffffffffffffffffffff1614610410576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104e8576040517f70d169c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026004600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083600381111561055f5761055e6117ec565b5b021790555060006004600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360008281526020019081526020016000206000815461061790611c94565b919050819055505050565b60036020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166106b96113c1565b73ffffffffffffffffffffffffffffffffffffffff1614610706576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060026000848152602001908152602001600020819055505050565b61072a6113c1565b73ffffffffffffffffffffffffffffffffffffffff166107486109cb565b73ffffffffffffffffffffffffffffffffffffffff161461079e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079590611d09565b60405180910390fd5b6107a860006113c9565b565b6004602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461081390611d58565b80601f016020809104026020016040519081016040528092919081815260200182805461083f90611d58565b801561088c5780601f106108615761010080835404028352916020019161088c565b820191906000526020600020905b81548152906001019060200180831161086f57829003601f168201915b5050505050908060020154908060030180546108a790611d58565b80601f01602080910402602001604051908101604052809291908181526020018280546108d390611d58565b80156109205780601f106108f557610100808354040283529160200191610920565b820191906000526020600020905b81548152906001019060200180831161090357829003601f168201915b5050505050905085565b6060600560008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156109bf57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610975575b50505050509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060026000838152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610a526113c1565b73ffffffffffffffffffffffffffffffffffffffff1614610a9f576040517f92471d5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600082815260200190815260200160002054600360008381526020019081526020016000205410610afe576040517f9907008b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610bd6576040517f646cf55800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600082815260200190815260200160002060008154610bf690611d89565b9190508190555060006040518060a0016040528060016003811115610c1e57610c1d6117ec565b5b81526020018473ffffffffffffffffffffffffffffffffffffffff16815260200160405180602001604052806000815250815260200160008152602001604051806020016040528060008152508152509050806004600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690836003811115610cec57610ceb6117ec565b5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816001019080519060200190610d5492919061148d565b50606082015181600201556080820151816003019080519060200190610d7b92919061148d565b50905050505050565b60006004600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16905092915050565b610df7611513565b6004600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820160009054906101000a900460ff166003811115610e7757610e766117ec565b5b6003811115610e8957610e886117ec565b5b81526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610ef390611d58565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1f90611d58565b8015610f6c5780601f10610f4157610100808354040283529160200191610f6c565b820191906000526020600020905b815481529060010190602001808311610f4f57829003601f168201915b5050505050815260200160028201548152602001600382018054610f8f90611d58565b80601f0160208091040260200160405190810160405280929190818152602001828054610fbb90611d58565b80156110085780601f10610fdd57610100808354040283529160200191611008565b820191906000526020600020905b815481529060010190602001808311610feb57829003601f168201915b505050505081525050905092915050565b6110216113c1565b73ffffffffffffffffffffffffffffffffffffffff1661103f6109cb565b73ffffffffffffffffffffffffffffffffffffffff1614611095576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108c90611d09565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6110e16113c1565b73ffffffffffffffffffffffffffffffffffffffff166110ff6109cb565b73ffffffffffffffffffffffffffffffffffffffff1614611155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114c90611d09565b60405180910390fd5b60016003811115611169576111686117ec565b5b6004600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1660038111156111dc576111db6117ec565b5b14611213576040517f54a0346a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81816004600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101919061127592919061156a565b5050505050565b6112846113c1565b73ffffffffffffffffffffffffffffffffffffffff166112a26109cb565b73ffffffffffffffffffffffffffffffffffffffff16146112f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ef90611d09565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611367576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135e90611e43565b60405180910390fd5b611370816113c9565b50565b6005602052816000526040600020818154811061138f57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805461149990611d58565b90600052602060002090601f0160209004810192826114bb5760008555611502565b82601f106114d457805160ff1916838001178555611502565b82800160010185558215611502579182015b828111156115015782518255916020019190600101906114e6565b5b50905061150f91906115f0565b5090565b6040518060a0016040528060006003811115611532576115316117ec565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001606081525090565b82805461157690611d58565b90600052602060002090601f01602090048101928261159857600085556115df565b82601f106115b157803560ff19168380011785556115df565b828001600101855582156115df579182015b828111156115de5782358255916020019190600101906115c3565b5b5090506115ec91906115f0565b5090565b5b808211156116095760008160009055506001016115f1565b5090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061164282611617565b9050919050565b61165281611637565b811461165d57600080fd5b50565b60008135905061166f81611649565b92915050565b6000819050919050565b61168881611675565b811461169357600080fd5b50565b6000813590506116a58161167f565b92915050565b600080604083850312156116c2576116c161160d565b5b60006116d085828601611660565b92505060206116e185828601611696565b9150509250929050565b6000602082840312156117015761170061160d565b5b600061170f84828501611696565b91505092915050565b61172181611675565b82525050565b600060208201905061173c6000830184611718565b92915050565b61174b81611637565b82525050565b60006020820190506117666000830184611742565b92915050565b600080604083850312156117835761178261160d565b5b600061179185828601611696565b92505060206117a285828601611696565b9150509250929050565b600080604083850312156117c3576117c261160d565b5b60006117d185828601611696565b92505060206117e285828601611660565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061182c5761182b6117ec565b5b50565b600081905061183d8261181b565b919050565b600061184d8261182f565b9050919050565b61185d81611842565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561189d578082015181840152602081019050611882565b838111156118ac576000848401525b50505050565b6000601f19601f8301169050919050565b60006118ce82611863565b6118d8818561186e565b93506118e881856020860161187f565b6118f1816118b2565b840191505092915050565b600060a0820190506119116000830188611854565b61191e6020830187611742565b818103604083015261193081866118c3565b905061193f6060830185611718565b818103608083015261195181846118c3565b90509695505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61199281611637565b82525050565b60006119a48383611989565b60208301905092915050565b6000602082019050919050565b60006119c88261195d565b6119d28185611968565b93506119dd83611979565b8060005b83811015611a0e5781516119f58882611998565b9750611a00836119b0565b9250506001810190506119e1565b5085935050505092915050565b60006020820190508181036000830152611a3581846119bd565b905092915050565b6000602082019050611a526000830184611854565b92915050565b611a6181611842565b82525050565b600082825260208201905092915050565b6000611a8382611863565b611a8d8185611a67565b9350611a9d81856020860161187f565b611aa6816118b2565b840191505092915050565b611aba81611675565b82525050565b600060a083016000830151611ad86000860182611a58565b506020830151611aeb6020860182611989565b5060408301518482036040860152611b038282611a78565b9150506060830151611b186060860182611ab1565b5060808301518482036080860152611b308282611a78565b9150508091505092915050565b60006020820190508181036000830152611b578184611ac0565b905092915050565b600060208284031215611b7557611b7461160d565b5b6000611b8384828501611660565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611bb157611bb0611b8c565b5b8235905067ffffffffffffffff811115611bce57611bcd611b91565b5b602083019150836001820283011115611bea57611be9611b96565b5b9250929050565b60008060008060608587031215611c0b57611c0a61160d565b5b6000611c1987828801611660565b9450506020611c2a87828801611696565b935050604085013567ffffffffffffffff811115611c4b57611c4a611612565b5b611c5787828801611b9b565b925092505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c9f82611675565b915060008203611cb257611cb1611c65565b5b600182039050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611cf360208361186e565b9150611cfe82611cbd565b602082019050919050565b60006020820190508181036000830152611d2281611ce6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d7057607f821691505b602082108103611d8357611d82611d29565b5b50919050565b6000611d9482611675565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611dc657611dc5611c65565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611e2d60268361186e565b9150611e3882611dd1565b604082019050919050565b60006020820190508181036000830152611e5c81611e20565b905091905056fea2646970667358221220a7544e9c820f6f898203e9f17f4a62c10299bdc4d2d3d328bad603b9ef63b79064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initializeQuestion(uint256,uint256)": {
        "params": {
          "claimLimit": "The limit for the amount of people that can claim the question",
          "questionId": "The id of the question"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setQuestionApi(address)": {
        "params": {
          "_newApi": "The new address of the question API."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AlreadyClaimed()": [
        {
          "notice": "Throw if analyst tries to claim a question multiple times"
        }
      ],
      "ClaimLimitReached()": [
        {
          "notice": "Throw if user tries to claim a question that is past its limit"
        }
      ],
      "NeedClaimToAnswer()": [
        {
          "notice": "Throw if a analyst tries to answer a question that it has not claimed"
        }
      ],
      "NoClaimToRelease()": [
        {
          "notice": "Throw if analyst tries to release a claim it did not claim"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "answers(uint256,address)": {
        "notice": "maps answers to the question they belong to"
      },
      "claimCounts(uint256)": {
        "notice": "Keeps track of claim counts per question"
      },
      "claimLimits(uint256)": {
        "notice": "Keeps track of claim limits per question"
      },
      "claims(uint256,uint256)": {
        "notice": "maps all claimers to a question"
      },
      "initializeQuestion(uint256,uint256)": {
        "notice": "Initializes a question to receive claims"
      },
      "setQuestionApi(address)": {
        "notice": "Sets the address of the question API."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3882,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "questionApi",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1450,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "claimLimits",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1455,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "claimCounts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1463,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "answers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Answer)2822_storage))"
      },
      {
        "astId": 1469,
        "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
        "label": "claims",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_enum(CLAIM_STATE)1713": {
        "encoding": "inplace",
        "label": "enum CLAIM_STATE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Answer)2822_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Answer)",
        "numberOfBytes": "32",
        "value": "t_struct(Answer)2822_storage"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Answer)2822_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct Answer))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Answer)2822_storage)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Answer)2822_storage": {
        "encoding": "inplace",
        "label": "struct Answer",
        "members": [
          {
            "astId": 2813,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(CLAIM_STATE)1713"
          },
          {
            "astId": 2815,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "author",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2817,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "answerURL",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2819,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "finalGrade",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2821,
            "contract": "src/contracts/Protocol/ClaimController.sol:ClaimController",
            "label": "scoringMetaDataURI",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}