{
  "address": "0xE0f243A7422EB0d55C37b3e2830A85253a569bD5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metricTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "harvester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_METRIC_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALLOCATION_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "METRIC_PER_BLOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newShares",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "newAutoDistribute",
          "type": "bool"
        }
      ],
      "name": "addAllocationGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressExistence",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllocationGroups",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "groupAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "autodistribute",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "rewardDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimable",
              "type": "uint256"
            }
          ],
          "internalType": "struct Chef.AllocationGroup[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalAllocationPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "removeAllocationGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isOn",
          "type": "bool"
        }
      ],
      "name": "toggleRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateAccumulatedAllocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "groupAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "newAutoDistribute",
          "type": "bool"
        }
      ],
      "name": "updateAllocationGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "viewPendingClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agIndex",
          "type": "uint256"
        }
      ],
      "name": "viewPendingHarvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb45500e7e6ecb9901a8aa662a29ba14327051da184b7d3b1b1e80859b4bff0bc",
  "receipt": {
    "to": null,
    "from": "0x4993eA3aaE13aAfc433Ad66fe756f91E253622CA",
    "contractAddress": "0xE0f243A7422EB0d55C37b3e2830A85253a569bD5",
    "transactionIndex": 11,
    "gasUsed": "2249796",
    "logsBloom": "0x
    "blockHash": "0xe52394eaf81932fedd89921bf6f235b415959185ff245652df26bf0a91363d02",
    "transactionHash": "0xb45500e7e6ecb9901a8aa662a29ba14327051da184b7d3b1b1e80859b4bff0bc",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 12243367,
        "transactionHash": "0xb45500e7e6ecb9901a8aa662a29ba14327051da184b7d3b1b1e80859b4bff0bc",
        "address": "0xE0f243A7422EB0d55C37b3e2830A85253a569bD5",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004993ea3aae13aafc433ad66fe756f91e253622ca",
          "0x0000000000000000000000004993ea3aae13aafc433ad66fe756f91e253622ca"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xe52394eaf81932fedd89921bf6f235b415959185ff245652df26bf0a91363d02"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 12243367,
        "transactionHash": "0xb45500e7e6ecb9901a8aa662a29ba14327051da184b7d3b1b1e80859b4bff0bc",
        "address": "0xE0f243A7422EB0d55C37b3e2830A85253a569bD5",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0609dbbc5d120e6ba35c563820c575fd4a22cab331694eecb5445560aa092466",
          "0x0000000000000000000000004993ea3aae13aafc433ad66fe756f91e253622ca",
          "0x0000000000000000000000004993ea3aae13aafc433ad66fe756f91e253622ca"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xe52394eaf81932fedd89921bf6f235b415959185ff245652df26bf0a91363d02"
      }
    ],
    "blockNumber": 12243367,
    "cumulativeGasUsed": "7626532",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x91Af56Ae4e53168DC22Bd72dbb1E0CCDe65282Bd"
  ],
  "numDeployments": 1,
  "solcInputHash": "be81109a2cc20734711688c3e28acb31",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metricTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"harvester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_METRIC_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALLOCATION_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"METRIC_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"newAutoDistribute\",\"type\":\"bool\"}],\"name\":\"addAllocationGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllocationGroups\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"groupAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autodistribute\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"internalType\":\"struct Chef.AllocationGroup[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAllocationPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"removeAllocationGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isOn\",\"type\":\"bool\"}],\"name\":\"toggleRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAccumulatedAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"groupAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"newAutoDistribute\",\"type\":\"bool\"}],\"name\":\"updateAllocationGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"viewPendingClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agIndex\",\"type\":\"uint256\"}],\"name\":\"viewPendingHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"In sushi's master chef, the design allows the controller to submit LP contracts for yield farming, and then user's can stake their LP tokens. In this contract, there is no concept of a user staking their LP tokens - and instead of LP contract, the controller is submitting Allocation Groups. So in sushi: 1.  Every `x` blocks, calculate minted Sushi Tokens for each LP contract based on their (shares / total shares) 2.  Then, do the math to figure out how many rewards each LP token is worth (based on the total amount of LP tokens staked) 3.  Then, when a user requests their rewards, their claimable amount is based on how many tokens they have staked - and from the previous step, we know how many rewards each LP token gets. 4.  Historical withdrawals are tracked through \\\"rewardDebt\\\" - so subtract the amount of rewards they have already claimed from their total earned rewards. This contract is a bit more simplified.  Basically there are no LP tokens - so those values are tracked at the top level. 1.  whenever updateAccumulatedAllocations() is called, we look at how many blocks it's been since the last time it called and multiply that by the `METRIC_PER_BLOCK` value. 2.  Then we use that value to determine how much each current \\\"share\\\" is going to be earning, and save that as _lifetimeShareValue 3.  Then, when an Allocation Group calls Harvest, we figure out how much they've earned based on the _lifetimeShareValue and their current allocation. 4.  We track historical harvests through \\\"debt\\\" - an AG's Debt is how much they've already harvested, so we subtract that from their lifetime earned rewards to get current earned rewards. - OR, Same thing different lens -  1.  Every `x` blocks, calculate  METRIC Tokens for each AG based on their (shares / total shares) 2.  Then, do the math to figure out how many METRIC tokens will be distributed in total 3.  Then, when a user requests their rewards, their claimable amount is based on how many shares they have - and from the previous step, we know how many rewards each AG group gets. 4.  Historical withdrawals are tracked through \\\"rewardDebt\\\" - so subtract the amount of rewards they have already claimed from their total earned rewards.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Chef.sol\":\"Chef\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"src/contracts/Chef.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./MetricToken.sol\\\";\\n\\n// Heavily Inspired by Sushi's MasterChefv2 - but with a few changes:\\n// - We don't have a v1, so we don't need that wrapping\\n// - We don't have two layers (pools and users), so the concept of pools is flattened into the contract itself.\\n// ^^ This is because METRIC is the only token this will ever work with.\\n\\n// Read this: https://dev.sushi.com/sushiswap/contracts/masterchefv2\\n// Also read this: https://soliditydeveloper.com/sushi-swap\\n\\n/**\\n In sushi's master chef, the design allows the controller to submit LP contracts for yield farming, and then user's can stake their LP tokens.\\n\\n In this contract, there is no concept of a user staking their LP tokens - and instead of LP contract, the controller is submitting Allocation Groups.\\n\\n So in sushi:\\n\\n 1.  Every `x` blocks, calculate minted Sushi Tokens for each LP contract based on their (shares / total shares)\\n 2.  Then, do the math to figure out how many rewards each LP token is worth (based on the total amount of LP tokens staked)\\n 3.  Then, when a user requests their rewards, their claimable amount is based on how many tokens they have staked - and from the previous step, we know how many rewards each LP token gets.\\n 4.  Historical withdrawals are tracked through \\\"rewardDebt\\\" - so subtract the amount of rewards they have already claimed from their total earned rewards.\\n\\n\\nThis contract is a bit more simplified.  Basically there are no LP tokens - so those values are tracked at the top level.\\n \\n 1.  whenever updateAccumulatedAllocations() is called, we look at how many blocks it's been since the last time it called and multiply that by the `METRIC_PER_BLOCK` value.\\n 2.  Then we use that value to determine how much each current \\\"share\\\" is going to be earning, and save that as _lifetimeShareValue\\n 3.  Then, when an Allocation Group calls Harvest, we figure out how much they've earned based on the _lifetimeShareValue and their current allocation.\\n 4.  We track historical harvests through \\\"debt\\\" - an AG's Debt is how much they've already harvested, so we subtract that from their lifetime earned rewards to get current earned rewards.\\n\\n    - OR, Same thing different lens - \\n\\n 1.  Every `x` blocks, calculate  METRIC Tokens for each AG based on their (shares / total shares)\\n 2.  Then, do the math to figure out how many METRIC tokens will be distributed in total\\n 3.  Then, when a user requests their rewards, their claimable amount is based on how many shares they have - and from the previous step, we know how many rewards each AG group gets.\\n 4.  Historical withdrawals are tracked through \\\"rewardDebt\\\" - so subtract the amount of rewards they have already claimed from their total earned rewards.\\n\\n\\n */\\n\\ncontract Chef is AccessControl {\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant ALLOCATION_ROLE = keccak256(\\\"ALLOCATION_ROLE\\\");\\n\\n    // TODO we probably need this behind a function so it can be dynamic\\n    uint256 public METRIC_PER_BLOCK = 4 * 10**18;\\n    uint256 public constant ACC_METRIC_PRECISION = 1e12;\\n\\n    bool private _rewardsActive;\\n    AllocationGroup[] private _allocations;\\n    uint256 private _totalAllocPoint;\\n    uint256 private _lifetimeShareValue = 0;\\n    uint256 private _lastRewardBlock;\\n\\n    MetricToken private _metric;\\n\\n    constructor(address metricTokenAddress) {\\n        _metric = MetricToken(metricTokenAddress);\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(ALLOCATION_ROLE, msg.sender);\\n    }\\n\\n    //------------------------------------------------------Manage Allocation Groups\\n\\n    function addAllocationGroup(\\n        address newAddress,\\n        uint256 newShares,\\n        bool newAutoDistribute\\n    ) external onlyRole(ALLOCATION_ROLE) nonDuplicated(newAddress) {\\n        if (_rewardsActive && _totalAllocPoint > 0) {\\n            updateAccumulatedAllocations();\\n        }\\n        AllocationGroup memory group = AllocationGroup({\\n            groupAddress: newAddress,\\n            shares: newShares,\\n            autodistribute: newAutoDistribute,\\n            rewardDebt: newShares.mul(_lifetimeShareValue).div(ACC_METRIC_PRECISION),\\n            claimable: 0\\n        });\\n\\n        _allocations.push(group);\\n        _totalAllocPoint = _totalAllocPoint.add(group.shares);\\n    }\\n\\n    function updateAllocationGroup(\\n        address groupAddress,\\n        uint256 agIndex,\\n        uint256 shares,\\n        bool newAutoDistribute\\n    ) public onlyRole(ALLOCATION_ROLE) {\\n        if (_rewardsActive && _totalAllocPoint > 0) {\\n            updateAccumulatedAllocations();\\n        }\\n        _totalAllocPoint = _totalAllocPoint.sub(_allocations[agIndex].shares).add(shares);\\n        _allocations[agIndex].groupAddress = groupAddress;\\n        _allocations[agIndex].shares = shares;\\n        _allocations[agIndex].autodistribute = newAutoDistribute;\\n    }\\n\\n    function removeAllocationGroup(uint256 agIndex) external onlyRole(ALLOCATION_ROLE) {\\n        require(agIndex < _allocations.length);\\n        if (_rewardsActive && _totalAllocPoint > 0) {\\n            updateAccumulatedAllocations();\\n        }\\n        _totalAllocPoint = _totalAllocPoint.sub(_allocations[agIndex].shares);\\n\\n        _allocations[agIndex] = _allocations[_allocations.length - 1];\\n        _allocations.pop();\\n    }\\n\\n    function toggleRewards(bool isOn) external onlyRole(ALLOCATION_ROLE) {\\n        _rewardsActive = isOn;\\n        _lastRewardBlock = block.number;\\n    }\\n\\n    //------------------------------------------------------Getters\\n\\n    function getAllocationGroups() public view returns (AllocationGroup[] memory) {\\n        return _allocations;\\n    }\\n\\n    function getTotalAllocationPoints() public view returns (uint256) {\\n        return _totalAllocPoint;\\n    }\\n\\n    //------------------------------------------------------Distribution\\n\\n    function viewPendingHarvest(uint256 agIndex) public view returns (uint256) {\\n        AllocationGroup storage group = _allocations[agIndex];\\n\\n        return group.shares.mul(_lifetimeShareValue).div(ACC_METRIC_PRECISION).sub(group.rewardDebt);\\n    }\\n\\n    function viewPendingClaims(uint256 agIndex) public view returns (uint256) {\\n        AllocationGroup storage group = _allocations[agIndex];\\n\\n        return group.claimable;\\n    }\\n\\n    function updateAccumulatedAllocations() public {\\n        require(_rewardsActive, \\\"Rewards are not active\\\");\\n        if (block.number <= _lastRewardBlock) {\\n            return;\\n        }\\n\\n        // TODO confirm budget is correct with assertions\\n        // Not sure we can project emission rate over X years?\\n        // Not entirely sure how to handle this, but we can at least try to make it work.\\n        // ^^ will help with fuzz testing\\n\\n        uint256 blocks = block.number.sub(_lastRewardBlock);\\n\\n        uint256 accumulated = blocks.mul(METRIC_PER_BLOCK);\\n\\n        _lifetimeShareValue = _lifetimeShareValue.add(accumulated.mul(ACC_METRIC_PRECISION).div(_totalAllocPoint));\\n        _lastRewardBlock = block.number;\\n    }\\n\\n    // TODO when we implement the emission rate, ensure this function is called before update the rate\\n    // if we don't, then a user's rewards pre-emission change will incorrectly reflect the new rate\\n    function harvestAll() public {\\n        for (uint8 i = 0; i < _allocations.length; i++) {\\n            harvest(i);\\n        }\\n    }\\n\\n    function harvest(uint256 agIndex) public {\\n        AllocationGroup storage group = _allocations[agIndex];\\n\\n        updateAccumulatedAllocations();\\n\\n        uint256 claimable = group.shares.mul(_lifetimeShareValue).div(ACC_METRIC_PRECISION).sub(group.rewardDebt);\\n\\n        group.rewardDebt = claimable;\\n        if (claimable != 0) {\\n            if (!group.autodistribute) {\\n                group.claimable = group.claimable.add(claimable);\\n            } else {\\n                _metric.transfer(group.groupAddress, claimable);\\n            }\\n        }\\n        emit Harvest(msg.sender, agIndex, claimable);\\n    }\\n\\n    function claim(uint256 agIndex) public {\\n        AllocationGroup storage group = _allocations[agIndex];\\n\\n        require(group.claimable != 0, \\\"No claimable rewards to withdraw\\\");\\n        // TODO do we want a backup in case a group looses access to their wallet\\n        require(group.groupAddress == _msgSender(), \\\"Sender does not represent group\\\");\\n        _metric.transfer(group.groupAddress, group.claimable);\\n        group.claimable = 0;\\n\\n        emit Withdraw(msg.sender, agIndex, group.claimable);\\n    }\\n\\n    //------------------------------------------------------Support Functions\\n\\n    mapping(address => bool) public addressExistence;\\n    modifier nonDuplicated(address _address) {\\n        require(addressExistence[_address] == false, \\\"nonDuplicated: duplicated\\\");\\n        addressExistence[_address] = true;\\n        _;\\n    }\\n\\n    //------------------------------------------------------Structs\\n\\n    event Harvest(address harvester, uint256 agIndex, uint256 amount);\\n    event Withdraw(address withdrawer, uint256 agIndex, uint256 amount);\\n\\n    struct AllocationGroup {\\n        address groupAddress;\\n        uint256 shares;\\n        bool autodistribute;\\n        uint256 rewardDebt; // keeps track of how much the user is owed or has been credited already\\n        uint256 claimable;\\n    }\\n}\\n\",\"keccak256\":\"0x6125e51b7c2eceac3b911483decdb64dd34bad66dd7463636de67157557346a1\",\"license\":\"Unlicense\"},\"src/contracts/MetricToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/// @custom:security-contact contracts@metricsdao.com\\ncontract MetricToken is ERC20 {\\n\\n    constructor(address _vestingContractAddress) ERC20(\\\"METRIC\\\", \\\"METRIC\\\") {\\n        _mint(_vestingContractAddress, 1000000000 * 10**decimals());\\n        //TODO don't mint to _msgSender, mint to vesting contract\\n    }\\n}\\n\",\"keccak256\":\"0x5243fa5c9f6feb1c37bce306ff4b83f214e040ed99f14c03b6829caecce9f1be\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052673782dace9d90000060015560006005553480156200002257600080fd5b50604051620028d4380380620028d48339818101604052810190620000489190620002a4565b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200009e6000801b33620000d760201b60201c565b620000d07f0609dbbc5d120e6ba35c563820c575fd4a22cab331694eecb5445560aa09246633620000d760201b60201c565b50620002d6565b620000e98282620001c860201b60201c565b620001c457600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001696200023260201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200026c826200023f565b9050919050565b6200027e816200025f565b81146200028a57600080fd5b50565b6000815190506200029e8162000273565b92915050565b600060208284031215620002bd57620002bc6200023a565b5b6000620002cd848285016200028d565b91505092915050565b6125ee80620002e66000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80636ac49a89116100c35780638ed955b91161007c5780638ed955b91461037657806391d1485414610380578063994cd567146103b0578063a217fddf146103e0578063d547741f146103fe578063ddc632621461041a5761014d565b80636ac49a89146102d85780636c9ab0a7146102f65780636d290d0c1461031457806377d22d1a146103325780638b4a4ed51461033c5780638c19ec8b1461035a5761014d565b806336568abe1161011557806336568abe1461021a578063379607f51461023657806339e5bb76146102525780635aa01b04146102705780635cae9a481461028c5780636336694b146102bc5761014d565b806301ffc9a71461015257806322abbddf14610182578063248a9ca3146101b2578063259e7873146101e25780632f2ff15d146101fe575b600080fd5b61016c6004803603810190610167919061196e565b610436565b60405161017991906119b6565b60405180910390f35b61019c60048036038101906101979190611a2f565b6104b0565b6040516101a991906119b6565b60405180910390f35b6101cc60048036038101906101c79190611a92565b6104d0565b6040516101d99190611ace565b60405180910390f35b6101fc60048036038101906101f79190611b4b565b6104ef565b005b61021860048036038101906102139190611b9e565b610782565b005b610234600480360381019061022f9190611b9e565b6107ab565b005b610250600480360381019061024b9190611bde565b61082e565b005b61025a610a4b565b6040516102679190611c1a565b60405180910390f35b61028a60048036038101906102859190611c35565b610a51565b005b6102a660048036038101906102a19190611bde565b610bd3565b6040516102b39190611c1a565b60405180910390f35b6102d660048036038101906102d19190611bde565b610c07565b005b6102e0610e42565b6040516102ed9190611c1a565b60405180910390f35b6102fe610e4b565b60405161030b9190611ace565b60405180910390f35b61031c610e6f565b6040516103299190611c1a565b60405180910390f35b61033a610e79565b005b610344610f5a565b6040516103519190611de0565b60405180910390f35b610374600480360381019061036f9190611e02565b611048565b005b61037e61109f565b005b61039a60048036038101906103959190611b9e565b6110d4565b6040516103a791906119b6565b60405180910390f35b6103ca60048036038101906103c59190611bde565b61113e565b6040516103d79190611c1a565b60405180910390f35b6103e86111b3565b6040516103f59190611ace565b60405180910390f35b61041860048036038101906104139190611b9e565b6111ba565b005b610434600480360381019061042f9190611bde565b6111e3565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104a957506104a8826113ad565b5b9050919050565b60086020528060005260406000206000915054906101000a900460ff1681565b6000806000838152602001908152602001600020600101549050919050565b7f0609dbbc5d120e6ba35c563820c575fd4a22cab331694eecb5445560aa0924666105218161051c611417565b61141f565b8360001515600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146105b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ac90611e8c565b60405180910390fd5b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600260009054906101000a900460ff16801561062b57506000600454115b1561063957610638610e79565b5b60006040518060a001604052808773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001851515815260200161069c64e8d4a5100061068e6005548a6114bc90919063ffffffff16565b6114d290919063ffffffff16565b815260200160008152509050600381908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055506060820151816003015560808201518160040155505061077481602001516004546114e890919063ffffffff16565b600481905550505050505050565b61078b826104d0565b61079c81610797611417565b61141f565b6107a683836114fe565b505050565b6107b3611417565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610820576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081790611f1e565b60405180910390fd5b61082a82826115de565b5050565b60006003828154811061084457610843611f3e565b5b9060005260206000209060050201905060008160040154141561089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089390611fb9565b60405180910390fd5b6108a4611417565b73ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610935576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092c90612025565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600401546040518363ffffffff1660e01b81526004016109ba929190612054565b6020604051808303816000875af11580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190612092565b50600081600401819055507ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56833838360040154604051610a3f939291906120bf565b60405180910390a15050565b60015481565b7f0609dbbc5d120e6ba35c563820c575fd4a22cab331694eecb5445560aa092466610a8381610a7e611417565b61141f565b600260009054906101000a900460ff168015610aa157506000600454115b15610aaf57610aae610e79565b5b610afb83610aed60038781548110610aca57610ac9611f3e565b5b9060005260206000209060050201600101546004546116bf90919063ffffffff16565b6114e890919063ffffffff16565b6004819055508460038581548110610b1657610b15611f3e565b5b906000526020600020906005020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260038581548110610b7a57610b79611f3e565b5b9060005260206000209060050201600101819055508160038581548110610ba457610ba3611f3e565b5b906000526020600020906005020160020160006101000a81548160ff0219169083151502179055505050505050565b60008060038381548110610bea57610be9611f3e565b5b906000526020600020906005020190508060040154915050919050565b7f0609dbbc5d120e6ba35c563820c575fd4a22cab331694eecb5445560aa092466610c3981610c34611417565b61141f565b6003805490508210610c4a57600080fd5b600260009054906101000a900460ff168015610c6857506000600454115b15610c7657610c75610e79565b5b610cb060038381548110610c8d57610c8c611f3e565b5b9060005260206000209060050201600101546004546116bf90919063ffffffff16565b60048190555060036001600380549050610cca9190612125565b81548110610cdb57610cda611f3e565b5b906000526020600020906005020160038381548110610cfd57610cfc611f3e565b5b90600052602060002090600502016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600182015481600101556002820160009054906101000a900460ff168160020160006101000a81548160ff02191690831515021790555060038201548160030155600482015481600401559050506003805480610dd257610dd1612159565b5b6001900381819060005260206000209060050201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006101000a81549060ff021916905560038201600090556004820160009055505090555050565b64e8d4a5100081565b7f0609dbbc5d120e6ba35c563820c575fd4a22cab331694eecb5445560aa09246681565b6000600454905090565b600260009054906101000a900460ff16610ec8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebf906121d4565b60405180910390fd5b6006544311610ed657610f58565b6000610eed600654436116bf90919063ffffffff16565b90506000610f06600154836114bc90919063ffffffff16565b9050610f48610f37600454610f2964e8d4a51000856114bc90919063ffffffff16565b6114d290919063ffffffff16565b6005546114e890919063ffffffff16565b6005819055504360068190555050505b565b60606003805480602002602001604051908101604052809291908181526020016000905b8282101561103f57838290600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016003820154815260200160048201548152505081526020019060010190610f7e565b50505050905090565b7f0609dbbc5d120e6ba35c563820c575fd4a22cab331694eecb5445560aa09246661107a81611075611417565b61141f565b81600260006101000a81548160ff021916908315150217905550436006819055505050565b60005b6003805490508160ff1610156110d1576110be8160ff166111e3565b80806110c990612201565b9150506110a2565b50565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806003838154811061115557611154611f3e565b5b906000526020600020906005020190506111ab816003015461119d64e8d4a5100061118f60055486600101546114bc90919063ffffffff16565b6114d290919063ffffffff16565b6116bf90919063ffffffff16565b915050919050565b6000801b81565b6111c3826104d0565b6111d4816111cf611417565b61141f565b6111de83836115de565b505050565b6000600382815481106111f9576111f8611f3e565b5b90600052602060002090600502019050611211610e79565b6000611259826003015461124b64e8d4a5100061123d60055487600101546114bc90919063ffffffff16565b6114d290919063ffffffff16565b6116bf90919063ffffffff16565b90508082600301819055506000811461136d578160020160009054906101000a900460ff166112a6576112998183600401546114e890919063ffffffff16565b826004018190555061136c565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611327929190612054565b6020604051808303816000875af1158015611346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136a9190612092565b505b5b7f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249543384836040516113a0939291906120bf565b60405180910390a1505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b61142982826110d4565b6114b85761144e8173ffffffffffffffffffffffffffffffffffffffff1660146116d5565b61145c8360001c60206116d5565b60405160200161146d92919061233d565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114af91906123c1565b60405180910390fd5b5050565b600081836114ca91906123e3565b905092915050565b600081836114e0919061246c565b905092915050565b600081836114f6919061249d565b905092915050565b61150882826110d4565b6115da57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061157f611417565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6115e882826110d4565b156116bb57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611660611417565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600081836116cd9190612125565b905092915050565b6060600060028360026116e891906123e3565b6116f2919061249d565b67ffffffffffffffff81111561170b5761170a6124f3565b5b6040519080825280601f01601f19166020018201604052801561173d5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061177557611774611f3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106117d9576117d8611f3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261181991906123e3565b611823919061249d565b90505b60018111156118c3577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061186557611864611f3e565b5b1a60f81b82828151811061187c5761187b611f3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806118bc90612522565b9050611826565b5060008414611907576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fe90612598565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61194b81611916565b811461195657600080fd5b50565b60008135905061196881611942565b92915050565b60006020828403121561198457611983611911565b5b600061199284828501611959565b91505092915050565b60008115159050919050565b6119b08161199b565b82525050565b60006020820190506119cb60008301846119a7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119fc826119d1565b9050919050565b611a0c816119f1565b8114611a1757600080fd5b50565b600081359050611a2981611a03565b92915050565b600060208284031215611a4557611a44611911565b5b6000611a5384828501611a1a565b91505092915050565b6000819050919050565b611a6f81611a5c565b8114611a7a57600080fd5b50565b600081359050611a8c81611a66565b92915050565b600060208284031215611aa857611aa7611911565b5b6000611ab684828501611a7d565b91505092915050565b611ac881611a5c565b82525050565b6000602082019050611ae36000830184611abf565b92915050565b6000819050919050565b611afc81611ae9565b8114611b0757600080fd5b50565b600081359050611b1981611af3565b92915050565b611b288161199b565b8114611b3357600080fd5b50565b600081359050611b4581611b1f565b92915050565b600080600060608486031215611b6457611b63611911565b5b6000611b7286828701611a1a565b9350506020611b8386828701611b0a565b9250506040611b9486828701611b36565b9150509250925092565b60008060408385031215611bb557611bb4611911565b5b6000611bc385828601611a7d565b9250506020611bd485828601611a1a565b9150509250929050565b600060208284031215611bf457611bf3611911565b5b6000611c0284828501611b0a565b91505092915050565b611c1481611ae9565b82525050565b6000602082019050611c2f6000830184611c0b565b92915050565b60008060008060808587031215611c4f57611c4e611911565b5b6000611c5d87828801611a1a565b9450506020611c6e87828801611b0a565b9350506040611c7f87828801611b0a565b9250506060611c9087828801611b36565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611cd1816119f1565b82525050565b611ce081611ae9565b82525050565b611cef8161199b565b82525050565b60a082016000820151611d0b6000850182611cc8565b506020820151611d1e6020850182611cd7565b506040820151611d316040850182611ce6565b506060820151611d446060850182611cd7565b506080820151611d576080850182611cd7565b50505050565b6000611d698383611cf5565b60a08301905092915050565b6000602082019050919050565b6000611d8d82611c9c565b611d978185611ca7565b9350611da283611cb8565b8060005b83811015611dd3578151611dba8882611d5d565b9750611dc583611d75565b925050600181019050611da6565b5085935050505092915050565b60006020820190508181036000830152611dfa8184611d82565b905092915050565b600060208284031215611e1857611e17611911565b5b6000611e2684828501611b36565b91505092915050565b600082825260208201905092915050565b7f6e6f6e4475706c6963617465643a206475706c69636174656400000000000000600082015250565b6000611e76601983611e2f565b9150611e8182611e40565b602082019050919050565b60006020820190508181036000830152611ea581611e69565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000611f08602f83611e2f565b9150611f1382611eac565b604082019050919050565b60006020820190508181036000830152611f3781611efb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f20636c61696d61626c65207265776172647320746f207769746864726177600082015250565b6000611fa3602083611e2f565b9150611fae82611f6d565b602082019050919050565b60006020820190508181036000830152611fd281611f96565b9050919050565b7f53656e64657220646f6573206e6f7420726570726573656e742067726f757000600082015250565b600061200f601f83611e2f565b915061201a82611fd9565b602082019050919050565b6000602082019050818103600083015261203e81612002565b9050919050565b61204e816119f1565b82525050565b60006040820190506120696000830185612045565b6120766020830184611c0b565b9392505050565b60008151905061208c81611b1f565b92915050565b6000602082840312156120a8576120a7611911565b5b60006120b68482850161207d565b91505092915050565b60006060820190506120d46000830186612045565b6120e16020830185611c0b565b6120ee6040830184611c0b565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061213082611ae9565b915061213b83611ae9565b92508282101561214e5761214d6120f6565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f5265776172647320617265206e6f742061637469766500000000000000000000600082015250565b60006121be601683611e2f565b91506121c982612188565b602082019050919050565b600060208201905081810360008301526121ed816121b1565b9050919050565b600060ff82169050919050565b600061220c826121f4565b915060ff8214156122205761221f6120f6565b5b600182019050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b600061226c60178361222b565b915061227782612236565b601782019050919050565b600081519050919050565b60005b838110156122ab578082015181840152602081019050612290565b838111156122ba576000848401525b50505050565b60006122cb82612282565b6122d5818561222b565b93506122e581856020860161228d565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b600061232760118361222b565b9150612332826122f1565b601182019050919050565b60006123488261225f565b915061235482856122c0565b915061235f8261231a565b915061236b82846122c0565b91508190509392505050565b6000601f19601f8301169050919050565b600061239382612282565b61239d8185611e2f565b93506123ad81856020860161228d565b6123b681612377565b840191505092915050565b600060208201905081810360008301526123db8184612388565b905092915050565b60006123ee82611ae9565b91506123f983611ae9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612432576124316120f6565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061247782611ae9565b915061248283611ae9565b9250826124925761249161243d565b5b828204905092915050565b60006124a882611ae9565b91506124b383611ae9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156124e8576124e76120f6565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061252d82611ae9565b91506000821415612541576125406120f6565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612582602083611e2f565b915061258d8261254c565b602082019050919050565b600060208201905081810360008301526125b181612575565b905091905056fea2646970667358221220861d61f90892c932846fde84bd40effaa8d45545808d93f9b5a069da6065516264736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80636ac49a89116100c35780638ed955b91161007c5780638ed955b91461037657806391d1485414610380578063994cd567146103b0578063a217fddf146103e0578063d547741f146103fe578063ddc632621461041a5761014d565b80636ac49a89146102d85780636c9ab0a7146102f65780636d290d0c1461031457806377d22d1a146103325780638b4a4ed51461033c5780638c19ec8b1461035a5761014d565b806336568abe1161011557806336568abe1461021a578063379607f51461023657806339e5bb76146102525780635aa01b04146102705780635cae9a481461028c5780636336694b146102bc5761014d565b806301ffc9a71461015257806322abbddf14610182578063248a9ca3146101b2578063259e7873146101e25780632f2ff15d146101fe575b600080fd5b61016c6004803603810190610167919061196e565b610436565b60405161017991906119b6565b60405180910390f35b61019c60048036038101906101979190611a2f565b6104b0565b6040516101a991906119b6565b60405180910390f35b6101cc60048036038101906101c79190611a92565b6104d0565b6040516101d99190611ace565b60405180910390f35b6101fc60048036038101906101f79190611b4b565b6104ef565b005b61021860048036038101906102139190611b9e565b610782565b005b610234600480360381019061022f9190611b9e565b6107ab565b005b610250600480360381019061024b9190611bde565b61082e565b005b61025a610a4b565b6040516102679190611c1a565b60405180910390f35b61028a60048036038101906102859190611c35565b610a51565b005b6102a660048036038101906102a19190611bde565b610bd3565b6040516102b39190611c1a565b60405180910390f35b6102d660048036038101906102d19190611bde565b610c07565b005b6102e0610e42565b6040516102ed9190611c1a565b60405180910390f35b6102fe610e4b565b60405161030b9190611ace565b60405180910390f35b61031c610e6f565b6040516103299190611c1a565b60405180910390f35b61033a610e79565b005b610344610f5a565b6040516103519190611de0565b60405180910390f35b610374600480360381019061036f9190611e02565b611048565b005b61037e61109f565b005b61039a60048036038101906103959190611b9e565b6110d4565b6040516103a791906119b6565b60405180910390f35b6103ca60048036038101906103c59190611bde565b61113e565b6040516103d79190611c1a565b60405180910390f35b6103e86111b3565b6040516103f59190611ace565b60405180910390f35b61041860048036038101906104139190611b9e565b6111ba565b005b610434600480360381019061042f9190611bde565b6111e3565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104a957506104a8826113ad565b5b9050919050565b60086020528060005260406000206000915054906101000a900460ff1681565b6000806000838152602001908152602001600020600101549050919050565b7f0609dbbc5d120e6ba35c563820c575fd4a22cab331694eecb5445560aa0924666105218161051c611417565b61141f565b8360001515600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146105b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ac90611e8c565b60405180910390fd5b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600260009054906101000a900460ff16801561062b57506000600454115b1561063957610638610e79565b5b60006040518060a001604052808773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001851515815260200161069c64e8d4a5100061068e6005548a6114bc90919063ffffffff16565b6114d290919063ffffffff16565b815260200160008152509050600381908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055506060820151816003015560808201518160040155505061077481602001516004546114e890919063ffffffff16565b600481905550505050505050565b61078b826104d0565b61079c81610797611417565b61141f565b6107a683836114fe565b505050565b6107b3611417565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610820576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081790611f1e565b60405180910390fd5b61082a82826115de565b5050565b60006003828154811061084457610843611f3e565b5b9060005260206000209060050201905060008160040154141561089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089390611fb9565b60405180910390fd5b6108a4611417565b73ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610935576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092c90612025565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600401546040518363ffffffff1660e01b81526004016109ba929190612054565b6020604051808303816000875af11580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190612092565b50600081600401819055507ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56833838360040154604051610a3f939291906120bf565b60405180910390a15050565b60015481565b7f0609dbbc5d120e6ba35c563820c575fd4a22cab331694eecb5445560aa092466610a8381610a7e611417565b61141f565b600260009054906101000a900460ff168015610aa157506000600454115b15610aaf57610aae610e79565b5b610afb83610aed60038781548110610aca57610ac9611f3e565b5b9060005260206000209060050201600101546004546116bf90919063ffffffff16565b6114e890919063ffffffff16565b6004819055508460038581548110610b1657610b15611f3e565b5b906000526020600020906005020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260038581548110610b7a57610b79611f3e565b5b9060005260206000209060050201600101819055508160038581548110610ba457610ba3611f3e565b5b906000526020600020906005020160020160006101000a81548160ff0219169083151502179055505050505050565b60008060038381548110610bea57610be9611f3e565b5b906000526020600020906005020190508060040154915050919050565b7f0609dbbc5d120e6ba35c563820c575fd4a22cab331694eecb5445560aa092466610c3981610c34611417565b61141f565b6003805490508210610c4a57600080fd5b600260009054906101000a900460ff168015610c6857506000600454115b15610c7657610c75610e79565b5b610cb060038381548110610c8d57610c8c611f3e565b5b9060005260206000209060050201600101546004546116bf90919063ffffffff16565b60048190555060036001600380549050610cca9190612125565b81548110610cdb57610cda611f3e565b5b906000526020600020906005020160038381548110610cfd57610cfc611f3e565b5b90600052602060002090600502016000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600182015481600101556002820160009054906101000a900460ff168160020160006101000a81548160ff02191690831515021790555060038201548160030155600482015481600401559050506003805480610dd257610dd1612159565b5b6001900381819060005260206000209060050201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006101000a81549060ff021916905560038201600090556004820160009055505090555050565b64e8d4a5100081565b7f0609dbbc5d120e6ba35c563820c575fd4a22cab331694eecb5445560aa09246681565b6000600454905090565b600260009054906101000a900460ff16610ec8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebf906121d4565b60405180910390fd5b6006544311610ed657610f58565b6000610eed600654436116bf90919063ffffffff16565b90506000610f06600154836114bc90919063ffffffff16565b9050610f48610f37600454610f2964e8d4a51000856114bc90919063ffffffff16565b6114d290919063ffffffff16565b6005546114e890919063ffffffff16565b6005819055504360068190555050505b565b60606003805480602002602001604051908101604052809291908181526020016000905b8282101561103f57838290600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016003820154815260200160048201548152505081526020019060010190610f7e565b50505050905090565b7f0609dbbc5d120e6ba35c563820c575fd4a22cab331694eecb5445560aa09246661107a81611075611417565b61141f565b81600260006101000a81548160ff021916908315150217905550436006819055505050565b60005b6003805490508160ff1610156110d1576110be8160ff166111e3565b80806110c990612201565b9150506110a2565b50565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806003838154811061115557611154611f3e565b5b906000526020600020906005020190506111ab816003015461119d64e8d4a5100061118f60055486600101546114bc90919063ffffffff16565b6114d290919063ffffffff16565b6116bf90919063ffffffff16565b915050919050565b6000801b81565b6111c3826104d0565b6111d4816111cf611417565b61141f565b6111de83836115de565b505050565b6000600382815481106111f9576111f8611f3e565b5b90600052602060002090600502019050611211610e79565b6000611259826003015461124b64e8d4a5100061123d60055487600101546114bc90919063ffffffff16565b6114d290919063ffffffff16565b6116bf90919063ffffffff16565b90508082600301819055506000811461136d578160020160009054906101000a900460ff166112a6576112998183600401546114e890919063ffffffff16565b826004018190555061136c565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611327929190612054565b6020604051808303816000875af1158015611346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136a9190612092565b505b5b7f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249543384836040516113a0939291906120bf565b60405180910390a1505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b61142982826110d4565b6114b85761144e8173ffffffffffffffffffffffffffffffffffffffff1660146116d5565b61145c8360001c60206116d5565b60405160200161146d92919061233d565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114af91906123c1565b60405180910390fd5b5050565b600081836114ca91906123e3565b905092915050565b600081836114e0919061246c565b905092915050565b600081836114f6919061249d565b905092915050565b61150882826110d4565b6115da57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061157f611417565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6115e882826110d4565b156116bb57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611660611417565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600081836116cd9190612125565b905092915050565b6060600060028360026116e891906123e3565b6116f2919061249d565b67ffffffffffffffff81111561170b5761170a6124f3565b5b6040519080825280601f01601f19166020018201604052801561173d5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061177557611774611f3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106117d9576117d8611f3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261181991906123e3565b611823919061249d565b90505b60018111156118c3577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061186557611864611f3e565b5b1a60f81b82828151811061187c5761187b611f3e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806118bc90612522565b9050611826565b5060008414611907576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fe90612598565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61194b81611916565b811461195657600080fd5b50565b60008135905061196881611942565b92915050565b60006020828403121561198457611983611911565b5b600061199284828501611959565b91505092915050565b60008115159050919050565b6119b08161199b565b82525050565b60006020820190506119cb60008301846119a7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119fc826119d1565b9050919050565b611a0c816119f1565b8114611a1757600080fd5b50565b600081359050611a2981611a03565b92915050565b600060208284031215611a4557611a44611911565b5b6000611a5384828501611a1a565b91505092915050565b6000819050919050565b611a6f81611a5c565b8114611a7a57600080fd5b50565b600081359050611a8c81611a66565b92915050565b600060208284031215611aa857611aa7611911565b5b6000611ab684828501611a7d565b91505092915050565b611ac881611a5c565b82525050565b6000602082019050611ae36000830184611abf565b92915050565b6000819050919050565b611afc81611ae9565b8114611b0757600080fd5b50565b600081359050611b1981611af3565b92915050565b611b288161199b565b8114611b3357600080fd5b50565b600081359050611b4581611b1f565b92915050565b600080600060608486031215611b6457611b63611911565b5b6000611b7286828701611a1a565b9350506020611b8386828701611b0a565b9250506040611b9486828701611b36565b9150509250925092565b60008060408385031215611bb557611bb4611911565b5b6000611bc385828601611a7d565b9250506020611bd485828601611a1a565b9150509250929050565b600060208284031215611bf457611bf3611911565b5b6000611c0284828501611b0a565b91505092915050565b611c1481611ae9565b82525050565b6000602082019050611c2f6000830184611c0b565b92915050565b60008060008060808587031215611c4f57611c4e611911565b5b6000611c5d87828801611a1a565b9450506020611c6e87828801611b0a565b9350506040611c7f87828801611b0a565b9250506060611c9087828801611b36565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611cd1816119f1565b82525050565b611ce081611ae9565b82525050565b611cef8161199b565b82525050565b60a082016000820151611d0b6000850182611cc8565b506020820151611d1e6020850182611cd7565b506040820151611d316040850182611ce6565b506060820151611d446060850182611cd7565b506080820151611d576080850182611cd7565b50505050565b6000611d698383611cf5565b60a08301905092915050565b6000602082019050919050565b6000611d8d82611c9c565b611d978185611ca7565b9350611da283611cb8565b8060005b83811015611dd3578151611dba8882611d5d565b9750611dc583611d75565b925050600181019050611da6565b5085935050505092915050565b60006020820190508181036000830152611dfa8184611d82565b905092915050565b600060208284031215611e1857611e17611911565b5b6000611e2684828501611b36565b91505092915050565b600082825260208201905092915050565b7f6e6f6e4475706c6963617465643a206475706c69636174656400000000000000600082015250565b6000611e76601983611e2f565b9150611e8182611e40565b602082019050919050565b60006020820190508181036000830152611ea581611e69565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000611f08602f83611e2f565b9150611f1382611eac565b604082019050919050565b60006020820190508181036000830152611f3781611efb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f20636c61696d61626c65207265776172647320746f207769746864726177600082015250565b6000611fa3602083611e2f565b9150611fae82611f6d565b602082019050919050565b60006020820190508181036000830152611fd281611f96565b9050919050565b7f53656e64657220646f6573206e6f7420726570726573656e742067726f757000600082015250565b600061200f601f83611e2f565b915061201a82611fd9565b602082019050919050565b6000602082019050818103600083015261203e81612002565b9050919050565b61204e816119f1565b82525050565b60006040820190506120696000830185612045565b6120766020830184611c0b565b9392505050565b60008151905061208c81611b1f565b92915050565b6000602082840312156120a8576120a7611911565b5b60006120b68482850161207d565b91505092915050565b60006060820190506120d46000830186612045565b6120e16020830185611c0b565b6120ee6040830184611c0b565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061213082611ae9565b915061213b83611ae9565b92508282101561214e5761214d6120f6565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f5265776172647320617265206e6f742061637469766500000000000000000000600082015250565b60006121be601683611e2f565b91506121c982612188565b602082019050919050565b600060208201905081810360008301526121ed816121b1565b9050919050565b600060ff82169050919050565b600061220c826121f4565b915060ff8214156122205761221f6120f6565b5b600182019050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b600061226c60178361222b565b915061227782612236565b601782019050919050565b600081519050919050565b60005b838110156122ab578082015181840152602081019050612290565b838111156122ba576000848401525b50505050565b60006122cb82612282565b6122d5818561222b565b93506122e581856020860161228d565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b600061232760118361222b565b9150612332826122f1565b601182019050919050565b60006123488261225f565b915061235482856122c0565b915061235f8261231a565b915061236b82846122c0565b91508190509392505050565b6000601f19601f8301169050919050565b600061239382612282565b61239d8185611e2f565b93506123ad81856020860161228d565b6123b681612377565b840191505092915050565b600060208201905081810360008301526123db8184612388565b905092915050565b60006123ee82611ae9565b91506123f983611ae9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612432576124316120f6565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061247782611ae9565b915061248283611ae9565b9250826124925761249161243d565b5b828204905092915050565b60006124a882611ae9565b91506124b383611ae9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156124e8576124e76120f6565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061252d82611ae9565b91506000821415612541576125406120f6565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612582602083611e2f565b915061258d8261254c565b602082019050919050565b600060208201905081810360008301526125b181612575565b905091905056fea2646970667358221220861d61f90892c932846fde84bd40effaa8d45545808d93f9b5a069da6065516264736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "In sushi's master chef, the design allows the controller to submit LP contracts for yield farming, and then user's can stake their LP tokens. In this contract, there is no concept of a user staking their LP tokens - and instead of LP contract, the controller is submitting Allocation Groups. So in sushi: 1.  Every `x` blocks, calculate minted Sushi Tokens for each LP contract based on their (shares / total shares) 2.  Then, do the math to figure out how many rewards each LP token is worth (based on the total amount of LP tokens staked) 3.  Then, when a user requests their rewards, their claimable amount is based on how many tokens they have staked - and from the previous step, we know how many rewards each LP token gets. 4.  Historical withdrawals are tracked through \"rewardDebt\" - so subtract the amount of rewards they have already claimed from their total earned rewards. This contract is a bit more simplified.  Basically there are no LP tokens - so those values are tracked at the top level. 1.  whenever updateAccumulatedAllocations() is called, we look at how many blocks it's been since the last time it called and multiply that by the `METRIC_PER_BLOCK` value. 2.  Then we use that value to determine how much each current \"share\" is going to be earning, and save that as _lifetimeShareValue 3.  Then, when an Allocation Group calls Harvest, we figure out how much they've earned based on the _lifetimeShareValue and their current allocation. 4.  We track historical harvests through \"debt\" - an AG's Debt is how much they've already harvested, so we subtract that from their lifetime earned rewards to get current earned rewards. - OR, Same thing different lens -  1.  Every `x` blocks, calculate  METRIC Tokens for each AG based on their (shares / total shares) 2.  Then, do the math to figure out how many METRIC tokens will be distributed in total 3.  Then, when a user requests their rewards, their claimable amount is based on how many shares they have - and from the previous step, we know how many rewards each AG group gets. 4.  Historical withdrawals are tracked through \"rewardDebt\" - so subtract the amount of rewards they have already claimed from their total earned rewards.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/contracts/Chef.sol:Chef",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 1668,
        "contract": "src/contracts/Chef.sol:Chef",
        "label": "METRIC_PER_BLOCK",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1673,
        "contract": "src/contracts/Chef.sol:Chef",
        "label": "_rewardsActive",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1677,
        "contract": "src/contracts/Chef.sol:Chef",
        "label": "_allocations",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(AllocationGroup)2209_storage)dyn_storage"
      },
      {
        "astId": 1679,
        "contract": "src/contracts/Chef.sol:Chef",
        "label": "_totalAllocPoint",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1682,
        "contract": "src/contracts/Chef.sol:Chef",
        "label": "_lifetimeShareValue",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1684,
        "contract": "src/contracts/Chef.sol:Chef",
        "label": "_lastRewardBlock",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1687,
        "contract": "src/contracts/Chef.sol:Chef",
        "label": "_metric",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(MetricToken)2270"
      },
      {
        "astId": 2161,
        "contract": "src/contracts/Chef.sol:Chef",
        "label": "addressExistence",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(AllocationGroup)2209_storage)dyn_storage": {
        "base": "t_struct(AllocationGroup)2209_storage",
        "encoding": "dynamic_array",
        "label": "struct Chef.AllocationGroup[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(MetricToken)2270": {
        "encoding": "inplace",
        "label": "contract MetricToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(AllocationGroup)2209_storage": {
        "encoding": "inplace",
        "label": "struct Chef.AllocationGroup",
        "members": [
          {
            "astId": 2200,
            "contract": "src/contracts/Chef.sol:Chef",
            "label": "groupAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2202,
            "contract": "src/contracts/Chef.sol:Chef",
            "label": "shares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2204,
            "contract": "src/contracts/Chef.sol:Chef",
            "label": "autodistribute",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2206,
            "contract": "src/contracts/Chef.sol:Chef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2208,
            "contract": "src/contracts/Chef.sol:Chef",
            "label": "claimable",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/contracts/Chef.sol:Chef",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/contracts/Chef.sol:Chef",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}